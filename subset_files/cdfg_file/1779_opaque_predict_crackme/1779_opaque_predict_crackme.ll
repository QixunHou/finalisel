; ModuleID = '../.././c_source_file/1779_opaque_predict_crackme.c'
source_filename = "../.././c_source_file/1779_opaque_predict_crackme.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str.2 = private unnamed_addr constant [15 x i8] c"%d %d %d %d %d\00", align 1
@str = private unnamed_addr constant [4 x i8] c"bad\00", align 1
@str.3 = private unnamed_addr constant [5 x i8] c"good\00", align 1

; Function Attrs: nofree nounwind uwtable
define dso_local void @crackme(i32 %0, i32 %1, i32 %2, i32 %3, i32 %4) local_unnamed_addr #0 {
  %6 = mul i32 %3, 3
  %7 = shl i32 %3, 1
  %8 = xor i32 %7, -2
  %9 = xor i32 %0, -1
  %10 = xor i32 %2, -1
  %11 = and i32 %10, %1
  %12 = or i32 %11, %9
  %13 = xor i32 %1, -1
  %14 = or i32 %13, %0
  %15 = and i32 %14, %2
  %16 = sub i32 %6, %15
  %17 = sub i32 %16, %12
  %18 = add i32 %17, %8
  %19 = xor i32 %4, %3
  %20 = xor i32 %4, -1
  %21 = and i32 %20, %3
  %22 = shl i32 %21, 1
  %23 = xor i32 %22, -2
  %24 = or i32 %20, %3
  %25 = or i32 %4, %3
  %26 = shl i32 %25, 2
  %27 = xor i32 %26, -4
  %28 = and i32 %4, %3
  %29 = or i32 %2, %0
  %30 = xor i32 %29, -1
  %31 = xor i32 %1, %0
  %32 = or i32 %31, %30
  %33 = or i32 %10, %0
  %34 = xor i32 %33, -1
  %35 = or i32 %34, %1
  %36 = xor i32 %14, -1
  %37 = xor i32 %2, %0
  %38 = or i32 %37, %36
  %39 = or i32 %2, %1
  %40 = or i32 %39, %9
  %41 = and i32 %13, %2
  %42 = and i32 %41, %9
  %43 = xor i32 %2, %1
  %44 = or i32 %43, %9
  %45 = xor i32 %42, %44
  %46 = and i32 %2, %0
  %47 = or i32 %46, %31
  %48 = shl i32 %47, 1
  %49 = xor i32 %11, -1
  %50 = or i32 %49, %9
  %51 = xor i32 %31, -1
  %52 = and i32 %37, %51
  %53 = or i32 %1, %0
  %54 = and i32 %10, %0
  %55 = xor i32 %54, -1
  %56 = and i32 %55, %13
  %57 = and i32 %1, %0
  %58 = xor i32 %57, -1
  %59 = and i32 %43, %58
  %60 = or i32 %10, %1
  %61 = xor i32 %60, -1
  %62 = or i32 %54, %61
  %63 = and i32 %41, %0
  %64 = xor i32 %43, %0
  %65 = or i32 %63, %64
  %66 = and i32 %2, %1
  %67 = or i32 %54, %66
  %68 = or i32 %36, %2
  %69 = or i32 %57, %2
  %70 = shl i32 %69, 1
  %71 = xor i32 %66, -1
  %72 = or i32 %71, %9
  %73 = xor i32 %39, -1
  %74 = xor i32 %73, %0
  %75 = xor i32 %63, -1
  %76 = xor i32 %64, %75
  %77 = xor i32 %71, %0
  %78 = and i32 %13, %0
  %79 = xor i32 %78, %71
  %80 = add i32 %31, 1
  %81 = or i32 %13, %2
  %82 = xor i32 %81, %0
  %83 = or i32 %63, %82
  %84 = xor i32 %44, -1
  %85 = or i32 %42, %84
  %86 = or i32 %46, %13
  %87 = xor i32 %53, -1
  %88 = or i32 %37, %87
  %89 = xor i32 %37, -1
  %90 = and i32 %89, %58
  %91 = xor i32 %46, %39
  %92 = and i32 %33, %13
  %93 = and i32 %43, %14
  %94 = or i32 %30, %51
  %95 = and i32 %39, %0
  %96 = and i32 %53, %10
  %97 = and i32 %66, %0
  %98 = and i32 %39, %9
  %99 = xor i32 %98, 2147483647
  %100 = xor i32 %99, %97
  %101 = shl i32 %100, 1
  %102 = xor i32 %82, %75
  %103 = xor i32 %58, %2
  %104 = xor i32 %43, -1
  %105 = and i32 %104, %58
  %106 = xor i32 %78, %2
  %107 = or i32 %46, %11
  %108 = or i32 %66, %0
  %109 = xor i32 %78, -1
  %110 = shl i32 %109, 2
  %111 = and i32 %71, %0
  %112 = and i32 %53, %2
  %113 = shl i32 %112, 1
  %114 = and i32 %37, %53
  %115 = or i32 %31, %89
  %116 = shl i32 %115, 2
  %117 = xor i32 %29, %57
  %118 = add i32 %1, 1
  %119 = or i32 %11, %0
  %120 = or i32 %89, %13
  %121 = shl i32 %120, 1
  %122 = or i32 %57, %73
  %123 = xor i32 %39, %0
  %124 = or i32 %97, %123
  %125 = xor i32 %46, -1
  %126 = xor i32 %125, %1
  %127 = shl i32 %126, 1
  %128 = xor i32 %30, %1
  %129 = or i32 %104, %36
  %130 = or i32 %73, %9
  %131 = or i32 %34, %13
  %132 = or i32 %104, %9
  %133 = and i32 %81, %0
  %134 = or i32 %42, %133
  %135 = shl i32 %134, 1
  %136 = or i32 %78, %10
  %137 = and i32 %37, %109
  %138 = and i32 %89, %1
  %139 = and i32 %66, %9
  %140 = xor i32 %139, -1
  %141 = xor i32 %95, %140
  %142 = xor i32 %36, %2
  %143 = xor i32 %46, %1
  %144 = and i32 %33, %51
  %145 = and i32 %43, %0
  %146 = or i32 %139, %145
  %147 = and i32 %89, %109
  %148 = or i32 %51, %2
  %149 = and i32 %53, %89
  %150 = and i32 %14, %10
  %151 = xor i32 %46, %53
  %152 = and i32 %43, %109
  %153 = or i32 %43, %87
  %154 = or i32 %46, %51
  %155 = or i32 %37, %57
  %156 = or i32 %71, %0
  %157 = xor i32 %104, %0
  %158 = shl i32 %157, 1
  %159 = and i32 %31, %89
  %160 = xor i32 %145, %140
  %161 = and i32 %51, %2
  %162 = shl i32 %161, 1
  %163 = and i32 %58, %2
  %164 = and i32 %31, %55
  %165 = xor i32 %11, %0
  %166 = and i32 %29, %1
  %167 = shl i32 %166, 1
  %168 = xor i32 %109, %2
  %169 = shl i32 %73, 1
  %170 = xor i32 %97, -1
  %171 = xor i32 %123, %170
  %172 = or i32 %46, %1
  %173 = and i32 %37, %13
  %174 = xor i32 %46, %49
  %175 = and i32 %43, %9
  %176 = or i32 %10, %87
  %177 = shl i32 %176, 1
  %178 = and i32 %53, %104
  %179 = or i32 %37, %78
  %180 = or i32 %73, %0
  %181 = add i32 %57, 1
  %182 = and i32 %81, %9
  %183 = or i32 %63, %182
  %184 = shl i32 %183, 1
  %185 = or i32 %11, %78
  %186 = or i32 %43, %78
  %187 = and i32 %60, %9
  %188 = or i32 %78, %2
  %189 = or i32 %46, %87
  %190 = xor i32 %54, %71
  %191 = xor i32 %29, %1
  %192 = or i32 %43, %57
  %193 = xor i32 %39, %57
  %194 = or i32 %34, %51
  %195 = or i32 %57, %89
  %196 = xor i32 %175, %170
  %197 = and i32 %60, %0
  %198 = and i32 %29, %51
  %199 = or i32 %43, %0
  %200 = shl i32 %57, 1
  %201 = or i32 %97, %98
  %202 = and i32 %104, %0
  %203 = or i32 %31, %34
  %204 = and i32 %109, %2
  %205 = or i32 %57, %61
  %206 = xor i32 %14, %2
  %207 = and i32 %14, %104
  %208 = xor i32 %66, %0
  %209 = or i32 %43, %36
  %210 = xor i32 %182, 2147483647
  %211 = xor i32 %210, %63
  %212 = shl i32 %211, 1
  %213 = or i32 %60, %9
  %214 = and i32 %125, %51
  %215 = add i32 %66, 1
  %216 = and i32 %104, %9
  %217 = or i32 %89, %1
  %218 = or i32 %30, %13
  %219 = xor i32 %60, %0
  %220 = shl i32 %219, 1
  %221 = and i32 %73, %9
  %222 = mul i32 %221, 12
  %223 = and i32 %11, %9
  %224 = and i32 %73, %0
  %225 = and i32 %11, %0
  %226 = and i32 %61, %9
  %227 = shl i32 %139, 3
  %228 = and i32 %61, %0
  %229 = mul i32 %97, 31
  %230 = add i32 %104, %87
  %231 = add i32 %230, %125
  %232 = add i32 %231, %49
  %233 = add i32 %232, %68
  %234 = add i32 %233, %34
  %235 = add i32 %234, %225
  %236 = add i32 %235, %195
  %237 = add i32 %236, %172
  %238 = add i32 %237, %62
  %239 = add i32 %238, %83
  %240 = sub i32 %226, %136
  %241 = add i32 %240, %137
  %242 = add i32 %241, %90
  %243 = sub i32 %242, %74
  %244 = add i32 %243, %21
  %245 = add i32 %244, %76
  %246 = mul i32 %245, 5
  %247 = sub i32 %118, %216
  %248 = add i32 %247, %228
  %249 = add i32 %248, %159
  %250 = mul i32 %249, 3
  %251 = add i32 %28, %130
  %252 = add i32 %251, %146
  %253 = shl i32 %252, 2
  %254 = or i32 %224, %223
  %255 = mul i32 %254, 9
  %256 = add i32 %239, %19
  %257 = shl i32 %256, 1
  %258 = add i32 %0, 3
  %259 = add i32 %258, %53
  %260 = add i32 %259, %80
  %261 = add i32 %260, %14
  %262 = sub i32 %261, %2
  %263 = add i32 %262, %181
  %264 = add i32 %263, %96
  %265 = add i32 %264, %46
  %266 = sub i32 %265, %103
  %267 = add i32 %266, %106
  %268 = sub i32 %267, %110
  %269 = add i32 %268, %43
  %270 = sub i32 %269, %142
  %271 = sub i32 %270, %66
  %272 = sub i32 %271, %148
  %273 = add i32 %272, %150
  %274 = add i32 %273, %163
  %275 = sub i32 %274, %54
  %276 = add i32 %275, %168
  %277 = sub i32 %276, %33
  %278 = sub i32 %277, %39
  %279 = sub i32 %278, %188
  %280 = sub i32 %279, %200
  %281 = sub i32 %280, %204
  %282 = add i32 %281, %206
  %283 = add i32 %282, %37
  %284 = add i32 %283, %215
  %285 = add i32 %284, 1
  %286 = add i32 %285, %4
  %287 = add i32 %286, %32
  %288 = sub i32 %287, %35
  %289 = sub i32 %288, %38
  %290 = sub i32 %289, %40
  %291 = sub i32 %290, %50
  %292 = sub i32 %291, %52
  %293 = sub i32 %292, %56
  %294 = add i32 %293, %59
  %295 = add i32 %294, %67
  %296 = sub i32 %295, %70
  %297 = add i32 %296, %72
  %298 = sub i32 %297, %77
  %299 = add i32 %298, %79
  %300 = add i32 %299, %86
  %301 = add i32 %300, %88
  %302 = sub i32 %301, %91
  %303 = add i32 %302, %92
  %304 = add i32 %303, %93
  %305 = sub i32 %304, %94
  %306 = add i32 %305, %95
  %307 = add i32 %306, %105
  %308 = sub i32 %307, %64
  %309 = sub i32 %308, %107
  %310 = add i32 %309, %108
  %311 = sub i32 %310, %111
  %312 = sub i32 %311, %113
  %313 = add i32 %312, %114
  %314 = add i32 %313, %117
  %315 = sub i32 %314, %119
  %316 = sub i32 %315, %122
  %317 = sub i32 %316, %128
  %318 = add i32 %317, %129
  %319 = sub i32 %318, %131
  %320 = sub i32 %319, %132
  %321 = add i32 %320, %138
  %322 = sub i32 %321, %143
  %323 = sub i32 %322, %98
  %324 = add i32 %323, %144
  %325 = add i32 %324, %147
  %326 = sub i32 %325, %149
  %327 = add i32 %326, %151
  %328 = add i32 %327, %152
  %329 = add i32 %328, %153
  %330 = sub i32 %329, %154
  %331 = add i32 %330, %155
  %332 = sub i32 %331, %156
  %333 = sub i32 %332, %162
  %334 = add i32 %333, %164
  %335 = sub i32 %334, %165
  %336 = sub i32 %335, %169
  %337 = add i32 %336, %173
  %338 = sub i32 %337, %174
  %339 = sub i32 %338, %175
  %340 = sub i32 %339, %177
  %341 = add i32 %340, %178
  %342 = add i32 %341, %179
  %343 = add i32 %342, %180
  %344 = sub i32 %343, %185
  %345 = sub i32 %344, %186
  %346 = sub i32 %345, %187
  %347 = add i32 %346, %189
  %348 = add i32 %347, %190
  %349 = add i32 %348, %191
  %350 = add i32 %349, %192
  %351 = add i32 %350, %193
  %352 = sub i32 %351, %194
  %353 = sub i32 %352, %197
  %354 = sub i32 %353, %198
  %355 = add i32 %354, %199
  %356 = sub i32 %355, %202
  %357 = sub i32 %356, %203
  %358 = sub i32 %357, %205
  %359 = add i32 %358, %207
  %360 = add i32 %359, %208
  %361 = sub i32 %360, %209
  %362 = sub i32 %361, %213
  %363 = sub i32 %362, %214
  %364 = add i32 %363, %217
  %365 = add i32 %364, %218
  %366 = sub i32 %365, %24
  %367 = add i32 %366, %45
  %368 = sub i32 %367, %48
  %369 = add i32 %368, %65
  %370 = add i32 %369, %85
  %371 = sub i32 %370, %102
  %372 = sub i32 %371, %116
  %373 = sub i32 %372, %121
  %374 = sub i32 %373, %124
  %375 = sub i32 %374, %127
  %376 = sub i32 %375, %141
  %377 = sub i32 %376, %158
  %378 = add i32 %377, %160
  %379 = sub i32 %378, %167
  %380 = add i32 %379, %171
  %381 = add i32 %380, %196
  %382 = add i32 %381, %201
  %383 = sub i32 %382, %220
  %384 = add i32 %383, %222
  %385 = sub i32 %384, %227
  %386 = add i32 %385, %229
  %387 = sub i32 %386, %135
  %388 = sub i32 %387, %184
  %389 = add i32 %388, %255
  %390 = add i32 %389, %23
  %391 = add i32 %390, %27
  %392 = sub i32 %391, %101
  %393 = sub i32 %392, %212
  %394 = add i32 %393, %250
  %395 = add i32 %394, %253
  %396 = add i32 %395, %246
  %397 = add i32 %396, %257
  %398 = icmp eq i32 %18, %397
  %399 = select i1 %398, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)
  %400 = tail call i32 @puts(i8* nonnull dereferenceable(1) %399)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #1 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %6) #5
  %7 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %7) #5
  %8 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %8) #5
  %9 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %9) #5
  %10 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %10) #5
  %11 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3, i32* nonnull %4, i32* nonnull %5)
  %12 = load i32, i32* %1, align 4, !tbaa !2
  %13 = load i32, i32* %2, align 4, !tbaa !2
  %14 = load i32, i32* %3, align 4, !tbaa !2
  %15 = load i32, i32* %4, align 4, !tbaa !2
  %16 = load i32, i32* %5, align 4, !tbaa !2
  call void @crackme(i32 %12, i32 %13, i32 %14, i32 %15, i32 %16)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %10) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %9) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %8) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %7) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %6) #5
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare dso_local i32 @__isoc99_scanf(i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #4

attributes #0 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Ubuntu clang version 10.0.1-++20200708122807+ef32c611aa2-1~exp1~20200707223407.61 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
