digraph "DFG for'crackme' function" {
	Node0x8f2570[shape=record, label="  %3 = xor i32 %1, %0"];
	Node0x8f2c20[shape=record, label="  %4 = shl i32 %3, 1"];
	Node0x8f2ce0[shape=record, label="  %5 = or i32 %4, 1"];
	Node0x8f2d50[shape=record, label="  %6 = add i32 %5, %0"];
	Node0x8f2dc0[shape=record, label="  %7 = xor i32 %1, -1"];
	Node0x8f2e30[shape=record, label="  %8 = or i32 %7, %0"];
	Node0x8f2ea0[shape=record, label="  %9 = shl i32 %8, 1"];
	Node0x8f2f10[shape=record, label="  %10 = or i32 %1, %0"];
	Node0x8f2fb0[shape=record, label="  %11 = mul i32 %7, 3"];
	Node0x8f3020[shape=record, label="  %12 = and i32 %1, %0"];
	Node0x8f3090[shape=record, label="  %13 = xor i32 %12, -1"];
	Node0x8f3100[shape=record, label="  %14 = shl i32 %10, 3"];
	Node0x8f31a0[shape=record, label="  %15 = or i32 %14, 7"];
	Node0x8f3240[shape=record, label="  %16 = xor i32 %9, -2"];
	Node0x8f32b0[shape=record, label="  %17 = and i32 %7, %0"];
	Node0x8f3350[shape=record, label="  %18 = mul i32 %17, -6"];
	Node0x8f33f0[shape=record, label="  %19 = shl i32 %12, 2"];
	Node0x8f3460[shape=record, label="  %20 = add i32 %11, %10"];
	Node0x8f34d0[shape=record, label="  %21 = add i32 %20, %13"];
	Node0x8f3540[shape=record, label="  %22 = add i32 %21, %9"];
	Node0x8f35b0[shape=record, label="  %23 = add i32 %22, %18"];
	Node0x8f3620[shape=record, label="  %24 = sub i32 %23, %19"];
	Node0x8f3690[shape=record, label="  %25 = add i32 %24, %15"];
	Node0x8f3700[shape=record, label="  %26 = sub i32 %25, %16"];
	Node0x8f3770[shape=record, label="  %27 = icmp eq i32 %6, %26"];
	Node0x893268[shape=record, label="  %28 = select i1 %27, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0x8f3c10[shape=record, label="  %29 = tail call i32 @puts(i8* nonnull dereferenceable(1) %28)"];
	Node0x8f3c60[shape=record, label="  ret void"];
	Node0x8f2570 -> Node0x8f2c20;
	Node0x8f2c20 -> Node0x8f2ce0;
	Node0x8f2ce0 -> Node0x8f2d50;
	Node0x8f2d50 -> Node0x8f2dc0;
	Node0x8f2dc0 -> Node0x8f2e30;
	Node0x8f2e30 -> Node0x8f2ea0;
	Node0x8f2ea0 -> Node0x8f2f10;
	Node0x8f2f10 -> Node0x8f2fb0;
	Node0x8f2fb0 -> Node0x8f3020;
	Node0x8f3020 -> Node0x8f3090;
	Node0x8f3090 -> Node0x8f3100;
	Node0x8f3100 -> Node0x8f31a0;
	Node0x8f31a0 -> Node0x8f3240;
	Node0x8f3240 -> Node0x8f32b0;
	Node0x8f32b0 -> Node0x8f3350;
	Node0x8f3350 -> Node0x8f33f0;
	Node0x8f33f0 -> Node0x8f3460;
	Node0x8f3460 -> Node0x8f34d0;
	Node0x8f34d0 -> Node0x8f3540;
	Node0x8f3540 -> Node0x8f35b0;
	Node0x8f35b0 -> Node0x8f3620;
	Node0x8f3620 -> Node0x8f3690;
	Node0x8f3690 -> Node0x8f3700;
	Node0x8f3700 -> Node0x8f3770;
	Node0x8f3770 -> Node0x893268;
	Node0x893268 -> Node0x8f3c10;
	Node0x8f3c10 -> Node0x8f3c60;
edge [color=red]
	Node0x8f2570 -> Node0x8f2c20;
	Node0x8f2c20 -> Node0x8f2ce0;
	Node0x8f2ce0 -> Node0x8f2d50;
	Node0x8f2dc0 -> Node0x8f2e30;
	Node0x8f2e30 -> Node0x8f2ea0;
	Node0x8f2dc0 -> Node0x8f2fb0;
	Node0x8f3020 -> Node0x8f3090;
	Node0x8f2f10 -> Node0x8f3100;
	Node0x8f3100 -> Node0x8f31a0;
	Node0x8f2ea0 -> Node0x8f3240;
	Node0x8f2dc0 -> Node0x8f32b0;
	Node0x8f32b0 -> Node0x8f3350;
	Node0x8f3020 -> Node0x8f33f0;
	Node0x8f2fb0 -> Node0x8f3460;
	Node0x8f2f10 -> Node0x8f3460;
	Node0x8f3460 -> Node0x8f34d0;
	Node0x8f3090 -> Node0x8f34d0;
	Node0x8f34d0 -> Node0x8f3540;
	Node0x8f2ea0 -> Node0x8f3540;
	Node0x8f3540 -> Node0x8f35b0;
	Node0x8f3350 -> Node0x8f35b0;
	Node0x8f35b0 -> Node0x8f3620;
	Node0x8f33f0 -> Node0x8f3620;
	Node0x8f3620 -> Node0x8f3690;
	Node0x8f31a0 -> Node0x8f3690;
	Node0x8f3690 -> Node0x8f3700;
	Node0x8f3240 -> Node0x8f3700;
	Node0x8f2d50 -> Node0x8f3770;
	Node0x8f3700 -> Node0x8f3770;
	Node0x8f3770 -> Node0x893268;
	Node0x893268 -> Node0x8f3c10;
}
