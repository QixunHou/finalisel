; ModuleID = '../.././c_source_file/0659_path_condition_crackme.c'
source_filename = "../.././c_source_file/0659_path_condition_crackme.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str.2 = private unnamed_addr constant [9 x i8] c"%d %d %d\00", align 1
@str = private unnamed_addr constant [4 x i8] c"bad\00", align 1
@str.3 = private unnamed_addr constant [5 x i8] c"good\00", align 1

; Function Attrs: nofree nounwind uwtable
define dso_local void @crackme(i32 %0, i32 %1, i32 %2) local_unnamed_addr #0 {
  %4 = xor i32 %2, -1
  %5 = or i32 %4, %0
  %6 = xor i32 %1, %0
  %7 = xor i32 %6, -1
  %8 = and i32 %5, %7
  %9 = and i32 %4, %1
  %10 = xor i32 %9, -1
  %11 = xor i32 %10, %0
  %12 = add i32 %8, %11
  %13 = and i32 %2, %0
  %14 = or i32 %1, %0
  %15 = xor i32 %13, %14
  %16 = xor i32 %1, -1
  %17 = and i32 %16, %0
  %18 = or i32 %9, %17
  %19 = xor i32 %2, %0
  %20 = or i32 %19, %17
  %21 = xor i32 %0, -1
  %22 = and i32 %16, %2
  %23 = and i32 %22, %21
  %24 = xor i32 %2, %1
  %25 = or i32 %24, %21
  %26 = xor i32 %23, %25
  %27 = and i32 %1, %0
  %28 = or i32 %4, %1
  %29 = xor i32 %28, %27
  %30 = or i32 %16, %0
  %31 = and i32 %30, %2
  %32 = shl i32 %31, 1
  %33 = xor i32 %17, -1
  %34 = xor i32 %19, -1
  %35 = and i32 %34, %33
  %36 = xor i32 %13, %1
  %37 = and i32 %19, %16
  %38 = or i32 %27, %34
  %39 = xor i32 %5, %1
  %40 = xor i32 %28, -1
  %41 = or i32 %40, %0
  %42 = and i32 %4, %0
  %43 = xor i32 %42, -1
  %44 = xor i32 %14, -1
  %45 = add i32 %14, 1
  %46 = and i32 %2, %1
  %47 = or i32 %46, %17
  %48 = shl i32 %47, 1
  %49 = or i32 %10, %21
  %50 = or i32 %46, %0
  %51 = and i32 %43, %16
  %52 = shl i32 %51, 1
  %53 = or i32 %42, %16
  %54 = or i32 %19, %27
  %55 = shl i32 %54, 1
  %56 = and i32 %46, %0
  %57 = or i32 %2, %1
  %58 = xor i32 %57, -1
  %59 = or i32 %58, %0
  %60 = xor i32 %56, %59
  %61 = and i32 %24, %30
  %62 = or i32 %17, %4
  %63 = xor i32 %46, -1
  %64 = xor i32 %17, %63
  %65 = and i32 %46, %21
  %66 = and i32 %24, %0
  %67 = xor i32 %65, -1
  %68 = xor i32 %66, %67
  %69 = and i32 %24, %21
  %70 = and i32 %19, %30
  %71 = or i32 %16, %2
  %72 = and i32 %71, %0
  %73 = xor i32 %72, 2147483647
  %74 = xor i32 %73, %23
  %75 = shl i32 %74, 1
  %76 = or i32 %13, %1
  %77 = shl i32 %76, 1
  %78 = xor i32 %44, %2
  %79 = or i32 %42, %46
  %80 = and i32 %19, %1
  %81 = or i32 %2, %0
  %82 = xor i32 %81, %27
  %83 = xor i32 %27, -1
  %84 = and i32 %83, %2
  %85 = xor i32 %5, %27
  %86 = shl i32 %85, 1
  %87 = xor i32 %24, -1
  %88 = and i32 %87, %0
  %89 = and i32 %5, %16
  %90 = or i32 %63, %0
  %91 = xor i32 %5, -1
  %92 = and i32 %24, %14
  %93 = shl i32 %92, 1
  %94 = xor i32 %57, %0
  %95 = or i32 %56, %94
  %96 = xor i32 %46, %0
  %97 = xor i32 %24, %0
  %98 = and i32 %34, %83
  %99 = xor i32 %27, %2
  %100 = xor i32 %13, %10
  %101 = and i32 %6, %4
  %102 = xor i32 %56, %97
  %103 = mul i32 %102, 3
  %104 = xor i32 %17, %10
  %105 = shl i32 %104, 2
  %106 = xor i32 %40, %0
  %107 = and i32 %6, %43
  %108 = xor i32 %30, %2
  %109 = shl i32 %108, 1
  %110 = add i32 %9, 1
  %111 = or i32 %57, %21
  %112 = and i32 %34, %1
  %113 = xor i32 %42, %28
  %114 = xor i32 %83, %2
  %115 = or i32 %9, %21
  %116 = xor i32 %13, %30
  %117 = xor i32 %13, -1
  %118 = and i32 %117, %1
  %119 = or i32 %6, %34
  %120 = or i32 %13, %16
  %121 = xor i32 %81, -1
  %122 = shl i32 %121, 1
  %123 = or i32 %17, %34
  %124 = or i32 %34, %7
  %125 = or i32 %10, %0
  %126 = and i32 %5, %1
  %127 = and i32 %34, %16
  %128 = and i32 %57, %0
  %129 = xor i32 %128, %67
  %130 = and i32 %14, %2
  %131 = shl i32 %63, 1
  %132 = or i32 %87, %44
  %133 = xor i32 %25, -1
  %134 = or i32 %23, %133
  %135 = or i32 %19, %44
  %136 = or i32 %57, %0
  %137 = xor i32 %57, %27
  %138 = or i32 %13, %44
  %139 = and i32 %14, %34
  %140 = and i32 %24, %83
  %141 = shl i32 %140, 1
  %142 = and i32 %81, %6
  %143 = xor i32 %30, -1
  %144 = or i32 %19, %143
  %145 = and i32 %7, %2
  %146 = xor i32 %17, %2
  %147 = or i32 %27, %58
  %148 = and i32 %117, %16
  %149 = or i32 %4, %44
  %150 = and i32 %22, %0
  %151 = or i32 %24, %0
  %152 = xor i32 %151, -1
  %153 = or i32 %150, %152
  %154 = xor i32 %33, %2
  %155 = or i32 %27, %2
  %156 = xor i32 %81, %1
  %157 = or i32 %42, %7
  %158 = and i32 %19, %14
  %159 = and i32 %33, %2
  %160 = or i32 %58, %21
  %161 = and i32 %87, %33
  %162 = and i32 %81, %7
  %163 = xor i32 %58, %0
  %164 = xor i32 %150, %151
  %165 = xor i32 %13, %57
  %166 = and i32 %10, %21
  %167 = and i32 %4, %83
  %168 = shl i32 %167, 1
  %169 = or i32 %121, %1
  %170 = add i32 %0, 1
  %171 = xor i32 %97, -1
  %172 = xor i32 %150, %171
  %173 = or i32 %46, %21
  %174 = or i32 %13, %9
  %175 = xor i32 %63, %0
  %176 = or i32 %24, %27
  %177 = and i32 %43, %1
  %178 = shl i32 %177, 1
  %179 = or i32 %17, %2
  %180 = and i32 %43, %7
  %181 = or i32 %91, %7
  %182 = or i32 %19, %1
  %183 = or i32 %65, %128
  %184 = and i32 %117, %7
  %185 = or i32 %42, %1
  %186 = and i32 %34, %7
  %187 = or i32 %13, %7
  %188 = or i32 %28, %21
  %189 = and i32 %63, %21
  %190 = or i32 %7, %2
  %191 = and i32 %87, %21
  %192 = or i32 %27, %121
  %193 = shl i32 %192, 1
  %194 = and i32 %19, %83
  %195 = and i32 %19, %6
  %196 = and i32 %4, %33
  %197 = and i32 %5, %6
  %198 = and i32 %28, %0
  %199 = shl i32 %198, 1
  %200 = xor i32 %71, %0
  %201 = or i32 %150, %200
  %202 = or i32 %13, %143
  %203 = and i32 %28, %21
  %204 = or i32 %87, %21
  %205 = or i32 %65, %66
  %206 = and i32 %87, %83
  %207 = and i32 %30, %87
  %208 = and i32 %9, %21
  %209 = mul i32 %208, -20
  %210 = and i32 %58, %0
  %211 = and i32 %9, %0
  %212 = shl i32 %211, 3
  %213 = and i32 %40, %21
  %214 = shl i32 %213, 1
  %215 = mul i32 %65, -9
  %216 = and i32 %40, %0
  %217 = mul i32 %56, 12
  %218 = add i32 %196, %1
  %219 = add i32 %218, %99
  %220 = add i32 %219, %204
  %221 = add i32 %220, %206
  %222 = add i32 %221, %202
  %223 = add i32 %222, %184
  %224 = add i32 %223, %175
  %225 = add i32 %224, %174
  %226 = add i32 %225, %173
  %227 = add i32 %226, %165
  %228 = add i32 %227, %158
  %229 = add i32 %228, %135
  %230 = add i32 %229, %119
  %231 = add i32 %230, %94
  %232 = add i32 %231, %96
  %233 = add i32 %232, %18
  %234 = shl i32 %233, 1
  %235 = sub i32 %118, %57
  %236 = add i32 %235, %161
  %237 = add i32 %236, %115
  %238 = mul i32 %237, 5
  %239 = add i32 %216, %123
  %240 = shl i32 %239, 2
  %241 = add i32 %170, %0
  %242 = add i32 %241, %45
  %243 = sub i32 %242, %30
  %244 = sub i32 %243, %27
  %245 = add i32 %244, %43
  %246 = sub i32 %245, %62
  %247 = add i32 %246, %34
  %248 = sub i32 %247, %13
  %249 = sub i32 %248, %78
  %250 = add i32 %249, %40
  %251 = sub i32 %250, %84
  %252 = sub i32 %251, %46
  %253 = add i32 %252, %91
  %254 = add i32 %253, %24
  %255 = add i32 %254, %101
  %256 = add i32 %255, %110
  %257 = sub i32 %256, %114
  %258 = add i32 %257, %117
  %259 = sub i32 %258, %28
  %260 = add i32 %259, %130
  %261 = add i32 %260, %145
  %262 = sub i32 %261, %146
  %263 = sub i32 %262, %5
  %264 = sub i32 %263, %149
  %265 = add i32 %264, %154
  %266 = sub i32 %265, %155
  %267 = sub i32 %266, %159
  %268 = sub i32 %267, %179
  %269 = add i32 %268, %9
  %270 = add i32 %269, %190
  %271 = add i32 %270, %15
  %272 = sub i32 %271, %20
  %273 = sub i32 %272, %29
  %274 = sub i32 %273, %32
  %275 = add i32 %274, %35
  %276 = add i32 %275, %36
  %277 = add i32 %276, %37
  %278 = sub i32 %277, %38
  %279 = sub i32 %278, %39
  %280 = sub i32 %279, %41
  %281 = sub i32 %280, %49
  %282 = add i32 %281, %50
  %283 = add i32 %282, %53
  %284 = add i32 %283, %61
  %285 = add i32 %284, %64
  %286 = add i32 %285, %69
  %287 = add i32 %286, %70
  %288 = sub i32 %287, %79
  %289 = sub i32 %288, %80
  %290 = sub i32 %289, %82
  %291 = sub i32 %290, %88
  %292 = sub i32 %291, %89
  %293 = sub i32 %292, %90
  %294 = add i32 %293, %97
  %295 = sub i32 %294, %98
  %296 = sub i32 %295, %100
  %297 = sub i32 %296, %106
  %298 = add i32 %297, %107
  %299 = sub i32 %298, %109
  %300 = add i32 %299, %111
  %301 = sub i32 %300, %112
  %302 = sub i32 %301, %113
  %303 = sub i32 %302, %116
  %304 = add i32 %303, %120
  %305 = sub i32 %304, %122
  %306 = add i32 %305, %124
  %307 = sub i32 %306, %125
  %308 = add i32 %307, %126
  %309 = add i32 %308, %127
  %310 = sub i32 %309, %131
  %311 = sub i32 %310, %132
  %312 = add i32 %311, %136
  %313 = add i32 %312, %137
  %314 = add i32 %313, %138
  %315 = sub i32 %314, %59
  %316 = sub i32 %315, %139
  %317 = sub i32 %316, %142
  %318 = sub i32 %317, %144
  %319 = add i32 %318, %147
  %320 = add i32 %319, %148
  %321 = add i32 %320, %156
  %322 = sub i32 %321, %25
  %323 = sub i32 %322, %157
  %324 = add i32 %323, %160
  %325 = sub i32 %324, %162
  %326 = add i32 %325, %163
  %327 = add i32 %326, %166
  %328 = sub i32 %327, %168
  %329 = add i32 %328, %169
  %330 = add i32 %329, %176
  %331 = add i32 %330, %128
  %332 = sub i32 %331, %180
  %333 = sub i32 %332, %181
  %334 = add i32 %333, %182
  %335 = add i32 %334, %185
  %336 = sub i32 %335, %186
  %337 = add i32 %336, %187
  %338 = add i32 %337, %188
  %339 = sub i32 %338, %189
  %340 = add i32 %339, %191
  %341 = add i32 %340, %194
  %342 = add i32 %341, %195
  %343 = add i32 %342, %197
  %344 = sub i32 %343, %203
  %345 = sub i32 %344, %207
  %346 = add i32 %345, %210
  %347 = sub i32 %346, %26
  %348 = sub i32 %347, %48
  %349 = sub i32 %348, %52
  %350 = sub i32 %349, %55
  %351 = add i32 %350, %60
  %352 = add i32 %351, %68
  %353 = sub i32 %352, %77
  %354 = sub i32 %353, %86
  %355 = sub i32 %354, %93
  %356 = sub i32 %355, %95
  %357 = sub i32 %356, %105
  %358 = sub i32 %357, %129
  %359 = sub i32 %358, %134
  %360 = sub i32 %359, %141
  %361 = add i32 %360, %153
  %362 = sub i32 %361, %164
  %363 = add i32 %362, %172
  %364 = sub i32 %363, %178
  %365 = sub i32 %364, %183
  %366 = sub i32 %365, %193
  %367 = sub i32 %366, %199
  %368 = sub i32 %367, %201
  %369 = sub i32 %368, %205
  %370 = add i32 %369, %209
  %371 = sub i32 %370, %212
  %372 = sub i32 %371, %214
  %373 = add i32 %372, %215
  %374 = add i32 %373, %217
  %375 = add i32 %374, %103
  %376 = add i32 %375, %240
  %377 = sub i32 %376, %75
  %378 = add i32 %377, %238
  %379 = add i32 %378, %234
  %380 = icmp eq i32 %12, %379
  %381 = select i1 %380, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)
  %382 = tail call i32 @puts(i8* nonnull dereferenceable(1) %381)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #1 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %4) #5
  %5 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %5) #5
  %6 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %6) #5
  %7 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3)
  %8 = load i32, i32* %1, align 4, !tbaa !2
  %9 = load i32, i32* %2, align 4, !tbaa !2
  %10 = load i32, i32* %3, align 4, !tbaa !2
  call void @crackme(i32 %8, i32 %9, i32 %10)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %6) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %5) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %4) #5
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare dso_local i32 @__isoc99_scanf(i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #4

attributes #0 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Ubuntu clang version 10.0.1-++20200708122807+ef32c611aa2-1~exp1~20200707223407.61 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
