digraph "DFG for'crackme' function" {
	Node0x20924b0[shape=record, label="  %3 = xor i32 %1, %0"];
	Node0x2092520[shape=record, label="  %4 = sub i32 %0, %3"];
	Node0x2092bf0[shape=record, label="  %5 = xor i32 %1, -1"];
	Node0x2092c90[shape=record, label="  %6 = shl i32 %5, 1"];
	Node0x2092d00[shape=record, label="  %7 = shl i32 %1, 1"];
	Node0x2092d70[shape=record, label="  %8 = or i32 %5, %0"];
	Node0x2092de0[shape=record, label="  %9 = shl i32 %8, 1"];
	Node0x2092e50[shape=record, label="  %10 = or i32 %1, %0"];
	Node0x2092ec0[shape=record, label="  %11 = and i32 %5, %0"];
	Node0x2092f30[shape=record, label="  %12 = and i32 %1, %0"];
	Node0x2092fd0[shape=record, label="  %13 = mul i32 %12, 5"];
	Node0x2093040[shape=record, label="  %14 = sub i32 1, %0"];
	Node0x20930b0[shape=record, label="  %15 = add i32 %14, %3"];
	Node0x2093120[shape=record, label="  %16 = add i32 %15, %6"];
	Node0x2093190[shape=record, label="  %17 = sub i32 %16, %7"];
	Node0x2093200[shape=record, label="  %18 = add i32 %17, %10"];
	Node0x2093270[shape=record, label="  %19 = add i32 %18, %8"];
	Node0x20932e0[shape=record, label="  %20 = sub i32 %19, %11"];
	Node0x2093350[shape=record, label="  %21 = sub i32 %20, %9"];
	Node0x20933c0[shape=record, label="  %22 = add i32 %21, %13"];
	Node0x2093430[shape=record, label="  %23 = icmp eq i32 %4, %22"];
	Node0x2033268[shape=record, label="  %24 = select i1 %23, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0x20938d0[shape=record, label="  %25 = tail call i32 @puts(i8* nonnull dereferenceable(1) %24)"];
	Node0x2093920[shape=record, label="  ret void"];
	Node0x20924b0 -> Node0x2092520;
	Node0x2092520 -> Node0x2092bf0;
	Node0x2092bf0 -> Node0x2092c90;
	Node0x2092c90 -> Node0x2092d00;
	Node0x2092d00 -> Node0x2092d70;
	Node0x2092d70 -> Node0x2092de0;
	Node0x2092de0 -> Node0x2092e50;
	Node0x2092e50 -> Node0x2092ec0;
	Node0x2092ec0 -> Node0x2092f30;
	Node0x2092f30 -> Node0x2092fd0;
	Node0x2092fd0 -> Node0x2093040;
	Node0x2093040 -> Node0x20930b0;
	Node0x20930b0 -> Node0x2093120;
	Node0x2093120 -> Node0x2093190;
	Node0x2093190 -> Node0x2093200;
	Node0x2093200 -> Node0x2093270;
	Node0x2093270 -> Node0x20932e0;
	Node0x20932e0 -> Node0x2093350;
	Node0x2093350 -> Node0x20933c0;
	Node0x20933c0 -> Node0x2093430;
	Node0x2093430 -> Node0x2033268;
	Node0x2033268 -> Node0x20938d0;
	Node0x20938d0 -> Node0x2093920;
edge [color=red]
	Node0x20924b0 -> Node0x2092520;
	Node0x2092bf0 -> Node0x2092c90;
	Node0x2092bf0 -> Node0x2092d70;
	Node0x2092d70 -> Node0x2092de0;
	Node0x2092bf0 -> Node0x2092ec0;
	Node0x2092f30 -> Node0x2092fd0;
	Node0x2093040 -> Node0x20930b0;
	Node0x20924b0 -> Node0x20930b0;
	Node0x20930b0 -> Node0x2093120;
	Node0x2092c90 -> Node0x2093120;
	Node0x2093120 -> Node0x2093190;
	Node0x2092d00 -> Node0x2093190;
	Node0x2093190 -> Node0x2093200;
	Node0x2092e50 -> Node0x2093200;
	Node0x2093200 -> Node0x2093270;
	Node0x2092d70 -> Node0x2093270;
	Node0x2093270 -> Node0x20932e0;
	Node0x2092ec0 -> Node0x20932e0;
	Node0x20932e0 -> Node0x2093350;
	Node0x2092de0 -> Node0x2093350;
	Node0x2093350 -> Node0x20933c0;
	Node0x2092fd0 -> Node0x20933c0;
	Node0x2092520 -> Node0x2093430;
	Node0x20933c0 -> Node0x2093430;
	Node0x2093430 -> Node0x2033268;
	Node0x2033268 -> Node0x20938d0;
}
