digraph "DFG for'main' function" {
	Node0x1fd5a38[shape=record, label="  %1 = alloca i32, align 4"];
	Node0x1fd5ab8[shape=record, label="  %2 = alloca i32, align 4"];
	Node0x1fd5b48[shape=record, label="  %3 = bitcast i32* %1 to i8*"];
	Node0x1fd5fa8[shape=record, label="  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %3) #5"];
	Node0x1fd6088[shape=record, label="  %4 = bitcast i32* %2 to i8*"];
	Node0x1fd61a8[shape=record, label="  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %4) #5"];
	Node0x1fd63e0[shape=record, label="  %5 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2)"];
	Node0x1fd6498[shape=record, label="  %6 = load i32, i32* %1, align 4, !tbaa !2"];
	Node0x1fd7408[shape=record, label="  %7 = load i32, i32* %2, align 4, !tbaa !2"];
	Node0x1fd7a90[shape=record, label="  %8 = xor i32 %7, -1"];
	Node0x1fd7b00[shape=record, label="  %9 = or i32 %6, %8"];
	Node0x1fd7b70[shape=record, label="  %10 = and i32 %7, %6"];
	Node0x1fd7be0[shape=record, label="  %11 = xor i32 %10, -1"];
	Node0x1fd7c50[shape=record, label="  %12 = xor i32 %6, -1"];
	Node0x1fd7cc0[shape=record, label="  %13 = or i32 %7, %12"];
	Node0x1fd7d30[shape=record, label="  %14 = or i32 %7, %6"];
	Node0x1fd7da0[shape=record, label="  %15 = xor i32 %14, -1"];
	Node0x1fd7e10[shape=record, label="  %16 = mul i32 %15, 3"];
	Node0x1fd7e80[shape=record, label="  %17 = shl i32 %9, 1"];
	Node0x1fd7ef0[shape=record, label="  %18 = xor i32 %17, -2"];
	Node0x1fd7f60[shape=record, label="  %19 = mul i32 %6, 5"];
	Node0x1fd7fd0[shape=record, label="  %20 = sub i32 4, %6"];
	Node0x1fd8040[shape=record, label="  %21 = add i32 %20, %19"];
	Node0x1fd80b0[shape=record, label="  %22 = add i32 %21, %11"];
	Node0x1fd8120[shape=record, label="  %23 = add i32 %22, %13"];
	Node0x1fd8190[shape=record, label="  %24 = add i32 %23, %16"];
	Node0x1fd8200[shape=record, label="  %25 = add i32 %24, %18"];
	Node0x1fd8270[shape=record, label="  %26 = icmp eq i32 %9, %25"];
	Node0x1f769d8[shape=record, label="  %27 = select i1 %26, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0x1fd8300[shape=record, label="  %28 = call i32 @puts(i8* nonnull dereferenceable(1) %27) #5"];
	Node0x1fd8558[shape=record, label="  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %4) #5"];
	Node0x1fd86b8[shape=record, label="  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %3) #5"];
	Node0x1fd8778[shape=record, label="  ret i32 0"];
	Node0x1fd5a38 -> Node0x1fd5ab8;
	Node0x1fd5ab8 -> Node0x1fd5b48;
	Node0x1fd5b48 -> Node0x1fd5fa8;
	Node0x1fd5fa8 -> Node0x1fd6088;
	Node0x1fd6088 -> Node0x1fd61a8;
	Node0x1fd61a8 -> Node0x1fd63e0;
	Node0x1fd63e0 -> Node0x1fd6498;
	Node0x1fd6498 -> Node0x1fd7408;
	Node0x1fd7408 -> Node0x1fd7a90;
	Node0x1fd7a90 -> Node0x1fd7b00;
	Node0x1fd7b00 -> Node0x1fd7b70;
	Node0x1fd7b70 -> Node0x1fd7be0;
	Node0x1fd7be0 -> Node0x1fd7c50;
	Node0x1fd7c50 -> Node0x1fd7cc0;
	Node0x1fd7cc0 -> Node0x1fd7d30;
	Node0x1fd7d30 -> Node0x1fd7da0;
	Node0x1fd7da0 -> Node0x1fd7e10;
	Node0x1fd7e10 -> Node0x1fd7e80;
	Node0x1fd7e80 -> Node0x1fd7ef0;
	Node0x1fd7ef0 -> Node0x1fd7f60;
	Node0x1fd7f60 -> Node0x1fd7fd0;
	Node0x1fd7fd0 -> Node0x1fd8040;
	Node0x1fd8040 -> Node0x1fd80b0;
	Node0x1fd80b0 -> Node0x1fd8120;
	Node0x1fd8120 -> Node0x1fd8190;
	Node0x1fd8190 -> Node0x1fd8200;
	Node0x1fd8200 -> Node0x1fd8270;
	Node0x1fd8270 -> Node0x1f769d8;
	Node0x1f769d8 -> Node0x1fd8300;
	Node0x1fd8300 -> Node0x1fd8558;
	Node0x1fd8558 -> Node0x1fd86b8;
	Node0x1fd86b8 -> Node0x1fd8778;
edge [color=red]
	Node0x1fd5a38 -> Node0x1fd5b48;
	Node0x1fd5b48 -> Node0x1fd5fa8;
	Node0x1fd5ab8 -> Node0x1fd6088;
	Node0x1fd6088 -> Node0x1fd61a8;
	Node0x1fd5a38 -> Node0x1fd63e0;
	Node0x1fd5ab8 -> Node0x1fd63e0;
	Node0x1fd5a38 -> Node0x1fd6498;
	Node0x1fd5ab8 -> Node0x1fd7408;
	Node0x1fd7408 -> Node0x1fd7a90;
	Node0x1fd6498 -> Node0x1fd7b00;
	Node0x1fd7a90 -> Node0x1fd7b00;
	Node0x1fd7408 -> Node0x1fd7b70;
	Node0x1fd6498 -> Node0x1fd7b70;
	Node0x1fd7b70 -> Node0x1fd7be0;
	Node0x1fd6498 -> Node0x1fd7c50;
	Node0x1fd7408 -> Node0x1fd7cc0;
	Node0x1fd7c50 -> Node0x1fd7cc0;
	Node0x1fd7408 -> Node0x1fd7d30;
	Node0x1fd6498 -> Node0x1fd7d30;
	Node0x1fd7d30 -> Node0x1fd7da0;
	Node0x1fd7da0 -> Node0x1fd7e10;
	Node0x1fd7b00 -> Node0x1fd7e80;
	Node0x1fd7e80 -> Node0x1fd7ef0;
	Node0x1fd6498 -> Node0x1fd7f60;
	Node0x1fd6498 -> Node0x1fd7fd0;
	Node0x1fd7fd0 -> Node0x1fd8040;
	Node0x1fd7f60 -> Node0x1fd8040;
	Node0x1fd8040 -> Node0x1fd80b0;
	Node0x1fd7be0 -> Node0x1fd80b0;
	Node0x1fd80b0 -> Node0x1fd8120;
	Node0x1fd7cc0 -> Node0x1fd8120;
	Node0x1fd8120 -> Node0x1fd8190;
	Node0x1fd7e10 -> Node0x1fd8190;
	Node0x1fd8190 -> Node0x1fd8200;
	Node0x1fd7ef0 -> Node0x1fd8200;
	Node0x1fd7b00 -> Node0x1fd8270;
	Node0x1fd8200 -> Node0x1fd8270;
	Node0x1fd8270 -> Node0x1f769d8;
	Node0x1f769d8 -> Node0x1fd8300;
	Node0x1fd6088 -> Node0x1fd8558;
	Node0x1fd5b48 -> Node0x1fd86b8;
}
