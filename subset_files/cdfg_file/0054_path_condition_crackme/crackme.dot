digraph "DFG for'crackme' function" {
	Node0x1fd4a90[shape=record, label="  %3 = xor i32 %1, -1"];
	Node0x1fd4b00[shape=record, label="  %4 = or i32 %3, %0"];
	Node0x1fd4bc0[shape=record, label="  %5 = and i32 %1, %0"];
	Node0x1fd4c30[shape=record, label="  %6 = xor i32 %5, -1"];
	Node0x1fd4ca0[shape=record, label="  %7 = xor i32 %0, -1"];
	Node0x1fd4d10[shape=record, label="  %8 = or i32 %7, %1"];
	Node0x1fd4d80[shape=record, label="  %9 = or i32 %1, %0"];
	Node0x1fd4df0[shape=record, label="  %10 = xor i32 %9, -1"];
	Node0x1fd4e60[shape=record, label="  %11 = mul i32 %10, 3"];
	Node0x1fd4f00[shape=record, label="  %12 = shl i32 %4, 1"];
	Node0x1fd4fa0[shape=record, label="  %13 = xor i32 %12, -2"];
	Node0x1fd5040[shape=record, label="  %14 = mul i32 %0, 5"];
	Node0x1fd50e0[shape=record, label="  %15 = sub i32 4, %0"];
	Node0x1fd5150[shape=record, label="  %16 = add i32 %15, %6"];
	Node0x1fd51c0[shape=record, label="  %17 = add i32 %16, %8"];
	Node0x1fd5230[shape=record, label="  %18 = add i32 %17, %11"];
	Node0x1fd52a0[shape=record, label="  %19 = add i32 %18, %13"];
	Node0x1fd5310[shape=record, label="  %20 = add i32 %19, %14"];
	Node0x1fd5380[shape=record, label="  %21 = icmp eq i32 %4, %20"];
	Node0x1f75268[shape=record, label="  %22 = select i1 %21, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0x1fd5820[shape=record, label="  %23 = tail call i32 @puts(i8* nonnull dereferenceable(1) %22)"];
	Node0x1fd5870[shape=record, label="  ret void"];
	Node0x1fd4a90 -> Node0x1fd4b00;
	Node0x1fd4b00 -> Node0x1fd4bc0;
	Node0x1fd4bc0 -> Node0x1fd4c30;
	Node0x1fd4c30 -> Node0x1fd4ca0;
	Node0x1fd4ca0 -> Node0x1fd4d10;
	Node0x1fd4d10 -> Node0x1fd4d80;
	Node0x1fd4d80 -> Node0x1fd4df0;
	Node0x1fd4df0 -> Node0x1fd4e60;
	Node0x1fd4e60 -> Node0x1fd4f00;
	Node0x1fd4f00 -> Node0x1fd4fa0;
	Node0x1fd4fa0 -> Node0x1fd5040;
	Node0x1fd5040 -> Node0x1fd50e0;
	Node0x1fd50e0 -> Node0x1fd5150;
	Node0x1fd5150 -> Node0x1fd51c0;
	Node0x1fd51c0 -> Node0x1fd5230;
	Node0x1fd5230 -> Node0x1fd52a0;
	Node0x1fd52a0 -> Node0x1fd5310;
	Node0x1fd5310 -> Node0x1fd5380;
	Node0x1fd5380 -> Node0x1f75268;
	Node0x1f75268 -> Node0x1fd5820;
	Node0x1fd5820 -> Node0x1fd5870;
edge [color=red]
	Node0x1fd4a90 -> Node0x1fd4b00;
	Node0x1fd4bc0 -> Node0x1fd4c30;
	Node0x1fd4ca0 -> Node0x1fd4d10;
	Node0x1fd4d80 -> Node0x1fd4df0;
	Node0x1fd4df0 -> Node0x1fd4e60;
	Node0x1fd4b00 -> Node0x1fd4f00;
	Node0x1fd4f00 -> Node0x1fd4fa0;
	Node0x1fd50e0 -> Node0x1fd5150;
	Node0x1fd4c30 -> Node0x1fd5150;
	Node0x1fd5150 -> Node0x1fd51c0;
	Node0x1fd4d10 -> Node0x1fd51c0;
	Node0x1fd51c0 -> Node0x1fd5230;
	Node0x1fd4e60 -> Node0x1fd5230;
	Node0x1fd5230 -> Node0x1fd52a0;
	Node0x1fd4fa0 -> Node0x1fd52a0;
	Node0x1fd52a0 -> Node0x1fd5310;
	Node0x1fd5040 -> Node0x1fd5310;
	Node0x1fd4b00 -> Node0x1fd5380;
	Node0x1fd5310 -> Node0x1fd5380;
	Node0x1fd5380 -> Node0x1f75268;
	Node0x1f75268 -> Node0x1fd5820;
}
