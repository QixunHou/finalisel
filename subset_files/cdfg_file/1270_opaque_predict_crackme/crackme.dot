digraph "DFG for'crackme' function" {
	Node0xd76b60[shape=record, label="  %3 = sub i32 0, %1"];
	Node0xd76c00[shape=record, label="  %4 = xor i32 %1, -1"];
	Node0xd76cc0[shape=record, label="  %5 = and i32 %1, %0"];
	Node0xd76d30[shape=record, label="  %6 = shl i32 %5, 1"];
	Node0xd76dd0[shape=record, label="  %7 = xor i32 %6, -2"];
	Node0xd76e70[shape=record, label="  %8 = shl i32 %0, 2"];
	Node0xd76ee0[shape=record, label="  %9 = xor i32 %1, %0"];
	Node0xd76f50[shape=record, label="  %10 = and i32 %4, %0"];
	Node0xd76fc0[shape=record, label="  %11 = shl i32 %4, 1"];
	Node0xd77030[shape=record, label="  %12 = or i32 %1, %0"];
	Node0xd770a0[shape=record, label="  %13 = xor i32 %12, -1"];
	Node0xd77140[shape=record, label="  %14 = mul i32 %13, 3"];
	Node0xd771b0[shape=record, label="  %15 = shl i32 %10, 1"];
	Node0xd77250[shape=record, label="  %16 = mul i32 %5, -7"];
	Node0xd772c0[shape=record, label="  %17 = xor i32 %9, -1"];
	Node0xd77330[shape=record, label="  %18 = add i32 %8, %17"];
	Node0xd773a0[shape=record, label="  %19 = add i32 %18, %10"];
	Node0xd77410[shape=record, label="  %20 = sub i32 %19, %11"];
	Node0xd77480[shape=record, label="  %21 = add i32 %20, %12"];
	Node0xd774f0[shape=record, label="  %22 = add i32 %21, %14"];
	Node0xd77560[shape=record, label="  %23 = sub i32 %22, %15"];
	Node0xd775d0[shape=record, label="  %24 = add i32 %23, %16"];
	Node0xd77640[shape=record, label="  %25 = sub i32 %24, %7"];
	Node0xd776b0[shape=record, label="  %26 = icmp eq i32 %25, %3"];
	Node0xd17268[shape=record, label="  %27 = select i1 %26, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0xd77b50[shape=record, label="  %28 = tail call i32 @puts(i8* nonnull dereferenceable(1) %27)"];
	Node0xd77ba0[shape=record, label="  ret void"];
	Node0xd76b60 -> Node0xd76c00;
	Node0xd76c00 -> Node0xd76cc0;
	Node0xd76cc0 -> Node0xd76d30;
	Node0xd76d30 -> Node0xd76dd0;
	Node0xd76dd0 -> Node0xd76e70;
	Node0xd76e70 -> Node0xd76ee0;
	Node0xd76ee0 -> Node0xd76f50;
	Node0xd76f50 -> Node0xd76fc0;
	Node0xd76fc0 -> Node0xd77030;
	Node0xd77030 -> Node0xd770a0;
	Node0xd770a0 -> Node0xd77140;
	Node0xd77140 -> Node0xd771b0;
	Node0xd771b0 -> Node0xd77250;
	Node0xd77250 -> Node0xd772c0;
	Node0xd772c0 -> Node0xd77330;
	Node0xd77330 -> Node0xd773a0;
	Node0xd773a0 -> Node0xd77410;
	Node0xd77410 -> Node0xd77480;
	Node0xd77480 -> Node0xd774f0;
	Node0xd774f0 -> Node0xd77560;
	Node0xd77560 -> Node0xd775d0;
	Node0xd775d0 -> Node0xd77640;
	Node0xd77640 -> Node0xd776b0;
	Node0xd776b0 -> Node0xd17268;
	Node0xd17268 -> Node0xd77b50;
	Node0xd77b50 -> Node0xd77ba0;
edge [color=red]
	Node0xd76cc0 -> Node0xd76d30;
	Node0xd76d30 -> Node0xd76dd0;
	Node0xd76c00 -> Node0xd76f50;
	Node0xd76c00 -> Node0xd76fc0;
	Node0xd77030 -> Node0xd770a0;
	Node0xd770a0 -> Node0xd77140;
	Node0xd76f50 -> Node0xd771b0;
	Node0xd76cc0 -> Node0xd77250;
	Node0xd76ee0 -> Node0xd772c0;
	Node0xd76e70 -> Node0xd77330;
	Node0xd772c0 -> Node0xd77330;
	Node0xd77330 -> Node0xd773a0;
	Node0xd76f50 -> Node0xd773a0;
	Node0xd773a0 -> Node0xd77410;
	Node0xd76fc0 -> Node0xd77410;
	Node0xd77410 -> Node0xd77480;
	Node0xd77030 -> Node0xd77480;
	Node0xd77480 -> Node0xd774f0;
	Node0xd77140 -> Node0xd774f0;
	Node0xd774f0 -> Node0xd77560;
	Node0xd771b0 -> Node0xd77560;
	Node0xd77560 -> Node0xd775d0;
	Node0xd77250 -> Node0xd775d0;
	Node0xd775d0 -> Node0xd77640;
	Node0xd76dd0 -> Node0xd77640;
	Node0xd77640 -> Node0xd776b0;
	Node0xd76b60 -> Node0xd776b0;
	Node0xd776b0 -> Node0xd17268;
	Node0xd17268 -> Node0xd77b50;
}
