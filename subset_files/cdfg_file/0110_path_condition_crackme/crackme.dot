digraph "DFG for'crackme' function" {
	Node0xa84880[shape=record, label="  %3 = sub i32 0, %0"];
	Node0xa84920[shape=record, label="  %4 = xor i32 %1, -1"];
	Node0xa849e0[shape=record, label="  %5 = and i32 %4, %0"];
	Node0xa84a50[shape=record, label="  %6 = xor i32 %0, -1"];
	Node0xa84ac0[shape=record, label="  %7 = and i32 %6, %1"];
	Node0xa84b30[shape=record, label="  %8 = add i32 %5, %1"];
	Node0xa84ba0[shape=record, label="  %9 = sub i32 %7, %8"];
	Node0xa84c10[shape=record, label="  %10 = icmp eq i32 %9, %3"];
	Node0xa25388[shape=record, label="  %11 = select i1 %10, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0xa85080[shape=record, label="  %12 = tail call i32 @puts(i8* nonnull dereferenceable(1) %11)"];
	Node0xa850d0[shape=record, label="  ret void"];
	Node0xa84880 -> Node0xa84920;
	Node0xa84920 -> Node0xa849e0;
	Node0xa849e0 -> Node0xa84a50;
	Node0xa84a50 -> Node0xa84ac0;
	Node0xa84ac0 -> Node0xa84b30;
	Node0xa84b30 -> Node0xa84ba0;
	Node0xa84ba0 -> Node0xa84c10;
	Node0xa84c10 -> Node0xa25388;
	Node0xa25388 -> Node0xa85080;
	Node0xa85080 -> Node0xa850d0;
edge [color=red]
	Node0xa84920 -> Node0xa849e0;
	Node0xa84a50 -> Node0xa84ac0;
	Node0xa849e0 -> Node0xa84b30;
	Node0xa84ac0 -> Node0xa84ba0;
	Node0xa84b30 -> Node0xa84ba0;
	Node0xa84ba0 -> Node0xa84c10;
	Node0xa84880 -> Node0xa84c10;
	Node0xa84c10 -> Node0xa25388;
	Node0xa25388 -> Node0xa85080;
}
