; ModuleID = '../.././c_source_file/1243_opaque_predict_crackme.c'
source_filename = "../.././c_source_file/1243_opaque_predict_crackme.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str.2 = private unnamed_addr constant [18 x i8] c"%d %d %d %d %d %d\00", align 1
@str = private unnamed_addr constant [4 x i8] c"bad\00", align 1
@str.3 = private unnamed_addr constant [5 x i8] c"good\00", align 1

; Function Attrs: nofree nounwind uwtable
define dso_local void @crackme(i32 %0, i32 %1, i32 %2, i32 %3, i32 %4, i32 %5) local_unnamed_addr #0 {
  %7 = and i32 %2, %1
  %8 = and i32 %7, %0
  %9 = xor i32 %2, %1
  %10 = xor i32 %9, %0
  %11 = xor i32 %10, -1
  %12 = or i32 %8, %11
  %13 = or i32 %2, %1
  %14 = add i32 %12, %13
  %15 = xor i32 %3, -1
  %16 = or i32 %5, %4
  %17 = xor i32 %16, -1
  %18 = or i32 %17, %15
  %19 = sub i32 %14, %18
  %20 = xor i32 %1, %0
  %21 = xor i32 %20, -1
  %22 = and i32 %21, %2
  %23 = xor i32 %1, -1
  %24 = or i32 %23, %0
  %25 = xor i32 %24, -1
  %26 = xor i32 %9, -1
  %27 = and i32 %24, %26
  %28 = xor i32 %0, -1
  %29 = and i32 %9, %28
  %30 = xor i32 %8, -1
  %31 = xor i32 %29, %30
  %32 = or i32 %1, %0
  %33 = xor i32 %32, -1
  %34 = add i32 %32, 1
  %35 = xor i32 %2, %0
  %36 = and i32 %35, %21
  %37 = shl i32 %36, 1
  %38 = xor i32 %2, -1
  %39 = or i32 %38, %0
  %40 = xor i32 %39, -1
  %41 = or i32 %40, %23
  %42 = xor i32 %26, %0
  %43 = and i32 %23, %0
  %44 = xor i32 %43, -1
  %45 = and i32 %44, %2
  %46 = shl i32 %45, 2
  %47 = or i32 %26, %0
  %48 = xor i32 %35, -1
  %49 = add i32 %35, 1
  %50 = and i32 %38, %0
  %51 = xor i32 %7, -1
  %52 = xor i32 %50, %51
  %53 = or i32 %38, %1
  %54 = and i32 %53, %0
  %55 = and i32 %1, %0
  %56 = xor i32 %55, -1
  %57 = and i32 %56, %2
  %58 = or i32 %25, %2
  %59 = xor i32 %13, -1
  %60 = or i32 %55, %59
  %61 = or i32 %50, %21
  %62 = and i32 %38, %1
  %63 = xor i32 %62, -1
  %64 = and i32 %63, %0
  %65 = or i32 %2, %0
  %66 = xor i32 %65, -1
  %67 = or i32 %55, %66
  %68 = or i32 %7, %43
  %69 = and i32 %2, %0
  %70 = or i32 %48, %33
  %71 = xor i32 %63, %0
  %72 = xor i32 %43, %51
  %73 = xor i32 %50, -1
  %74 = and i32 %73, %1
  %75 = and i32 %9, %0
  %76 = and i32 %13, %28
  %77 = or i32 %8, %76
  %78 = and i32 %51, %0
  %79 = or i32 %50, %7
  %80 = or i32 %38, %21
  %81 = or i32 %20, %2
  %82 = and i32 %23, %2
  %83 = and i32 %82, %28
  %84 = or i32 %9, %28
  %85 = xor i32 %83, %84
  %86 = or i32 %69, %33
  %87 = and i32 %38, %44
  %88 = xor i32 %69, -1
  %89 = and i32 %88, %21
  %90 = or i32 %51, %0
  %91 = or i32 %59, %0
  %92 = or i32 %35, %20
  %93 = or i32 %20, %38
  %94 = xor i32 %65, %55
  %95 = xor i32 %69, %63
  %96 = and i32 %82, %0
  %97 = or i32 %9, %0
  %98 = xor i32 %96, %97
  %99 = and i32 %53, %28
  %100 = or i32 %33, %2
  %101 = and i32 %26, %56
  %102 = or i32 %69, %25
  %103 = or i32 %69, %23
  %104 = xor i32 %43, %63
  %105 = or i32 %9, %55
  %106 = and i32 %39, %23
  %107 = add i32 %69, 1
  %108 = xor i32 %53, -1
  %109 = xor i32 %108, %0
  %110 = or i32 %13, %0
  %111 = xor i32 %50, %1
  %112 = or i32 %55, %2
  %113 = and i32 %32, %26
  %114 = and i32 %9, %44
  %115 = or i32 %23, %2
  %116 = and i32 %115, %28
  %117 = or i32 %96, %116
  %118 = shl i32 %117, 1
  %119 = or i32 %55, %40
  %120 = xor i32 %25, %2
  %121 = xor i32 %65, %1
  %122 = xor i32 %13, %0
  %123 = xor i32 %122, %30
  %124 = and i32 %9, %56
  %125 = shl i32 %124, 1
  %126 = xor i32 %39, %55
  %127 = and i32 %39, %21
  %128 = or i32 %96, %10
  %129 = and i32 %24, %48
  %130 = or i32 %9, %33
  %131 = or i32 %8, %122
  %132 = xor i32 %96, -1
  %133 = xor i32 %116, %132
  %134 = xor i32 %40, %1
  %135 = xor i32 %33, %2
  %136 = or i32 %66, %21
  %137 = or i32 %7, %28
  %138 = and i32 %65, %23
  %139 = and i32 %115, %0
  %140 = xor i32 %139, -1
  %141 = xor i32 %83, %140
  %142 = shl i32 %76, 1
  %143 = or i32 %62, %43
  %144 = or i32 %53, %28
  %145 = or i32 %48, %23
  %146 = or i32 %26, %28
  %147 = and i32 %20, %73
  %148 = shl i32 %147, 1
  %149 = and i32 %13, %0
  %150 = xor i32 %43, %2
  %151 = and i32 %20, %38
  %152 = shl i32 %151, 1
  %153 = or i32 %8, %29
  %154 = shl i32 %153, 1
  %155 = or i32 %48, %1
  %156 = or i32 %66, %1
  %157 = shl i32 %156, 1
  %158 = and i32 %26, %44
  %159 = xor i32 %39, %1
  %160 = or i32 %35, %1
  %161 = xor i32 %53, %55
  %162 = or i32 %48, %21
  %163 = xor i32 %115, %28
  %164 = xor i32 %163, %96
  %165 = xor i32 %66, %1
  %166 = or i32 %50, %108
  %167 = or i32 %26, %25
  %168 = xor i32 %69, %32
  %169 = and i32 %73, %23
  %170 = and i32 %35, %32
  %171 = add i32 %20, 1
  %172 = xor i32 %44, %2
  %173 = or i32 %35, %43
  %174 = or i32 %43, %26
  %175 = and i32 %38, %56
  %176 = xor i32 %59, %0
  %177 = shl i32 %176, 1
  %178 = or i32 %69, %59
  %179 = and i32 %73, %21
  %180 = or i32 %55, %26
  %181 = or i32 %20, %66
  %182 = xor i32 %88, %1
  %183 = shl i32 %182, 1
  %184 = xor i32 %96, %11
  %185 = or i32 %43, %2
  %186 = or i32 %69, %62
  %187 = xor i32 %24, %2
  %188 = or i32 %20, %48
  %189 = or i32 %50, %20
  %190 = or i32 %63, %28
  %191 = xor i32 %69, %24
  %192 = or i32 %9, %25
  %193 = and i32 %9, %32
  %194 = shl i32 %193, 1
  %195 = xor i32 %32, %2
  %196 = xor i32 %73, %1
  %197 = or i32 %40, %21
  %198 = and i32 %32, %2
  %199 = and i32 %59, %28
  %200 = shl i32 %199, 3
  %201 = and i32 %62, %28
  %202 = mul i32 %201, 12
  %203 = and i32 %59, %0
  %204 = mul i32 %203, -15
  %205 = and i32 %62, %0
  %206 = and i32 %108, %28
  %207 = mul i32 %206, 9
  %208 = and i32 %7, %28
  %209 = shl i32 %208, 3
  %210 = and i32 %108, %0
  %211 = shl i32 %210, 4
  %212 = mul i32 %8, 13
  %213 = xor i32 %5, -1
  %214 = or i32 %213, %4
  %215 = shl i32 %214, 1
  %216 = and i32 %4, %3
  %217 = xor i32 %216, -1
  %218 = and i32 %213, %217
  %219 = and i32 %213, %4
  %220 = xor i32 %4, %3
  %221 = xor i32 %220, -1
  %222 = or i32 %219, %221
  %223 = shl i32 %222, 1
  %224 = or i32 %5, %3
  %225 = xor i32 %224, -1
  %226 = or i32 %216, %225
  %227 = and i32 %214, %3
  %228 = or i32 %219, %15
  %229 = or i32 %213, %3
  %230 = xor i32 %229, -1
  %231 = xor i32 %230, %4
  %232 = shl i32 %231, 1
  %233 = and i32 %5, %4
  %234 = and i32 %213, %3
  %235 = xor i32 %234, -1
  %236 = xor i32 %233, %235
  %237 = and i32 %15, %4
  %238 = or i32 %237, %5
  %239 = xor i32 %214, -1
  %240 = add i32 %214, 1
  %241 = xor i32 %5, %4
  %242 = xor i32 %241, -1
  %243 = or i32 %220, %242
  %244 = xor i32 %216, %5
  %245 = xor i32 %4, -1
  %246 = and i32 %5, %3
  %247 = xor i32 %246, -1
  %248 = or i32 %247, %245
  %249 = or i32 %15, %4
  %250 = xor i32 %219, -1
  %251 = and i32 %220, %250
  %252 = and i32 %250, %3
  %253 = or i32 %230, %245
  %254 = or i32 %4, %3
  %255 = xor i32 %254, %5
  %256 = xor i32 %254, -1
  %257 = xor i32 %5, %3
  %258 = xor i32 %257, -1
  %259 = or i32 %258, %256
  %260 = shl i32 %259, 1
  %261 = or i32 %246, %245
  %262 = xor i32 %249, -1
  %263 = or i32 %262, %5
  %264 = xor i32 %214, %216
  %265 = add i32 %241, 1
  %266 = shl i32 %246, 1
  %267 = or i32 %242, %3
  %268 = xor i32 %16, %3
  %269 = shl i32 %268, 1
  %270 = xor i32 %217, %5
  %271 = or i32 %220, %213
  %272 = and i32 %229, %4
  %273 = or i32 %257, %256
  %274 = or i32 %224, %4
  %275 = shl i32 %274, 1
  %276 = xor i32 %229, %4
  %277 = or i32 %219, %246
  %278 = or i32 %257, %4
  %279 = and i32 %246, %245
  %280 = and i32 %257, %4
  %281 = or i32 %279, %280
  %282 = and i32 %220, %5
  %283 = xor i32 %246, %4
  %284 = and i32 %258, %4
  %285 = shl i32 %284, 1
  %286 = and i32 %257, %249
  %287 = or i32 %234, %245
  %288 = and i32 %224, %245
  %289 = or i32 %256, %5
  %290 = or i32 %239, %221
  %291 = or i32 %233, %256
  %292 = and i32 %257, %254
  %293 = and i32 %235, %245
  %294 = or i32 %225, %245
  %295 = and i32 %257, %217
  %296 = or i32 %237, %213
  %297 = xor i32 %247, %4
  %298 = and i32 %16, %15
  %299 = xor i32 %233, %254
  %300 = or i32 %213, %262
  %301 = xor i32 %224, %216
  %302 = shl i32 %301, 1
  %303 = or i32 %219, %3
  %304 = or i32 %241, %221
  %305 = or i32 %257, %216
  %306 = xor i32 %233, -1
  %307 = and i32 %306, %15
  %308 = and i32 %249, %258
  %309 = or i32 %216, %239
  %310 = and i32 %214, %220
  %311 = or i32 %213, %221
  %312 = shl i32 %311, 1
  %313 = or i32 %233, %220
  %314 = and i32 %242, %217
  %315 = and i32 %15, %5
  %316 = and i32 %315, %4
  %317 = or i32 %15, %5
  %318 = and i32 %317, %245
  %319 = xor i32 %316, -1
  %320 = xor i32 %318, %319
  %321 = or i32 %221, %5
  %322 = and i32 %241, %15
  %323 = or i32 %242, %15
  %324 = xor i32 %262, %5
  %325 = or i32 %239, %15
  %326 = or i32 %242, %262
  %327 = or i32 %241, %262
  %328 = and i32 %214, %221
  %329 = xor i32 %237, -1
  %330 = xor i32 %329, %5
  %331 = or i32 %241, %15
  %332 = or i32 %230, %4
  %333 = or i32 %258, %262
  %334 = or i32 %219, %220
  %335 = or i32 %220, %239
  %336 = or i32 %235, %245
  %337 = shl i32 %336, 1
  %338 = or i32 %216, %242
  %339 = or i32 %241, %3
  %340 = and i32 %246, %4
  %341 = xor i32 %224, %4
  %342 = xor i32 %341, -1
  %343 = xor i32 %340, %342
  %344 = and i32 %315, %245
  %345 = and i32 %317, %4
  %346 = or i32 %344, %345
  %347 = xor i32 %233, %224
  %348 = add i32 %257, 1
  %349 = or i32 %246, %4
  %350 = or i32 %233, %221
  %351 = or i32 %213, %256
  %352 = and i32 %254, %5
  %353 = shl i32 %247, 1
  %354 = xor i32 %233, %3
  %355 = xor i32 %316, %278
  %356 = or i32 %246, %237
  %357 = and i32 %247, %245
  %358 = and i32 %241, %220
  %359 = xor i32 %16, %216
  %360 = or i32 %258, %245
  %361 = or i32 %316, %318
  %362 = and i32 %242, %15
  %363 = xor i32 %280, -1
  %364 = xor i32 %279, %363
  %365 = or i32 %257, %245
  %366 = shl i32 %365, 1
  %367 = xor i32 %214, %3
  %368 = add i32 %16, 1
  %369 = and i32 %220, %306
  %370 = xor i32 %257, %4
  %371 = xor i32 %340, %370
  %372 = xor i32 %237, %5
  %373 = xor i32 %345, -1
  %374 = xor i32 %344, %373
  %375 = xor i32 %250, %3
  %376 = and i32 %241, %249
  %377 = or i32 %340, %341
  %378 = and i32 %258, %329
  %379 = and i32 %213, %221
  %380 = shl i32 %379, 1
  %381 = or i32 %220, %5
  %382 = xor i32 %219, %247
  %383 = xor i32 %235, %4
  %384 = xor i32 %317, %245
  %385 = xor i32 %384, %316
  %386 = and i32 %242, %3
  %387 = or i32 %233, %234
  %388 = xor i32 %219, %229
  %389 = xor i32 %237, %247
  %390 = or i32 %17, %3
  %391 = or i32 %233, %225
  %392 = and i32 %258, %217
  %393 = or i32 %241, %237
  %394 = and i32 %306, %3
  %395 = and i32 %241, %329
  %396 = shl i32 %395, 1
  %397 = or i32 %220, %17
  %398 = xor i32 %256, %5
  %399 = and i32 %257, %329
  %400 = or i32 %316, %370
  %401 = or i32 %239, %3
  %402 = or i32 %225, %4
  %403 = and i32 %254, %242
  %404 = xor i32 %306, %3
  %405 = shl i32 %370, 1
  %406 = and i32 %250, %221
  %407 = and i32 %16, %221
  %408 = or i32 %241, %256
  %409 = xor i32 %278, -1
  %410 = or i32 %316, %409
  %411 = or i32 %340, %288
  %412 = or i32 %219, %230
  %413 = xor i32 %229, %216
  %414 = or i32 %257, %262
  %415 = shl i32 %414, 1
  %416 = and i32 %242, %329
  %417 = and i32 %254, %213
  %418 = shl i32 %417, 2
  %419 = and i32 %250, %15
  %420 = and i32 %16, %3
  %421 = xor i32 %17, %3
  %422 = or i32 %229, %4
  %423 = or i32 %234, %237
  %424 = xor i32 %365, -1
  %425 = or i32 %344, %424
  %426 = and i32 %221, %5
  %427 = or i32 %17, %221
  %428 = or i32 %257, %237
  %429 = and i32 %249, %242
  %430 = xor i32 %233, %249
  %431 = xor i32 %344, %365
  %432 = xor i32 %234, %4
  %433 = and i32 %225, %245
  %434 = mul i32 %433, -18
  %435 = and i32 %234, %245
  %436 = shl i32 %435, 2
  %437 = and i32 %225, %4
  %438 = shl i32 %437, 3
  %439 = and i32 %234, %4
  %440 = and i32 %230, %245
  %441 = mul i32 %440, -6
  %442 = mul i32 %279, -22
  %443 = and i32 %230, %4
  %444 = mul i32 %443, -7
  %445 = add i32 %62, %51
  %446 = add i32 %445, %100
  %447 = add i32 %446, %69
  %448 = add i32 %447, %192
  %449 = add i32 %448, %167
  %450 = add i32 %449, %158
  %451 = add i32 %450, %149
  %452 = add i32 %451, %110
  %453 = add i32 %452, %103
  %454 = add i32 %453, %79
  %455 = add i32 %454, %71
  %456 = add i32 %455, %41
  %457 = add i32 %456, %381
  %458 = add i32 %457, %352
  %459 = add i32 %458, %289
  %460 = add i32 %459, %250
  %461 = add i32 %460, %430
  %462 = add i32 %461, %421
  %463 = add i32 %462, %412
  %464 = add i32 %463, %399
  %465 = add i32 %464, %376
  %466 = add i32 %465, %357
  %467 = add i32 %466, %350
  %468 = add i32 %467, %304
  %469 = add i32 %468, %294
  %470 = add i32 %469, %276
  %471 = add i32 %470, %272
  %472 = add i32 %471, %253
  %473 = add i32 %472, %361
  %474 = shl i32 %473, 1
  %475 = sub i32 %358, %179
  %476 = add i32 %475, %340
  %477 = add i32 %476, %267
  %478 = mul i32 %477, 5
  %479 = add i32 %351, %138
  %480 = shl i32 %479, 2
  %481 = xor i32 %205, -1
  %482 = add i32 %58, %481
  %483 = add i32 %482, %68
  %484 = sub i32 %483, %64
  %485 = sub i32 %484, %164
  %486 = add i32 %485, %271
  %487 = mul i32 %486, 3
  %488 = sub i32 5, %1
  %489 = add i32 %488, %25
  %490 = add i32 %489, %34
  %491 = add i32 %490, %55
  %492 = add i32 %491, %171
  %493 = add i32 %492, %20
  %494 = add i32 %493, %22
  %495 = add i32 %494, %49
  %496 = sub i32 %495, %57
  %497 = add i32 %496, %9
  %498 = add i32 %497, %80
  %499 = sub i32 %498, %81
  %500 = add i32 %499, %87
  %501 = add i32 %500, %93
  %502 = sub i32 %501, %35
  %503 = add i32 %502, %107
  %504 = sub i32 %503, %112
  %505 = sub i32 %504, %120
  %506 = sub i32 %505, %50
  %507 = sub i32 %506, %135
  %508 = sub i32 %507, %150
  %509 = add i32 %508, %172
  %510 = add i32 %509, %175
  %511 = add i32 %510, %59
  %512 = add i32 %511, %185
  %513 = sub i32 %512, %187
  %514 = sub i32 %513, %195
  %515 = sub i32 %514, %198
  %516 = sub i32 %515, %3
  %517 = add i32 %516, %15
  %518 = add i32 %517, %27
  %519 = add i32 %518, %42
  %520 = sub i32 %519, %46
  %521 = add i32 %520, %47
  %522 = add i32 %521, %52
  %523 = sub i32 %522, %54
  %524 = add i32 %523, %60
  %525 = sub i32 %524, %61
  %526 = sub i32 %525, %67
  %527 = sub i32 %526, %70
  %528 = add i32 %527, %72
  %529 = sub i32 %528, %74
  %530 = add i32 %529, %75
  %531 = sub i32 %530, %78
  %532 = sub i32 %531, %86
  %533 = add i32 %532, %89
  %534 = add i32 %533, %90
  %535 = add i32 %534, %91
  %536 = add i32 %535, %92
  %537 = add i32 %536, %94
  %538 = add i32 %537, %95
  %539 = add i32 %538, %99
  %540 = sub i32 %539, %101
  %541 = sub i32 %540, %102
  %542 = add i32 %541, %104
  %543 = sub i32 %542, %105
  %544 = sub i32 %543, %106
  %545 = add i32 %544, %109
  %546 = sub i32 %545, %111
  %547 = add i32 %546, %113
  %548 = sub i32 %547, %114
  %549 = sub i32 %548, %119
  %550 = sub i32 %549, %121
  %551 = sub i32 %550, %126
  %552 = sub i32 %551, %127
  %553 = add i32 %552, %129
  %554 = sub i32 %553, %130
  %555 = sub i32 %554, %134
  %556 = sub i32 %555, %136
  %557 = add i32 %556, %137
  %558 = sub i32 %557, %143
  %559 = add i32 %558, %144
  %560 = add i32 %559, %145
  %561 = sub i32 %560, %146
  %562 = sub i32 %561, %10
  %563 = sub i32 %562, %152
  %564 = sub i32 %563, %155
  %565 = add i32 %564, %159
  %566 = add i32 %565, %160
  %567 = sub i32 %566, %161
  %568 = sub i32 %567, %162
  %569 = add i32 %568, %165
  %570 = add i32 %569, %166
  %571 = add i32 %570, %168
  %572 = add i32 %571, %169
  %573 = sub i32 %572, %170
  %574 = add i32 %573, %173
  %575 = add i32 %574, %174
  %576 = add i32 %575, %178
  %577 = add i32 %576, %180
  %578 = add i32 %577, %181
  %579 = sub i32 %578, %186
  %580 = sub i32 %579, %84
  %581 = sub i32 %580, %188
  %582 = add i32 %581, %189
  %583 = add i32 %582, %190
  %584 = sub i32 %583, %191
  %585 = add i32 %584, %196
  %586 = sub i32 %585, %197
  %587 = add i32 %586, %245
  %588 = sub i32 %587, %4
  %589 = add i32 %588, %31
  %590 = sub i32 %589, %37
  %591 = sub i32 %590, %77
  %592 = add i32 %591, %85
  %593 = sub i32 %592, %98
  %594 = add i32 %593, %123
  %595 = sub i32 %594, %125
  %596 = add i32 %595, %128
  %597 = sub i32 %596, %131
  %598 = add i32 %597, %133
  %599 = add i32 %598, %141
  %600 = sub i32 %599, %142
  %601 = sub i32 %600, %148
  %602 = sub i32 %601, %157
  %603 = sub i32 %602, %177
  %604 = sub i32 %603, %183
  %605 = sub i32 %604, %184
  %606 = sub i32 %605, %194
  %607 = sub i32 %606, %200
  %608 = add i32 %607, %202
  %609 = add i32 %608, %204
  %610 = add i32 %609, %207
  %611 = sub i32 %610, %209
  %612 = sub i32 %611, %211
  %613 = add i32 %612, %212
  %614 = sub i32 %613, %249
  %615 = add i32 %614, %237
  %616 = add i32 %615, %213
  %617 = add i32 %616, %221
  %618 = sub i32 %617, %5
  %619 = sub i32 %618, %118
  %620 = sub i32 %619, %154
  %621 = add i32 %620, %218
  %622 = sub i32 %621, %238
  %623 = add i32 %622, %240
  %624 = add i32 %623, %244
  %625 = sub i32 %624, %255
  %626 = add i32 %625, %263
  %627 = add i32 %626, %265
  %628 = add i32 %627, %270
  %629 = add i32 %628, %282
  %630 = sub i32 %629, %219
  %631 = sub i32 %630, %234
  %632 = sub i32 %631, %296
  %633 = sub i32 %632, %300
  %634 = sub i32 %633, %321
  %635 = add i32 %634, %324
  %636 = add i32 %635, %330
  %637 = add i32 %636, %16
  %638 = add i32 %637, %348
  %639 = sub i32 %638, %241
  %640 = add i32 %639, %368
  %641 = sub i32 %640, %372
  %642 = sub i32 %641, %224
  %643 = sub i32 %642, %398
  %644 = add i32 %643, %235
  %645 = sub i32 %644, %426
  %646 = sub i32 %645, %215
  %647 = sub i32 %646, %226
  %648 = add i32 %647, %227
  %649 = sub i32 %648, %228
  %650 = sub i32 %649, %236
  %651 = sub i32 %650, %243
  %652 = sub i32 %651, %248
  %653 = add i32 %652, %251
  %654 = add i32 %653, %252
  %655 = add i32 %654, %261
  %656 = sub i32 %655, %264
  %657 = sub i32 %656, %266
  %658 = sub i32 %657, %273
  %659 = sub i32 %658, %277
  %660 = sub i32 %659, %278
  %661 = add i32 %660, %283
  %662 = add i32 %661, %286
  %663 = sub i32 %662, %287
  %664 = add i32 %663, %288
  %665 = add i32 %664, %290
  %666 = add i32 %665, %291
  %667 = add i32 %666, %292
  %668 = add i32 %667, %293
  %669 = sub i32 %668, %295
  %670 = add i32 %669, %297
  %671 = add i32 %670, %298
  %672 = sub i32 %671, %299
  %673 = sub i32 %672, %303
  %674 = sub i32 %673, %305
  %675 = sub i32 %674, %307
  %676 = sub i32 %675, %308
  %677 = add i32 %676, %309
  %678 = add i32 %677, %310
  %679 = sub i32 %678, %312
  %680 = sub i32 %679, %313
  %681 = sub i32 %680, %314
  %682 = add i32 %681, %280
  %683 = sub i32 %682, %322
  %684 = sub i32 %683, %323
  %685 = sub i32 %684, %325
  %686 = sub i32 %685, %326
  %687 = add i32 %686, %327
  %688 = sub i32 %687, %328
  %689 = add i32 %688, %331
  %690 = add i32 %689, %332
  %691 = add i32 %690, %333
  %692 = add i32 %691, %334
  %693 = add i32 %692, %335
  %694 = add i32 %693, %338
  %695 = add i32 %694, %339
  %696 = add i32 %695, %347
  %697 = add i32 %696, %349
  %698 = sub i32 %697, %353
  %699 = sub i32 %698, %354
  %700 = add i32 %699, %356
  %701 = sub i32 %700, %359
  %702 = add i32 %701, %360
  %703 = add i32 %702, %362
  %704 = add i32 %703, %341
  %705 = sub i32 %704, %367
  %706 = add i32 %705, %369
  %707 = sub i32 %706, %375
  %708 = sub i32 %707, %378
  %709 = sub i32 %708, %380
  %710 = sub i32 %709, %382
  %711 = sub i32 %710, %383
  %712 = add i32 %711, %386
  %713 = sub i32 %712, %387
  %714 = add i32 %713, %388
  %715 = add i32 %714, %389
  %716 = add i32 %715, %390
  %717 = add i32 %716, %391
  %718 = add i32 %717, %392
  %719 = add i32 %718, %393
  %720 = sub i32 %719, %394
  %721 = sub i32 %720, %397
  %722 = add i32 %721, %401
  %723 = sub i32 %722, %402
  %724 = add i32 %723, %403
  %725 = add i32 %724, %404
  %726 = add i32 %725, %406
  %727 = add i32 %726, %407
  %728 = add i32 %727, %408
  %729 = add i32 %728, %413
  %730 = sub i32 %729, %416
  %731 = sub i32 %730, %418
  %732 = sub i32 %731, %419
  %733 = sub i32 %732, %420
  %734 = add i32 %733, %422
  %735 = sub i32 %734, %423
  %736 = add i32 %735, %427
  %737 = sub i32 %736, %428
  %738 = sub i32 %737, %429
  %739 = sub i32 %738, %432
  %740 = sub i32 %739, %439
  %741 = sub i32 %740, %223
  %742 = sub i32 %741, %232
  %743 = sub i32 %742, %260
  %744 = sub i32 %743, %269
  %745 = sub i32 %744, %275
  %746 = sub i32 %745, %281
  %747 = sub i32 %746, %285
  %748 = sub i32 %747, %302
  %749 = sub i32 %748, %320
  %750 = sub i32 %749, %337
  %751 = add i32 %750, %343
  %752 = sub i32 %751, %346
  %753 = sub i32 %752, %355
  %754 = sub i32 %753, %364
  %755 = sub i32 %754, %366
  %756 = add i32 %755, %371
  %757 = add i32 %756, %374
  %758 = sub i32 %757, %377
  %759 = sub i32 %758, %385
  %760 = sub i32 %759, %396
  %761 = add i32 %760, %400
  %762 = sub i32 %761, %405
  %763 = add i32 %762, %410
  %764 = sub i32 %763, %411
  %765 = sub i32 %764, %415
  %766 = sub i32 %765, %425
  %767 = add i32 %766, %431
  %768 = add i32 %767, %434
  %769 = sub i32 %768, %436
  %770 = add i32 %769, %438
  %771 = add i32 %770, %441
  %772 = add i32 %771, %442
  %773 = add i32 %772, %444
  %774 = add i32 %773, %480
  %775 = add i32 %774, %478
  %776 = add i32 %775, %487
  %777 = add i32 %776, %474
  %778 = icmp eq i32 %19, %777
  %779 = select i1 %778, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)
  %780 = tail call i32 @puts(i8* nonnull dereferenceable(1) %779)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #1 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %7) #5
  %8 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %8) #5
  %9 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %9) #5
  %10 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %10) #5
  %11 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %11) #5
  %12 = bitcast i32* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %12) #5
  %13 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3, i32* nonnull %4, i32* nonnull %5, i32* nonnull %6)
  %14 = load i32, i32* %1, align 4, !tbaa !2
  %15 = load i32, i32* %2, align 4, !tbaa !2
  %16 = load i32, i32* %3, align 4, !tbaa !2
  %17 = load i32, i32* %4, align 4, !tbaa !2
  %18 = load i32, i32* %5, align 4, !tbaa !2
  %19 = load i32, i32* %6, align 4, !tbaa !2
  call void @crackme(i32 %14, i32 %15, i32 %16, i32 %17, i32 %18, i32 %19)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %12) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %11) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %10) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %9) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %8) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %7) #5
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare dso_local i32 @__isoc99_scanf(i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #4

attributes #0 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Ubuntu clang version 10.0.1-++20200708122807+ef32c611aa2-1~exp1~20200707223407.61 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
