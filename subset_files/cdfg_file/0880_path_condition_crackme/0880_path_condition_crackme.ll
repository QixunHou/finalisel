; ModuleID = '../.././c_source_file/0880_path_condition_crackme.c'
source_filename = "../.././c_source_file/0880_path_condition_crackme.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str.2 = private unnamed_addr constant [9 x i8] c"%d %d %d\00", align 1
@str = private unnamed_addr constant [4 x i8] c"bad\00", align 1
@str.3 = private unnamed_addr constant [5 x i8] c"good\00", align 1

; Function Attrs: nofree nounwind uwtable
define dso_local void @crackme(i32 %0, i32 %1, i32 %2) local_unnamed_addr #0 {
  %4 = and i32 %2, %0
  %5 = or i32 %1, %0
  %6 = xor i32 %5, -1
  %7 = or i32 %4, %6
  %8 = and i32 %2, %1
  %9 = and i32 %8, %0
  %10 = xor i32 %2, %1
  %11 = xor i32 %10, %0
  %12 = xor i32 %9, %11
  %13 = or i32 %2, %0
  %14 = xor i32 %13, -1
  %15 = xor i32 %1, %0
  %16 = or i32 %15, %14
  %17 = xor i32 %0, -1
  %18 = and i32 %8, %17
  %19 = and i32 %10, %0
  %20 = or i32 %18, %19
  %21 = shl i32 %20, 1
  %22 = xor i32 %8, -1
  %23 = and i32 %22, %17
  %24 = xor i32 %2, -1
  %25 = xor i32 %1, -1
  %26 = or i32 %25, %0
  %27 = xor i32 %26, -1
  %28 = or i32 %24, %27
  %29 = xor i32 %22, %0
  %30 = and i32 %24, %1
  %31 = xor i32 %30, -1
  %32 = and i32 %31, %17
  %33 = xor i32 %15, -1
  %34 = and i32 %24, %33
  %35 = or i32 %24, %1
  %36 = xor i32 %35, -1
  %37 = add i32 %35, 1
  %38 = xor i32 %2, %0
  %39 = xor i32 %38, -1
  %40 = and i32 %15, %39
  %41 = xor i32 %4, %26
  %42 = shl i32 %41, 1
  %43 = shl i32 %26, 1
  %44 = and i32 %24, %0
  %45 = xor i32 %44, -1
  %46 = and i32 %45, %25
  %47 = xor i32 %4, -1
  %48 = and i32 %47, %1
  %49 = and i32 %39, %25
  %50 = and i32 %1, %0
  %51 = xor i32 %50, %2
  %52 = or i32 %24, %0
  %53 = xor i32 %52, -1
  %54 = or i32 %50, %53
  %55 = shl i32 %54, 1
  %56 = xor i32 %45, %1
  %57 = xor i32 %50, -1
  %58 = and i32 %24, %57
  %59 = and i32 %45, %1
  %60 = and i32 %25, %0
  %61 = or i32 %60, %2
  %62 = and i32 %25, %2
  %63 = and i32 %62, %17
  %64 = or i32 %10, %17
  %65 = xor i32 %63, %64
  %66 = and i32 %10, %17
  %67 = and i32 %10, %57
  %68 = or i32 %35, %0
  %69 = xor i32 %47, %1
  %70 = or i32 %50, %14
  %71 = or i32 %25, %2
  %72 = and i32 %71, %0
  %73 = xor i32 %72, 2147483647
  %74 = xor i32 %73, %63
  %75 = and i32 %38, %15
  %76 = shl i32 %75, 1
  %77 = xor i32 %10, -1
  %78 = or i32 %77, %17
  %79 = shl i32 %78, 1
  %80 = or i32 %31, %17
  %81 = or i32 %77, %27
  %82 = and i32 %13, %15
  %83 = add i32 %44, 1
  %84 = xor i32 %53, %1
  %85 = xor i32 %64, -1
  %86 = or i32 %63, %85
  %87 = or i32 %39, %1
  %88 = xor i32 %13, %50
  %89 = and i32 %10, %5
  %90 = or i32 %77, %0
  %91 = and i32 %62, %0
  %92 = xor i32 %71, %17
  %93 = xor i32 %92, %91
  %94 = and i32 %52, %15
  %95 = or i32 %30, %0
  %96 = or i32 %53, %33
  %97 = add i32 %38, 1
  %98 = shl i32 %27, 1
  %99 = or i32 %2, %1
  %100 = xor i32 %99, %0
  %101 = xor i32 %100, -1
  %102 = xor i32 %9, %101
  %103 = or i32 %10, %27
  %104 = or i32 %10, %6
  %105 = xor i32 %35, %50
  %106 = or i32 %36, %17
  %107 = or i32 %24, %6
  %108 = xor i32 %99, -1
  %109 = or i32 %108, %0
  %110 = xor i32 %60, -1
  %111 = and i32 %77, %110
  %112 = and i32 %38, %33
  %113 = or i32 %50, %39
  %114 = or i32 %99, %0
  %115 = and i32 %45, %33
  %116 = or i32 %14, %1
  %117 = and i32 %26, %24
  %118 = and i32 %13, %1
  %119 = and i32 %77, %57
  %120 = or i32 %53, %1
  %121 = and i32 %35, %0
  %122 = and i32 %38, %57
  %123 = xor i32 %18, -1
  %124 = xor i32 %19, %123
  %125 = xor i32 %44, %35
  %126 = xor i32 %44, %22
  %127 = and i32 %26, %39
  %128 = add i32 %50, 1
  %129 = and i32 %99, %0
  %130 = xor i32 %129, %123
  %131 = or i32 %4, %27
  %132 = shl i32 %131, 1
  %133 = xor i32 %44, %1
  %134 = or i32 %39, %33
  %135 = or i32 %14, %33
  %136 = or i32 %38, %33
  %137 = and i32 %99, %17
  %138 = or i32 %4, %30
  %139 = or i32 %39, %6
  %140 = xor i32 %4, %5
  %141 = or i32 %91, %11
  %142 = or i32 %4, %15
  %143 = xor i32 %13, %1
  %144 = and i32 %77, %17
  %145 = or i32 %15, %53
  %146 = shl i32 %145, 1
  %147 = or i32 %33, %2
  %148 = shl i32 %147, 1
  %149 = or i32 %4, %1
  %150 = or i32 %4, %108
  %151 = and i32 %38, %110
  %152 = and i32 %24, %110
  %153 = or i32 %38, %27
  %154 = or i32 %8, %17
  %155 = xor i32 %60, %2
  %156 = or i32 %44, %36
  %157 = xor i32 %31, %0
  %158 = xor i32 %14, %1
  %159 = or i32 %15, %39
  %160 = and i32 %71, %17
  %161 = or i32 %91, %160
  %162 = xor i32 %11, -1
  %163 = or i32 %9, %162
  %164 = or i32 %38, %25
  %165 = or i32 %44, %33
  %166 = or i32 %22, %0
  %167 = or i32 %30, %60
  %168 = xor i32 %91, -1
  %169 = xor i32 %160, %168
  %170 = xor i32 %60, %22
  %171 = xor i32 %52, %1
  %172 = shl i32 %171, 1
  %173 = or i32 %44, %1
  %174 = or i32 %10, %0
  %175 = and i32 %39, %57
  %176 = or i32 %60, %24
  %177 = or i32 %24, %33
  %178 = and i32 %26, %77
  %179 = or i32 %22, %17
  %180 = or i32 %8, %60
  %181 = and i32 %15, %45
  %182 = and i32 %39, %1
  %183 = or i32 %99, %17
  %184 = and i32 %22, %0
  %185 = xor i32 %5, %2
  %186 = or i32 %38, %1
  %187 = or i32 %10, %50
  %188 = and i32 %110, %2
  %189 = and i32 %108, %17
  %190 = shl i32 %189, 3
  %191 = and i32 %30, %17
  %192 = and i32 %108, %0
  %193 = mul i32 %192, 6
  %194 = and i32 %30, %0
  %195 = and i32 %36, %17
  %196 = mul i32 %195, 24
  %197 = and i32 %36, %0
  %198 = mul i32 %197, 15
  %199 = add i32 %185, %31
  %200 = add i32 %199, %58
  %201 = add i32 %200, %18
  %202 = add i32 %201, %181
  %203 = add i32 %202, %179
  %204 = add i32 %203, %173
  %205 = add i32 %204, %159
  %206 = add i32 %205, %144
  %207 = add i32 %206, %137
  %208 = add i32 %207, %121
  %209 = add i32 %208, %119
  %210 = add i32 %209, %100
  %211 = add i32 %210, %59
  %212 = add i32 %211, %32
  %213 = add i32 %212, %74
  %214 = shl i32 %213, 1
  %215 = sub i32 %113, %70
  %216 = sub i32 %215, %23
  %217 = mul i32 %216, 5
  %218 = sub i32 %194, %191
  %219 = mul i32 %218, 3
  %220 = add i32 %9, %29
  %221 = shl i32 %220, 2
  %222 = sub i32 1, %1
  %223 = sub i32 %222, %2
  %224 = add i32 %223, %6
  %225 = sub i32 %224, %15
  %226 = add i32 %225, %128
  %227 = sub i32 %226, %60
  %228 = sub i32 %227, %5
  %229 = add i32 %228, %28
  %230 = add i32 %229, %34
  %231 = add i32 %230, %37
  %232 = sub i32 %231, %43
  %233 = add i32 %232, %44
  %234 = sub i32 %233, %51
  %235 = add i32 %234, %61
  %236 = add i32 %235, %35
  %237 = add i32 %236, %83
  %238 = add i32 %237, %97
  %239 = sub i32 %238, %98
  %240 = add i32 %239, %107
  %241 = sub i32 %240, %117
  %242 = add i32 %241, %8
  %243 = add i32 %242, %152
  %244 = sub i32 %243, %155
  %245 = add i32 %244, 1
  %246 = sub i32 %245, %176
  %247 = add i32 %246, %177
  %248 = sub i32 %247, %188
  %249 = sub i32 %248, %4
  %250 = sub i32 %249, %16
  %251 = add i32 %250, %40
  %252 = sub i32 %251, %46
  %253 = add i32 %252, %48
  %254 = sub i32 %253, %49
  %255 = sub i32 %254, %56
  %256 = sub i32 %255, %19
  %257 = sub i32 %256, %66
  %258 = sub i32 %257, %67
  %259 = add i32 %258, %68
  %260 = sub i32 %259, %69
  %261 = add i32 %260, %80
  %262 = sub i32 %261, %81
  %263 = add i32 %262, %82
  %264 = sub i32 %263, %84
  %265 = sub i32 %264, %87
  %266 = sub i32 %265, %88
  %267 = add i32 %266, %89
  %268 = sub i32 %267, %90
  %269 = add i32 %268, %94
  %270 = add i32 %269, %95
  %271 = add i32 %270, %96
  %272 = add i32 %271, %103
  %273 = sub i32 %272, %104
  %274 = sub i32 %273, %105
  %275 = add i32 %274, %106
  %276 = add i32 %275, %109
  %277 = sub i32 %276, %111
  %278 = sub i32 %277, %112
  %279 = sub i32 %278, %114
  %280 = add i32 %279, %115
  %281 = add i32 %280, %116
  %282 = add i32 %281, %118
  %283 = sub i32 %282, %120
  %284 = sub i32 %283, %122
  %285 = sub i32 %284, %125
  %286 = sub i32 %285, %126
  %287 = sub i32 %286, %127
  %288 = add i32 %287, %133
  %289 = sub i32 %288, %134
  %290 = add i32 %289, %135
  %291 = add i32 %290, %136
  %292 = sub i32 %291, %11
  %293 = add i32 %292, %138
  %294 = add i32 %293, %139
  %295 = sub i32 %294, %140
  %296 = sub i32 %295, %142
  %297 = add i32 %296, %143
  %298 = sub i32 %297, %148
  %299 = add i32 %298, %149
  %300 = sub i32 %299, %150
  %301 = add i32 %300, %151
  %302 = sub i32 %301, %153
  %303 = add i32 %302, %154
  %304 = sub i32 %303, %156
  %305 = sub i32 %304, %157
  %306 = sub i32 %305, %158
  %307 = sub i32 %306, %164
  %308 = sub i32 %307, %165
  %309 = sub i32 %308, %166
  %310 = add i32 %309, %167
  %311 = sub i32 %310, %170
  %312 = add i32 %311, %174
  %313 = sub i32 %312, %175
  %314 = add i32 %313, %178
  %315 = add i32 %314, %180
  %316 = add i32 %315, %182
  %317 = add i32 %316, %183
  %318 = add i32 %317, %184
  %319 = sub i32 %318, %186
  %320 = sub i32 %319, %187
  %321 = sub i32 %320, %12
  %322 = sub i32 %321, %42
  %323 = sub i32 %322, %55
  %324 = add i32 %323, %65
  %325 = sub i32 %324, %76
  %326 = sub i32 %325, %79
  %327 = sub i32 %326, %86
  %328 = add i32 %327, %93
  %329 = sub i32 %328, %102
  %330 = sub i32 %329, %124
  %331 = sub i32 %330, %130
  %332 = sub i32 %331, %132
  %333 = sub i32 %332, %141
  %334 = sub i32 %333, %146
  %335 = sub i32 %334, %161
  %336 = add i32 %335, %163
  %337 = sub i32 %336, %169
  %338 = sub i32 %337, %172
  %339 = add i32 %338, %190
  %340 = add i32 %339, %193
  %341 = add i32 %340, %196
  %342 = add i32 %341, %198
  %343 = sub i32 %342, %21
  %344 = add i32 %343, %219
  %345 = add i32 %344, %221
  %346 = add i32 %345, %217
  %347 = add i32 %346, %214
  %348 = icmp eq i32 %7, %347
  %349 = select i1 %348, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)
  %350 = tail call i32 @puts(i8* nonnull dereferenceable(1) %349)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #1 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %4) #5
  %5 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %5) #5
  %6 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %6) #5
  %7 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3)
  %8 = load i32, i32* %1, align 4, !tbaa !2
  %9 = load i32, i32* %2, align 4, !tbaa !2
  %10 = load i32, i32* %3, align 4, !tbaa !2
  call void @crackme(i32 %8, i32 %9, i32 %10)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %6) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %5) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %4) #5
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare dso_local i32 @__isoc99_scanf(i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #4

attributes #0 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Ubuntu clang version 10.0.1-++20200708122807+ef32c611aa2-1~exp1~20200707223407.61 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
