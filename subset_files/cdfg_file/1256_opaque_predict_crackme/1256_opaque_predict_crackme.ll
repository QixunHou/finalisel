; ModuleID = '../.././c_source_file/1256_opaque_predict_crackme.c'
source_filename = "../.././c_source_file/1256_opaque_predict_crackme.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str.2 = private unnamed_addr constant [9 x i8] c"%d %d %d\00", align 1
@str = private unnamed_addr constant [4 x i8] c"bad\00", align 1
@str.3 = private unnamed_addr constant [5 x i8] c"good\00", align 1

; Function Attrs: nofree nounwind uwtable
define dso_local void @crackme(i32 %0, i32 %1, i32 %2) local_unnamed_addr #0 {
  %4 = xor i32 %2, -1
  %5 = add i32 %2, 1
  %6 = or i32 %2, %0
  %7 = xor i32 %6, -1
  %8 = xor i32 %1, -1
  %9 = and i32 %8, %0
  %10 = xor i32 %9, -1
  %11 = xor i32 %2, %1
  %12 = and i32 %11, %10
  %13 = or i32 %1, %0
  %14 = and i32 %13, %2
  %15 = and i32 %2, %1
  %16 = and i32 %15, %0
  %17 = xor i32 %0, -1
  %18 = or i32 %2, %1
  %19 = and i32 %18, %17
  %20 = xor i32 %16, -1
  %21 = xor i32 %19, %20
  %22 = and i32 %1, %0
  %23 = and i32 %6, %8
  %24 = and i32 %8, %2
  %25 = and i32 %24, %0
  %26 = xor i32 %11, %0
  %27 = xor i32 %25, -1
  %28 = xor i32 %26, %27
  %29 = or i32 %4, %0
  %30 = and i32 %29, %8
  %31 = xor i32 %1, %0
  %32 = and i32 %31, %2
  %33 = xor i32 %18, %0
  %34 = or i32 %16, %33
  %35 = or i32 %15, %0
  %36 = xor i32 %18, -1
  %37 = add i32 %18, 1
  %38 = xor i32 %29, -1
  %39 = or i32 %38, %1
  %40 = and i32 %4, %1
  %41 = xor i32 %40, -1
  %42 = xor i32 %41, %0
  %43 = and i32 %2, %0
  %44 = or i32 %43, %40
  %45 = xor i32 %2, %0
  %46 = xor i32 %45, -1
  %47 = and i32 %31, %46
  %48 = xor i32 %22, -1
  %49 = and i32 %46, %48
  %50 = and i32 %29, %31
  %51 = or i32 %8, %0
  %52 = xor i32 %51, -1
  %53 = or i32 %43, %52
  %54 = xor i32 %13, -1
  %55 = xor i32 %54, %2
  %56 = or i32 %41, %17
  %57 = and i32 %4, %0
  %58 = xor i32 %57, -1
  %59 = and i32 %58, %8
  %60 = xor i32 %15, -1
  %61 = xor i32 %57, %60
  %62 = add i32 %1, 1
  %63 = xor i32 %43, -1
  %64 = and i32 %31, %63
  %65 = and i32 %4, %10
  %66 = or i32 %4, %1
  %67 = xor i32 %66, %0
  %68 = xor i32 %11, -1
  %69 = and i32 %68, %10
  %70 = and i32 %11, %13
  %71 = and i32 %51, %2
  %72 = or i32 %8, %2
  %73 = xor i32 %72, %0
  %74 = or i32 %25, %73
  %75 = and i32 %15, %17
  %76 = and i32 %11, %0
  %77 = xor i32 %76, 2147483647
  %78 = xor i32 %77, %75
  %79 = shl i32 %78, 1
  %80 = xor i32 %51, %2
  %81 = or i32 %9, %68
  %82 = or i32 %46, %52
  %83 = xor i32 %31, -1
  %84 = and i32 %83, %2
  %85 = or i32 %22, %2
  %86 = or i32 %40, %0
  %87 = xor i32 %6, %22
  %88 = and i32 %29, %1
  %89 = shl i32 %88, 1
  %90 = or i32 %22, %38
  %91 = or i32 %11, %0
  %92 = xor i32 %25, %91
  %93 = or i32 %31, %38
  %94 = xor i32 %66, -1
  %95 = add i32 %66, 1
  %96 = or i32 %60, %0
  %97 = or i32 %57, %83
  %98 = shl i32 %57, 1
  %99 = xor i32 %57, %66
  %100 = or i32 %22, %94
  %101 = or i32 %11, %52
  %102 = xor i32 %6, %1
  %103 = and i32 %68, %0
  %104 = and i32 %13, %46
  %105 = add i32 %45, 1
  %106 = or i32 %9, %2
  %107 = xor i32 %22, %2
  %108 = xor i32 %60, %0
  %109 = and i32 %24, %17
  %110 = or i32 %11, %17
  %111 = xor i32 %110, -1
  %112 = or i32 %109, %111
  %113 = or i32 %15, %9
  %114 = and i32 %63, %8
  %115 = xor i32 %43, %51
  %116 = or i32 %46, %83
  %117 = and i32 %18, %0
  %118 = or i32 %31, %7
  %119 = shl i32 %118, 1
  %120 = or i32 %18, %17
  %121 = or i32 %57, %1
  %122 = or i32 %38, %83
  %123 = or i32 %43, %1
  %124 = or i32 %36, %17
  %125 = and i32 %6, %83
  %126 = shl i32 %125, 1
  %127 = and i32 %31, %58
  %128 = or i32 %4, %83
  %129 = and i32 %72, %17
  %130 = or i32 %25, %129
  %131 = or i32 %54, %2
  %132 = and i32 %45, %8
  %133 = shl i32 %132, 1
  %134 = and i32 %45, %83
  %135 = or i32 %16, %19
  %136 = or i32 %66, %17
  %137 = or i32 %57, %15
  %138 = xor i32 %29, %22
  %139 = shl i32 %76, 1
  %140 = or i32 %46, %8
  %141 = or i32 %40, %17
  %142 = or i32 %83, %2
  %143 = or i32 %46, %1
  %144 = and i32 %29, %83
  %145 = shl i32 %144, 1
  %146 = and i32 %63, %83
  %147 = shl i32 %146, 1
  %148 = or i32 %9, %4
  %149 = and i32 %46, %10
  %150 = or i32 %45, %31
  %151 = shl i32 %150, 1
  %152 = and i32 %45, %1
  %153 = and i32 %4, %48
  %154 = xor i32 %9, %2
  %155 = or i32 %22, %68
  %156 = xor i32 %13, %2
  %157 = xor i32 %129, %27
  %158 = or i32 %11, %9
  %159 = or i32 %22, %7
  %160 = and i32 %45, %10
  %161 = xor i32 %52, %2
  %162 = or i32 %36, %0
  %163 = and i32 %68, %48
  %164 = xor i32 %40, %0
  %165 = and i32 %41, %17
  %166 = add i32 %11, 1
  %167 = or i32 %43, %31
  %168 = or i32 %18, %0
  %169 = and i32 %46, %83
  %170 = and i32 %72, %0
  %171 = or i32 %109, %170
  %172 = or i32 %7, %1
  %173 = or i32 %46, %54
  %174 = or i32 %11, %22
  %175 = xor i32 %43, %18
  %176 = or i32 %45, %9
  %177 = and i32 %11, %17
  %178 = or i32 %16, %177
  %179 = and i32 %13, %68
  %180 = xor i32 %38, %1
  %181 = and i32 %31, %4
  %182 = or i32 %43, %54
  %183 = and i32 %45, %31
  %184 = or i32 %40, %9
  %185 = or i32 %22, %36
  %186 = xor i32 %15, %0
  %187 = shl i32 %186, 1
  %188 = xor i32 %170, -1
  %189 = xor i32 %109, %188
  %190 = add i32 %43, 1
  %191 = or i32 %22, %4
  %192 = or i32 %25, %26
  %193 = or i32 %52, %2
  %194 = and i32 %46, %1
  %195 = xor i32 %109, %110
  %196 = or i32 %68, %52
  %197 = xor i32 %9, %41
  %198 = or i32 %57, %31
  %199 = xor i32 %177, %20
  %200 = or i32 %45, %8
  %201 = xor i32 %43, %1
  %202 = and i32 %11, %51
  %203 = or i32 %43, %36
  %204 = and i32 %58, %1
  %205 = or i32 %45, %54
  %206 = and i32 %66, %17
  %207 = or i32 %4, %54
  %208 = xor i32 %7, %1
  %209 = and i32 %60, %0
  %210 = or i32 %45, %52
  %211 = add i32 %22, 1
  %212 = or i32 %22, %46
  %213 = shl i32 %17, 1
  %214 = add i32 %40, 1
  %215 = or i32 %7, %83
  %216 = or i32 %43, %8
  %217 = or i32 %43, %83
  %218 = xor i32 %29, %1
  %219 = and i32 %10, %2
  %220 = or i32 %7, %8
  %221 = or i32 %45, %22
  %222 = xor i32 %66, %22
  %223 = xor i32 %117, -1
  %224 = xor i32 %75, %223
  %225 = or i32 %68, %0
  %226 = and i32 %11, %48
  %227 = and i32 %45, %48
  %228 = xor i32 %9, %60
  %229 = or i32 %31, %4
  %230 = and i32 %51, %68
  %231 = shl i32 %230, 1
  %232 = or i32 %31, %2
  %233 = xor i32 %43, %41
  %234 = and i32 %36, %17
  %235 = and i32 %40, %17
  %236 = mul i32 %235, -39
  %237 = and i32 %36, %0
  %238 = mul i32 %237, -9
  %239 = and i32 %40, %0
  %240 = mul i32 %239, -21
  %241 = and i32 %94, %17
  %242 = mul i32 %241, -12
  %243 = mul i32 %75, -10
  %244 = and i32 %94, %0
  %245 = shl i32 %244, 2
  %246 = mul i32 %16, -37
  %247 = add i32 %153, %156
  %248 = add i32 %247, %15
  %249 = add i32 %248, %131
  %250 = add i32 %249, %29
  %251 = add i32 %250, %71
  %252 = add i32 %251, %32
  %253 = sub i32 %84, %228
  %254 = add i32 %253, %203
  %255 = sub i32 %254, %123
  %256 = add i32 %255, %135
  %257 = mul i32 %256, 3
  %258 = add i32 %234, %180
  %259 = add i32 %258, %168
  %260 = add i32 %259, %104
  %261 = shl i32 %260, 2
  %262 = sub i32 %191, %56
  %263 = mul i32 %262, 5
  %264 = add i32 %252, %6
  %265 = add i32 %264, %227
  %266 = add i32 %265, %221
  %267 = add i32 %266, %217
  %268 = add i32 %267, %212
  %269 = add i32 %268, %194
  %270 = add i32 %269, %172
  %271 = add i32 %270, %91
  %272 = add i32 %271, %143
  %273 = add i32 %272, %141
  %274 = add i32 %273, %140
  %275 = add i32 %274, %138
  %276 = add i32 %275, %97
  %277 = add i32 %276, %86
  %278 = add i32 %277, %82
  %279 = add i32 %278, %19
  %280 = add i32 %279, %44
  %281 = add i32 %280, %39
  %282 = add i32 %281, %35
  %283 = add i32 %282, %92
  %284 = shl i32 %283, 1
  %285 = sub i32 %62, %0
  %286 = sub i32 %285, %213
  %287 = add i32 %286, %22
  %288 = sub i32 %287, %31
  %289 = sub i32 %288, %51
  %290 = add i32 %289, %83
  %291 = add i32 %290, %211
  %292 = sub i32 %291, %9
  %293 = add i32 %292, %10
  %294 = sub i32 %293, %14
  %295 = add i32 %294, %37
  %296 = sub i32 %295, %55
  %297 = add i32 %296, %65
  %298 = sub i32 %297, %80
  %299 = add i32 %298, %11
  %300 = add i32 %299, %85
  %301 = add i32 %300, %95
  %302 = add i32 %301, %105
  %303 = sub i32 %302, %106
  %304 = sub i32 %303, %107
  %305 = add i32 %304, %58
  %306 = sub i32 %305, %128
  %307 = sub i32 %306, %66
  %308 = sub i32 %307, %18
  %309 = sub i32 %308, %142
  %310 = add i32 %309, %148
  %311 = add i32 %310, %154
  %312 = sub i32 %311, %161
  %313 = add i32 %312, %60
  %314 = add i32 %313, %40
  %315 = add i32 %314, %166
  %316 = add i32 %315, %181
  %317 = add i32 %316, %190
  %318 = add i32 %317, %193
  %319 = add i32 %318, %207
  %320 = add i32 %319, %214
  %321 = sub i32 %320, %219
  %322 = sub i32 %321, %229
  %323 = sub i32 %322, %232
  %324 = sub i32 %323, %12
  %325 = sub i32 %324, %23
  %326 = add i32 %325, %30
  %327 = sub i32 %326, %42
  %328 = sub i32 %327, %47
  %329 = sub i32 %328, %49
  %330 = sub i32 %329, %50
  %331 = sub i32 %330, %53
  %332 = sub i32 %331, %59
  %333 = add i32 %332, %61
  %334 = add i32 %333, %64
  %335 = add i32 %334, %67
  %336 = sub i32 %335, %69
  %337 = add i32 %336, %70
  %338 = sub i32 %337, %81
  %339 = sub i32 %338, %87
  %340 = sub i32 %339, %90
  %341 = sub i32 %340, %93
  %342 = sub i32 %341, %96
  %343 = sub i32 %342, %98
  %344 = add i32 %343, %99
  %345 = add i32 %344, %100
  %346 = add i32 %345, %101
  %347 = sub i32 %346, %102
  %348 = sub i32 %347, %103
  %349 = add i32 %348, %108
  %350 = add i32 %349, %113
  %351 = sub i32 %350, %114
  %352 = add i32 %351, %115
  %353 = add i32 %352, %116
  %354 = sub i32 %353, %117
  %355 = sub i32 %354, %120
  %356 = add i32 %355, %121
  %357 = sub i32 %356, %122
  %358 = sub i32 %357, %124
  %359 = add i32 %358, %33
  %360 = add i32 %359, %127
  %361 = sub i32 %360, %134
  %362 = add i32 %361, %136
  %363 = sub i32 %362, %137
  %364 = sub i32 %363, %149
  %365 = sub i32 %364, %152
  %366 = add i32 %365, %155
  %367 = add i32 %366, %158
  %368 = sub i32 %367, %159
  %369 = sub i32 %368, %160
  %370 = sub i32 %369, %162
  %371 = sub i32 %370, %163
  %372 = sub i32 %371, %164
  %373 = add i32 %372, %165
  %374 = sub i32 %373, %167
  %375 = sub i32 %374, %169
  %376 = sub i32 %375, %173
  %377 = add i32 %376, %174
  %378 = add i32 %377, %175
  %379 = sub i32 %378, %176
  %380 = add i32 %379, %179
  %381 = sub i32 %380, %182
  %382 = add i32 %381, %183
  %383 = add i32 %382, %184
  %384 = sub i32 %383, %185
  %385 = add i32 %384, %196
  %386 = add i32 %385, %197
  %387 = add i32 %386, %198
  %388 = sub i32 %387, %26
  %389 = add i32 %388, %200
  %390 = add i32 %389, %201
  %391 = sub i32 %390, %202
  %392 = add i32 %391, %204
  %393 = sub i32 %392, %205
  %394 = sub i32 %393, %206
  %395 = sub i32 %394, %208
  %396 = sub i32 %395, %209
  %397 = add i32 %396, %210
  %398 = sub i32 %397, %215
  %399 = add i32 %398, %177
  %400 = sub i32 %399, %216
  %401 = sub i32 %400, %218
  %402 = sub i32 %401, %110
  %403 = sub i32 %402, %220
  %404 = add i32 %403, %222
  %405 = add i32 %404, %225
  %406 = sub i32 %405, %226
  %407 = add i32 %406, %233
  %408 = add i32 %407, %21
  %409 = add i32 %408, %28
  %410 = add i32 %409, %34
  %411 = sub i32 %410, %74
  %412 = sub i32 %411, %89
  %413 = add i32 %412, %112
  %414 = sub i32 %413, %119
  %415 = sub i32 %414, %126
  %416 = add i32 %415, %130
  %417 = sub i32 %416, %133
  %418 = sub i32 %417, %139
  %419 = sub i32 %418, %145
  %420 = sub i32 %419, %147
  %421 = sub i32 %420, %151
  %422 = add i32 %421, %157
  %423 = add i32 %422, %171
  %424 = add i32 %423, %178
  %425 = sub i32 %424, %187
  %426 = add i32 %425, %189
  %427 = add i32 %426, %192
  %428 = sub i32 %427, %195
  %429 = sub i32 %428, %199
  %430 = sub i32 %429, %224
  %431 = sub i32 %430, %231
  %432 = add i32 %431, %236
  %433 = add i32 %432, %238
  %434 = add i32 %433, %240
  %435 = add i32 %434, %242
  %436 = add i32 %435, %243
  %437 = sub i32 %436, %245
  %438 = add i32 %437, %246
  %439 = add i32 %438, %263
  %440 = sub i32 %439, %79
  %441 = add i32 %440, %261
  %442 = add i32 %441, %257
  %443 = add i32 %442, %284
  %444 = icmp eq i32 %5, %443
  %445 = select i1 %444, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)
  %446 = tail call i32 @puts(i8* nonnull dereferenceable(1) %445)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #1 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %4) #5
  %5 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %5) #5
  %6 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %6) #5
  %7 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3)
  %8 = load i32, i32* %1, align 4, !tbaa !2
  %9 = load i32, i32* %2, align 4, !tbaa !2
  %10 = load i32, i32* %3, align 4, !tbaa !2
  call void @crackme(i32 %8, i32 %9, i32 %10)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %6) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %5) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %4) #5
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare dso_local i32 @__isoc99_scanf(i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #4

attributes #0 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Ubuntu clang version 10.0.1-++20200708122807+ef32c611aa2-1~exp1~20200707223407.61 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
