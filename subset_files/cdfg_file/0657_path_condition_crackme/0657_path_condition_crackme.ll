; ModuleID = '../.././c_source_file/0657_path_condition_crackme.c'
source_filename = "../.././c_source_file/0657_path_condition_crackme.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str.2 = private unnamed_addr constant [15 x i8] c"%d %d %d %d %d\00", align 1
@str = private unnamed_addr constant [4 x i8] c"bad\00", align 1
@str.3 = private unnamed_addr constant [5 x i8] c"good\00", align 1

; Function Attrs: nofree nounwind uwtable
define dso_local void @crackme(i32 %0, i32 %1, i32 %2, i32 %3, i32 %4) local_unnamed_addr #0 {
  %6 = xor i32 %4, -1
  %7 = mul i32 %6, -2
  %8 = or i32 %7, 1
  %9 = xor i32 %1, -1
  %10 = xor i32 %2, %0
  %11 = xor i32 %10, -1
  %12 = and i32 %11, %9
  %13 = shl i32 %12, 1
  %14 = xor i32 %1, %0
  %15 = and i32 %14, %11
  %16 = add i32 %13, %15
  %17 = sub i32 %8, %16
  %18 = xor i32 %6, %3
  %19 = shl i32 %4, 1
  %20 = and i32 %6, %3
  %21 = and i32 %4, %3
  %22 = shl i32 %21, 2
  %23 = xor i32 %22, -4
  %24 = or i32 %4, %3
  %25 = xor i32 %24, -1
  %26 = xor i32 %3, 2147483647
  %27 = and i32 %26, %4
  %28 = shl i32 %27, 1
  %29 = and i32 %1, %0
  %30 = xor i32 %29, -1
  %31 = and i32 %30, %2
  %32 = or i32 %1, %0
  %33 = xor i32 %32, -1
  %34 = and i32 %2, %1
  %35 = and i32 %34, %0
  %36 = xor i32 %0, -1
  %37 = xor i32 %2, %1
  %38 = and i32 %37, %36
  %39 = or i32 %35, %38
  %40 = and i32 %9, %0
  %41 = or i32 %34, %40
  %42 = and i32 %2, %0
  %43 = xor i32 %42, -1
  %44 = xor i32 %14, -1
  %45 = and i32 %43, %44
  %46 = or i32 %2, %1
  %47 = xor i32 %46, -1
  %48 = or i32 %29, %47
  %49 = or i32 %37, %29
  %50 = xor i32 %2, -1
  %51 = or i32 %50, %1
  %52 = xor i32 %51, -1
  %53 = xor i32 %52, %0
  %54 = shl i32 %53, 1
  %55 = or i32 %2, %0
  %56 = and i32 %55, %14
  %57 = or i32 %9, %0
  %58 = and i32 %57, %2
  %59 = or i32 %50, %0
  %60 = and i32 %59, %14
  %61 = add i32 %14, 1
  %62 = and i32 %50, %0
  %63 = xor i32 %34, -1
  %64 = xor i32 %62, %63
  %65 = and i32 %63, %36
  %66 = and i32 %50, %1
  %67 = xor i32 %66, -1
  %68 = xor i32 %42, %67
  %69 = xor i32 %40, -1
  %70 = xor i32 %37, -1
  %71 = and i32 %70, %69
  %72 = xor i32 %34, %0
  %73 = shl i32 %72, 1
  %74 = add i32 %34, 1
  %75 = or i32 %42, %66
  %76 = and i32 %9, %2
  %77 = and i32 %76, %0
  %78 = xor i32 %37, %0
  %79 = xor i32 %78, -1
  %80 = xor i32 %77, %79
  %81 = xor i32 %62, %1
  %82 = or i32 %29, %50
  %83 = xor i32 %66, %0
  %84 = and i32 %10, %30
  %85 = xor i32 %55, %29
  %86 = and i32 %59, %1
  %87 = and i32 %50, %30
  %88 = shl i32 %87, 2
  %89 = and i32 %70, %30
  %90 = and i32 %37, %0
  %91 = xor i32 %55, -1
  %92 = and i32 %34, %36
  %93 = xor i32 %92, -1
  %94 = xor i32 %90, %93
  %95 = xor i32 %38, -1
  %96 = xor i32 %35, %95
  %97 = and i32 %59, %44
  %98 = xor i32 %35, %78
  %99 = xor i32 %46, %29
  %100 = xor i32 %57, %2
  %101 = xor i32 %57, -1
  %102 = or i32 %101, %2
  %103 = or i32 %35, %79
  %104 = or i32 %37, %36
  %105 = or i32 %62, %1
  %106 = or i32 %14, %50
  %107 = and i32 %10, %57
  %108 = and i32 %32, %50
  %109 = xor i32 %30, %2
  %110 = xor i32 %59, %29
  %111 = or i32 %42, %44
  %112 = and i32 %50, %69
  %113 = xor i32 %42, %57
  %114 = and i32 %37, %69
  %115 = and i32 %10, %14
  %116 = or i32 %62, %44
  %117 = xor i32 %59, -1
  %118 = or i32 %37, %0
  %119 = shl i32 %118, 1
  %120 = or i32 %29, %52
  %121 = and i32 %14, %50
  %122 = or i32 %40, %50
  %123 = and i32 %63, %0
  %124 = xor i32 %35, 2147483647
  %125 = xor i32 %124, %0
  %126 = xor i32 %125, %46
  %127 = shl i32 %126, 1
  %128 = or i32 %70, %33
  %129 = and i32 %76, %36
  %130 = or i32 %9, %2
  %131 = and i32 %130, %0
  %132 = xor i32 %131, -1
  %133 = xor i32 %129, %132
  %134 = or i32 %29, %2
  %135 = or i32 %10, %14
  %136 = shl i32 %135, 2
  %137 = or i32 %44, %2
  %138 = and i32 %57, %11
  %139 = and i32 %32, %11
  %140 = or i32 %52, %0
  %141 = or i32 %33, %2
  %142 = and i32 %46, %0
  %143 = xor i32 %142, %93
  %144 = or i32 %62, %9
  %145 = xor i32 %91, %1
  %146 = and i32 %69, %2
  %147 = or i32 %50, %44
  %148 = or i32 %29, %117
  %149 = or i32 %91, %44
  %150 = or i32 %91, %9
  %151 = add i32 %42, 1
  %152 = xor i32 %63, %0
  %153 = and i32 %11, %44
  %154 = xor i32 %42, %46
  %155 = and i32 %46, %36
  %156 = or i32 %10, %9
  %157 = shl i32 %156, 1
  %158 = or i32 %77, %78
  %159 = shl i32 %70, 1
  %160 = xor i32 %62, -1
  %161 = and i32 %160, %44
  %162 = or i32 %34, %0
  %163 = and i32 %10, %1
  %164 = or i32 %67, %0
  %165 = and i32 %43, %1
  %166 = or i32 %10, %44
  %167 = or i32 %51, %0
  %168 = and i32 %67, %36
  %169 = or i32 %10, %33
  %170 = or i32 %14, %2
  %171 = or i32 %40, %11
  %172 = or i32 %117, %44
  %173 = xor i32 %51, %29
  %174 = xor i32 %69, %2
  %175 = and i32 %14, %43
  %176 = and i32 %37, %30
  %177 = and i32 %160, %9
  %178 = or i32 %67, %36
  %179 = xor i32 %130, %0
  %180 = or i32 %77, %179
  %181 = and i32 %10, %9
  %182 = or i32 %10, %29
  %183 = xor i32 %104, -1
  %184 = or i32 %129, %183
  %185 = or i32 %70, %0
  %186 = shl i32 %185, 1
  %187 = add i32 %2, 1
  %188 = or i32 %29, %70
  %189 = shl i32 %188, 1
  %190 = and i32 %55, %9
  %191 = or i32 %40, %2
  %192 = shl i32 %191, 1
  %193 = or i32 %62, %34
  %194 = or i32 %47, %0
  %195 = xor i32 %160, %1
  %196 = shl i32 %195, 1
  %197 = xor i32 %33, %2
  %198 = or i32 %42, %14
  %199 = xor i32 %198, -1
  %200 = or i32 %50, %33
  %201 = add i32 %51, 1
  %202 = or i32 %29, %11
  %203 = or i32 %40, %70
  %204 = shl i32 %203, 2
  %205 = or i32 %14, %117
  %206 = and i32 %50, %44
  %207 = shl i32 %10, 1
  %208 = and i32 %70, %0
  %209 = xor i32 %62, %51
  %210 = shl i32 %209, 1
  %211 = and i32 %160, %1
  %212 = or i32 %46, %0
  %213 = and i32 %51, %36
  %214 = xor i32 %124, %155
  %215 = xor i32 %59, %1
  %216 = and i32 %47, %36
  %217 = and i32 %66, %36
  %218 = mul i32 %217, -9
  %219 = and i32 %47, %0
  %220 = mul i32 %219, 25
  %221 = and i32 %66, %0
  %222 = and i32 %52, %36
  %223 = shl i32 %92, 4
  %224 = and i32 %52, %0
  %225 = add i32 %112, %121
  %226 = add i32 %225, %211
  %227 = add i32 %226, %78
  %228 = add i32 %227, %177
  %229 = add i32 %228, %169
  %230 = add i32 %229, %153
  %231 = add i32 %230, %111
  %232 = add i32 %231, %71
  %233 = add i32 %232, %48
  %234 = add i32 %233, %41
  %235 = add i32 %234, %214
  %236 = shl i32 %235, 1
  %237 = add i32 %224, %11
  %238 = sub i32 %237, %35
  %239 = add i32 %238, %49
  %240 = mul i32 %239, 5
  %241 = add i32 %168, %51
  %242 = add i32 %241, %222
  %243 = sub i32 %242, %166
  %244 = mul i32 %243, 3
  %245 = add i32 %20, %25
  %246 = mul i32 %245, -7
  %247 = sub i32 %221, %216
  %248 = mul i32 %247, 13
  %249 = add i32 %0, 1
  %250 = add i32 %249, %1
  %251 = add i32 %250, %33
  %252 = add i32 %251, %61
  %253 = add i32 %252, %30
  %254 = sub i32 %253, %2
  %255 = add i32 %254, %101
  %256 = add i32 %255, %187
  %257 = add i32 %256, %69
  %258 = sub i32 %257, %31
  %259 = add i32 %258, %58
  %260 = add i32 %259, %74
  %261 = sub i32 %260, %82
  %262 = add i32 %261, %91
  %263 = add i32 %262, %46
  %264 = add i32 %263, %100
  %265 = sub i32 %264, %102
  %266 = sub i32 %265, %106
  %267 = sub i32 %266, %108
  %268 = sub i32 %267, %109
  %269 = add i32 %268, %117
  %270 = sub i32 %269, %122
  %271 = sub i32 %270, %134
  %272 = add i32 %271, %137
  %273 = sub i32 %272, %59
  %274 = add i32 %273, %141
  %275 = sub i32 %274, %146
  %276 = add i32 %275, %147
  %277 = add i32 %276, %151
  %278 = add i32 %277, %170
  %279 = sub i32 %278, %174
  %280 = sub i32 %279, %62
  %281 = sub i32 %280, %197
  %282 = sub i32 %281, %200
  %283 = add i32 %282, %201
  %284 = sub i32 %283, %206
  %285 = add i32 %284, %45
  %286 = sub i32 %285, %56
  %287 = sub i32 %286, %60
  %288 = sub i32 %287, %64
  %289 = sub i32 %288, %65
  %290 = add i32 %289, %68
  %291 = add i32 %290, %75
  %292 = sub i32 %291, %81
  %293 = sub i32 %292, %83
  %294 = sub i32 %293, %84
  %295 = add i32 %294, %85
  %296 = sub i32 %295, %86
  %297 = add i32 %296, %88
  %298 = add i32 %297, %89
  %299 = sub i32 %298, %90
  %300 = sub i32 %299, %97
  %301 = sub i32 %300, %99
  %302 = add i32 %301, %104
  %303 = add i32 %302, %105
  %304 = sub i32 %303, %107
  %305 = sub i32 %304, %110
  %306 = add i32 %305, %113
  %307 = add i32 %306, %114
  %308 = add i32 %307, %115
  %309 = sub i32 %308, %116
  %310 = add i32 %309, %120
  %311 = sub i32 %310, %123
  %312 = sub i32 %311, %128
  %313 = add i32 %312, %138
  %314 = sub i32 %313, %139
  %315 = add i32 %314, %140
  %316 = add i32 %315, %144
  %317 = add i32 %316, %145
  %318 = sub i32 %317, %148
  %319 = add i32 %318, %149
  %320 = add i32 %319, %150
  %321 = add i32 %320, %152
  %322 = sub i32 %321, %154
  %323 = sub i32 %322, %155
  %324 = sub i32 %323, %159
  %325 = add i32 %324, %161
  %326 = add i32 %325, %162
  %327 = sub i32 %326, %163
  %328 = add i32 %327, %164
  %329 = sub i32 %328, %165
  %330 = sub i32 %329, %167
  %331 = add i32 %330, %171
  %332 = sub i32 %331, %172
  %333 = add i32 %332, %173
  %334 = add i32 %333, %175
  %335 = add i32 %334, %176
  %336 = sub i32 %335, %178
  %337 = sub i32 %336, %181
  %338 = add i32 %337, %142
  %339 = sub i32 %338, %182
  %340 = sub i32 %339, %190
  %341 = sub i32 %340, %192
  %342 = sub i32 %341, %193
  %343 = sub i32 %342, %194
  %344 = add i32 %343, %199
  %345 = add i32 %344, %202
  %346 = add i32 %345, %205
  %347 = sub i32 %346, %207
  %348 = sub i32 %347, %208
  %349 = sub i32 %348, %212
  %350 = sub i32 %349, %213
  %351 = sub i32 %350, %215
  %352 = sub i32 %351, %19
  %353 = add i32 %352, %18
  %354 = add i32 %353, %20
  %355 = add i32 %354, %21
  %356 = add i32 %355, %39
  %357 = sub i32 %356, %54
  %358 = sub i32 %357, %73
  %359 = add i32 %358, %80
  %360 = add i32 %359, %94
  %361 = sub i32 %360, %96
  %362 = sub i32 %361, %98
  %363 = add i32 %362, %103
  %364 = sub i32 %363, %119
  %365 = sub i32 %364, %133
  %366 = sub i32 %365, %136
  %367 = sub i32 %366, %143
  %368 = sub i32 %367, %157
  %369 = sub i32 %368, %158
  %370 = add i32 %369, %180
  %371 = sub i32 %370, %184
  %372 = sub i32 %371, %186
  %373 = sub i32 %372, %189
  %374 = sub i32 %373, %196
  %375 = sub i32 %374, %204
  %376 = sub i32 %375, %210
  %377 = add i32 %376, %218
  %378 = add i32 %377, %220
  %379 = add i32 %378, %223
  %380 = sub i32 %379, %28
  %381 = add i32 %380, %248
  %382 = add i32 %381, %23
  %383 = sub i32 %382, %127
  %384 = add i32 %383, %246
  %385 = add i32 %384, %240
  %386 = add i32 %385, %244
  %387 = add i32 %386, %236
  %388 = icmp eq i32 %17, %387
  %389 = select i1 %388, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)
  %390 = tail call i32 @puts(i8* nonnull dereferenceable(1) %389)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #1 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %6) #5
  %7 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %7) #5
  %8 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %8) #5
  %9 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %9) #5
  %10 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %10) #5
  %11 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3, i32* nonnull %4, i32* nonnull %5)
  %12 = load i32, i32* %1, align 4, !tbaa !2
  %13 = load i32, i32* %2, align 4, !tbaa !2
  %14 = load i32, i32* %3, align 4, !tbaa !2
  %15 = load i32, i32* %4, align 4, !tbaa !2
  %16 = load i32, i32* %5, align 4, !tbaa !2
  call void @crackme(i32 %12, i32 %13, i32 %14, i32 %15, i32 %16)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %10) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %9) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %8) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %7) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %6) #5
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare dso_local i32 @__isoc99_scanf(i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #4

attributes #0 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Ubuntu clang version 10.0.1-++20200708122807+ef32c611aa2-1~exp1~20200707223407.61 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
