digraph "DFG for'crackme' function" {
	Node0x58caf0[shape=record, label="  %3 = add i32 %0, 1"];
	Node0x58cb60[shape=record, label="  %4 = add i32 %3, %1"];
	Node0x58cc20[shape=record, label="  %5 = xor i32 %1, -1"];
	Node0x58cc90[shape=record, label="  %6 = and i32 %5, %0"];
	Node0x58cd00[shape=record, label="  %7 = shl i32 %6, 1"];
	Node0x58cda0[shape=record, label="  %8 = xor i32 %7, -2"];
	Node0x58ce10[shape=record, label="  %9 = or i32 %5, %0"];
	Node0x58ce80[shape=record, label="  %10 = xor i32 %5, %0"];
	Node0x58cef0[shape=record, label="  %11 = and i32 %1, %0"];
	Node0x58cf60[shape=record, label="  %12 = or i32 %1, %0"];
	Node0x58cfd0[shape=record, label="  %13 = xor i32 %9, -1"];
	Node0x58d070[shape=record, label="  %14 = mul i32 %11, 3"];
	Node0x58d0e0[shape=record, label="  %15 = sub i32 %5, %9"];
	Node0x58d150[shape=record, label="  %16 = add i32 %15, %10"];
	Node0x58d1c0[shape=record, label="  %17 = sub i32 %16, %11"];
	Node0x58d230[shape=record, label="  %18 = add i32 %17, %12"];
	Node0x58d2a0[shape=record, label="  %19 = add i32 %18, %13"];
	Node0x58d310[shape=record, label="  %20 = sub i32 %19, %6"];
	Node0x58d380[shape=record, label="  %21 = add i32 %20, %14"];
	Node0x58d3f0[shape=record, label="  %22 = sub i32 %21, %8"];
	Node0x58d460[shape=record, label="  %23 = icmp eq i32 %4, %22"];
	Node0x52d268[shape=record, label="  %24 = select i1 %23, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0x58d900[shape=record, label="  %25 = tail call i32 @puts(i8* nonnull dereferenceable(1) %24)"];
	Node0x58d950[shape=record, label="  ret void"];
	Node0x58caf0 -> Node0x58cb60;
	Node0x58cb60 -> Node0x58cc20;
	Node0x58cc20 -> Node0x58cc90;
	Node0x58cc90 -> Node0x58cd00;
	Node0x58cd00 -> Node0x58cda0;
	Node0x58cda0 -> Node0x58ce10;
	Node0x58ce10 -> Node0x58ce80;
	Node0x58ce80 -> Node0x58cef0;
	Node0x58cef0 -> Node0x58cf60;
	Node0x58cf60 -> Node0x58cfd0;
	Node0x58cfd0 -> Node0x58d070;
	Node0x58d070 -> Node0x58d0e0;
	Node0x58d0e0 -> Node0x58d150;
	Node0x58d150 -> Node0x58d1c0;
	Node0x58d1c0 -> Node0x58d230;
	Node0x58d230 -> Node0x58d2a0;
	Node0x58d2a0 -> Node0x58d310;
	Node0x58d310 -> Node0x58d380;
	Node0x58d380 -> Node0x58d3f0;
	Node0x58d3f0 -> Node0x58d460;
	Node0x58d460 -> Node0x52d268;
	Node0x52d268 -> Node0x58d900;
	Node0x58d900 -> Node0x58d950;
edge [color=red]
	Node0x58caf0 -> Node0x58cb60;
	Node0x58cc20 -> Node0x58cc90;
	Node0x58cc90 -> Node0x58cd00;
	Node0x58cd00 -> Node0x58cda0;
	Node0x58cc20 -> Node0x58ce10;
	Node0x58cc20 -> Node0x58ce80;
	Node0x58ce10 -> Node0x58cfd0;
	Node0x58cef0 -> Node0x58d070;
	Node0x58cc20 -> Node0x58d0e0;
	Node0x58ce10 -> Node0x58d0e0;
	Node0x58d0e0 -> Node0x58d150;
	Node0x58ce80 -> Node0x58d150;
	Node0x58d150 -> Node0x58d1c0;
	Node0x58cef0 -> Node0x58d1c0;
	Node0x58d1c0 -> Node0x58d230;
	Node0x58cf60 -> Node0x58d230;
	Node0x58d230 -> Node0x58d2a0;
	Node0x58cfd0 -> Node0x58d2a0;
	Node0x58d2a0 -> Node0x58d310;
	Node0x58cc90 -> Node0x58d310;
	Node0x58d310 -> Node0x58d380;
	Node0x58d070 -> Node0x58d380;
	Node0x58d380 -> Node0x58d3f0;
	Node0x58cda0 -> Node0x58d3f0;
	Node0x58cb60 -> Node0x58d460;
	Node0x58d3f0 -> Node0x58d460;
	Node0x58d460 -> Node0x52d268;
	Node0x52d268 -> Node0x58d900;
}
