digraph "DFG for'crackme' function" {
	Node0x2275b20[shape=record, label="  %3 = xor i32 %1, -1"];
	Node0x2275b90[shape=record, label="  %4 = and i32 %3, %0"];
	Node0x2275c50[shape=record, label="  %5 = xor i32 %4, -1"];
	Node0x2275cc0[shape=record, label="  %6 = or i32 %1, %0"];
	Node0x2275d30[shape=record, label="  %7 = and i32 %1, %0"];
	Node0x2275da0[shape=record, label="  %8 = or i32 %3, %0"];
	Node0x2275e10[shape=record, label="  %9 = mul i32 %8, -3"];
	Node0x2275eb0[shape=record, label="  %10 = shl i32 %6, 3"];
	Node0x2275f50[shape=record, label="  %11 = xor i32 %10, -8"];
	Node0x2275fc0[shape=record, label="  %12 = xor i32 %8, -1"];
	Node0x2276060[shape=record, label="  %13 = mul i32 %12, 5"];
	Node0x2276100[shape=record, label="  %14 = mul i32 %4, 6"];
	Node0x22761a0[shape=record, label="  %15 = mul i32 %7, 7"];
	Node0x2276240[shape=record, label="  %16 = sub i32 4, %1"];
	Node0x22762b0[shape=record, label="  %17 = add i32 %16, %6"];
	Node0x2276320[shape=record, label="  %18 = add i32 %17, %7"];
	Node0x2276390[shape=record, label="  %19 = add i32 %18, %9"];
	Node0x2276400[shape=record, label="  %20 = add i32 %19, %13"];
	Node0x2276470[shape=record, label="  %21 = add i32 %20, %14"];
	Node0x22764e0[shape=record, label="  %22 = add i32 %21, %15"];
	Node0x2276550[shape=record, label="  %23 = add i32 %22, %11"];
	Node0x22765c0[shape=record, label="  %24 = icmp eq i32 %23, %5"];
	Node0x2216268[shape=record, label="  %25 = select i1 %24, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0x2276a60[shape=record, label="  %26 = tail call i32 @puts(i8* nonnull dereferenceable(1) %25)"];
	Node0x2276ab0[shape=record, label="  ret void"];
	Node0x2275b20 -> Node0x2275b90;
	Node0x2275b90 -> Node0x2275c50;
	Node0x2275c50 -> Node0x2275cc0;
	Node0x2275cc0 -> Node0x2275d30;
	Node0x2275d30 -> Node0x2275da0;
	Node0x2275da0 -> Node0x2275e10;
	Node0x2275e10 -> Node0x2275eb0;
	Node0x2275eb0 -> Node0x2275f50;
	Node0x2275f50 -> Node0x2275fc0;
	Node0x2275fc0 -> Node0x2276060;
	Node0x2276060 -> Node0x2276100;
	Node0x2276100 -> Node0x22761a0;
	Node0x22761a0 -> Node0x2276240;
	Node0x2276240 -> Node0x22762b0;
	Node0x22762b0 -> Node0x2276320;
	Node0x2276320 -> Node0x2276390;
	Node0x2276390 -> Node0x2276400;
	Node0x2276400 -> Node0x2276470;
	Node0x2276470 -> Node0x22764e0;
	Node0x22764e0 -> Node0x2276550;
	Node0x2276550 -> Node0x22765c0;
	Node0x22765c0 -> Node0x2216268;
	Node0x2216268 -> Node0x2276a60;
	Node0x2276a60 -> Node0x2276ab0;
edge [color=red]
	Node0x2275b20 -> Node0x2275b90;
	Node0x2275b90 -> Node0x2275c50;
	Node0x2275b20 -> Node0x2275da0;
	Node0x2275da0 -> Node0x2275e10;
	Node0x2275cc0 -> Node0x2275eb0;
	Node0x2275eb0 -> Node0x2275f50;
	Node0x2275da0 -> Node0x2275fc0;
	Node0x2275fc0 -> Node0x2276060;
	Node0x2275b90 -> Node0x2276100;
	Node0x2275d30 -> Node0x22761a0;
	Node0x2276240 -> Node0x22762b0;
	Node0x2275cc0 -> Node0x22762b0;
	Node0x22762b0 -> Node0x2276320;
	Node0x2275d30 -> Node0x2276320;
	Node0x2276320 -> Node0x2276390;
	Node0x2275e10 -> Node0x2276390;
	Node0x2276390 -> Node0x2276400;
	Node0x2276060 -> Node0x2276400;
	Node0x2276400 -> Node0x2276470;
	Node0x2276100 -> Node0x2276470;
	Node0x2276470 -> Node0x22764e0;
	Node0x22761a0 -> Node0x22764e0;
	Node0x22764e0 -> Node0x2276550;
	Node0x2275f50 -> Node0x2276550;
	Node0x2276550 -> Node0x22765c0;
	Node0x2275c50 -> Node0x22765c0;
	Node0x22765c0 -> Node0x2216268;
	Node0x2216268 -> Node0x2276a60;
}
