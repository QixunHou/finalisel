digraph "DFG for'crackme' function" {
	Node0x1c2e280[shape=record, label="  %3 = add i32 %1, %0"];
	Node0x1c2e2f0[shape=record, label="  %4 = xor i32 %1, %0"];
	Node0x1c2e9c0[shape=record, label="  %5 = shl i32 %1, 1"];
	Node0x1c2ea30[shape=record, label="  %6 = sub i32 %5, %4"];
	Node0x1c2ead0[shape=record, label="  %7 = xor i32 %1, 2147483647"];
	Node0x1c2eb40[shape=record, label="  %8 = and i32 %7, %0"];
	Node0x1c2ebb0[shape=record, label="  %9 = shl i32 %8, 1"];
	Node0x1c2ec20[shape=record, label="  %10 = add i32 %6, %9"];
	Node0x1c2ec90[shape=record, label="  %11 = icmp eq i32 %3, %10"];
	Node0x1bcf388[shape=record, label="  %12 = select i1 %11, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0x1c2f130[shape=record, label="  %13 = tail call i32 @puts(i8* nonnull dereferenceable(1) %12)"];
	Node0x1c2f180[shape=record, label="  ret void"];
	Node0x1c2e280 -> Node0x1c2e2f0;
	Node0x1c2e2f0 -> Node0x1c2e9c0;
	Node0x1c2e9c0 -> Node0x1c2ea30;
	Node0x1c2ea30 -> Node0x1c2ead0;
	Node0x1c2ead0 -> Node0x1c2eb40;
	Node0x1c2eb40 -> Node0x1c2ebb0;
	Node0x1c2ebb0 -> Node0x1c2ec20;
	Node0x1c2ec20 -> Node0x1c2ec90;
	Node0x1c2ec90 -> Node0x1bcf388;
	Node0x1bcf388 -> Node0x1c2f130;
	Node0x1c2f130 -> Node0x1c2f180;
edge [color=red]
	Node0x1c2e9c0 -> Node0x1c2ea30;
	Node0x1c2e2f0 -> Node0x1c2ea30;
	Node0x1c2ead0 -> Node0x1c2eb40;
	Node0x1c2eb40 -> Node0x1c2ebb0;
	Node0x1c2ea30 -> Node0x1c2ec20;
	Node0x1c2ebb0 -> Node0x1c2ec20;
	Node0x1c2e280 -> Node0x1c2ec90;
	Node0x1c2ec20 -> Node0x1c2ec90;
	Node0x1c2ec90 -> Node0x1bcf388;
	Node0x1bcf388 -> Node0x1c2f130;
}
