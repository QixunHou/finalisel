digraph "DFG for'crackme' function" {
	Node0x22a3b60[shape=record, label="  %5 = and i32 %2, %1"];
	Node0x22a41e0[shape=record, label="  %6 = xor i32 %5, -1"];
	Node0x22a4280[shape=record, label="  %7 = shl i32 %0, 1"];
	Node0x22a42f0[shape=record, label="  %8 = add i32 %7, %6"];
	Node0x22a4360[shape=record, label="  %9 = or i32 %3, %0"];
	Node0x22a43d0[shape=record, label="  %10 = add i32 %8, %9"];
	Node0x22a4440[shape=record, label="  %11 = xor i32 %2, -1"];
	Node0x22a44b0[shape=record, label="  %12 = or i32 %11, %1"];
	Node0x22a4520[shape=record, label="  %13 = and i32 %11, %1"];
	Node0x22a4590[shape=record, label="  %14 = xor i32 %13, -1"];
	Node0x22a4600[shape=record, label="  %15 = or i32 %2, %1"];
	Node0x22a4670[shape=record, label="  %16 = xor i32 %15, -1"];
	Node0x22a46e0[shape=record, label="  %17 = xor i32 %3, %0"];
	Node0x22a4750[shape=record, label="  %18 = and i32 %3, %0"];
	Node0x22a47c0[shape=record, label="  %19 = xor i32 %18, -1"];
	Node0x22a4830[shape=record, label="  %20 = xor i32 %0, -1"];
	Node0x22a48a0[shape=record, label="  %21 = and i32 %20, %3"];
	Node0x22a4910[shape=record, label="  %22 = xor i32 %9, -1"];
	Node0x22a49b0[shape=record, label="  %23 = xor i32 %3, 2147483647"];
	Node0x22a4a20[shape=record, label="  %24 = and i32 %23, %0"];
	Node0x22a4a90[shape=record, label="  %25 = add i32 %13, %16"];
	Node0x22a4b00[shape=record, label="  %26 = add i32 %25, %21"];
	Node0x22a4ba0[shape=record, label="  %27 = mul i32 %26, -6"];
	Node0x22a4c10[shape=record, label="  %28 = add i32 %24, %18"];
	Node0x22a4c80[shape=record, label="  %29 = shl i32 %28, 1"];
	Node0x22a4cf0[shape=record, label="  %30 = add i32 %5, %22"];
	Node0x22a4d90[shape=record, label="  %31 = mul i32 %30, -7"];
	Node0x22a4e00[shape=record, label="  %32 = sub i32 %12, %0"];
	Node0x22a50b0[shape=record, label="  %33 = mul i32 %32, 5"];
	Node0x22a5120[shape=record, label="  %34 = sub i32 -6, %2"];
	Node0x22a5190[shape=record, label="  %35 = add i32 %34, %12"];
	Node0x22a5200[shape=record, label="  %36 = add i32 %35, %14"];
	Node0x22a5270[shape=record, label="  %37 = add i32 %36, %15"];
	Node0x22a52e0[shape=record, label="  %38 = sub i32 %37, %17"];
	Node0x22a5350[shape=record, label="  %39 = add i32 %38, %19"];
	Node0x22a53c0[shape=record, label="  %40 = add i32 %39, %21"];
	Node0x22a5430[shape=record, label="  %41 = add i32 %40, %33"];
	Node0x22a54a0[shape=record, label="  %42 = add i32 %41, %31"];
	Node0x22a5510[shape=record, label="  %43 = add i32 %42, %27"];
	Node0x22a5580[shape=record, label="  %44 = add i32 %43, %29"];
	Node0x22a55f0[shape=record, label="  %45 = icmp eq i32 %10, %44"];
	Node0x2244268[shape=record, label="  %46 = select i1 %45, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0x22a5a90[shape=record, label="  %47 = tail call i32 @puts(i8* nonnull dereferenceable(1) %46)"];
	Node0x22a5ae0[shape=record, label="  ret void"];
	Node0x22a3b60 -> Node0x22a41e0;
	Node0x22a41e0 -> Node0x22a4280;
	Node0x22a4280 -> Node0x22a42f0;
	Node0x22a42f0 -> Node0x22a4360;
	Node0x22a4360 -> Node0x22a43d0;
	Node0x22a43d0 -> Node0x22a4440;
	Node0x22a4440 -> Node0x22a44b0;
	Node0x22a44b0 -> Node0x22a4520;
	Node0x22a4520 -> Node0x22a4590;
	Node0x22a4590 -> Node0x22a4600;
	Node0x22a4600 -> Node0x22a4670;
	Node0x22a4670 -> Node0x22a46e0;
	Node0x22a46e0 -> Node0x22a4750;
	Node0x22a4750 -> Node0x22a47c0;
	Node0x22a47c0 -> Node0x22a4830;
	Node0x22a4830 -> Node0x22a48a0;
	Node0x22a48a0 -> Node0x22a4910;
	Node0x22a4910 -> Node0x22a49b0;
	Node0x22a49b0 -> Node0x22a4a20;
	Node0x22a4a20 -> Node0x22a4a90;
	Node0x22a4a90 -> Node0x22a4b00;
	Node0x22a4b00 -> Node0x22a4ba0;
	Node0x22a4ba0 -> Node0x22a4c10;
	Node0x22a4c10 -> Node0x22a4c80;
	Node0x22a4c80 -> Node0x22a4cf0;
	Node0x22a4cf0 -> Node0x22a4d90;
	Node0x22a4d90 -> Node0x22a4e00;
	Node0x22a4e00 -> Node0x22a50b0;
	Node0x22a50b0 -> Node0x22a5120;
	Node0x22a5120 -> Node0x22a5190;
	Node0x22a5190 -> Node0x22a5200;
	Node0x22a5200 -> Node0x22a5270;
	Node0x22a5270 -> Node0x22a52e0;
	Node0x22a52e0 -> Node0x22a5350;
	Node0x22a5350 -> Node0x22a53c0;
	Node0x22a53c0 -> Node0x22a5430;
	Node0x22a5430 -> Node0x22a54a0;
	Node0x22a54a0 -> Node0x22a5510;
	Node0x22a5510 -> Node0x22a5580;
	Node0x22a5580 -> Node0x22a55f0;
	Node0x22a55f0 -> Node0x2244268;
	Node0x2244268 -> Node0x22a5a90;
	Node0x22a5a90 -> Node0x22a5ae0;
edge [color=red]
	Node0x22a3b60 -> Node0x22a41e0;
	Node0x22a4280 -> Node0x22a42f0;
	Node0x22a41e0 -> Node0x22a42f0;
	Node0x22a42f0 -> Node0x22a43d0;
	Node0x22a4360 -> Node0x22a43d0;
	Node0x22a4440 -> Node0x22a44b0;
	Node0x22a4440 -> Node0x22a4520;
	Node0x22a4520 -> Node0x22a4590;
	Node0x22a4600 -> Node0x22a4670;
	Node0x22a4750 -> Node0x22a47c0;
	Node0x22a4830 -> Node0x22a48a0;
	Node0x22a4360 -> Node0x22a4910;
	Node0x22a49b0 -> Node0x22a4a20;
	Node0x22a4520 -> Node0x22a4a90;
	Node0x22a4670 -> Node0x22a4a90;
	Node0x22a4a90 -> Node0x22a4b00;
	Node0x22a48a0 -> Node0x22a4b00;
	Node0x22a4b00 -> Node0x22a4ba0;
	Node0x22a4a20 -> Node0x22a4c10;
	Node0x22a4750 -> Node0x22a4c10;
	Node0x22a4c10 -> Node0x22a4c80;
	Node0x22a3b60 -> Node0x22a4cf0;
	Node0x22a4910 -> Node0x22a4cf0;
	Node0x22a4cf0 -> Node0x22a4d90;
	Node0x22a44b0 -> Node0x22a4e00;
	Node0x22a4e00 -> Node0x22a50b0;
	Node0x22a5120 -> Node0x22a5190;
	Node0x22a44b0 -> Node0x22a5190;
	Node0x22a5190 -> Node0x22a5200;
	Node0x22a4590 -> Node0x22a5200;
	Node0x22a5200 -> Node0x22a5270;
	Node0x22a4600 -> Node0x22a5270;
	Node0x22a5270 -> Node0x22a52e0;
	Node0x22a46e0 -> Node0x22a52e0;
	Node0x22a52e0 -> Node0x22a5350;
	Node0x22a47c0 -> Node0x22a5350;
	Node0x22a5350 -> Node0x22a53c0;
	Node0x22a48a0 -> Node0x22a53c0;
	Node0x22a53c0 -> Node0x22a5430;
	Node0x22a50b0 -> Node0x22a5430;
	Node0x22a5430 -> Node0x22a54a0;
	Node0x22a4d90 -> Node0x22a54a0;
	Node0x22a54a0 -> Node0x22a5510;
	Node0x22a4ba0 -> Node0x22a5510;
	Node0x22a5510 -> Node0x22a5580;
	Node0x22a4c80 -> Node0x22a5580;
	Node0x22a43d0 -> Node0x22a55f0;
	Node0x22a5580 -> Node0x22a55f0;
	Node0x22a55f0 -> Node0x2244268;
	Node0x2244268 -> Node0x22a5a90;
}
