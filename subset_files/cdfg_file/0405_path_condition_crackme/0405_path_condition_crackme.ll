; ModuleID = '../.././c_source_file/0405_path_condition_crackme.c'
source_filename = "../.././c_source_file/0405_path_condition_crackme.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str.2 = private unnamed_addr constant [18 x i8] c"%d %d %d %d %d %d\00", align 1
@str = private unnamed_addr constant [4 x i8] c"bad\00", align 1
@str.3 = private unnamed_addr constant [5 x i8] c"good\00", align 1

; Function Attrs: nofree nounwind uwtable
define dso_local void @crackme(i32 %0, i32 %1, i32 %2, i32 %3, i32 %4, i32 %5) local_unnamed_addr #0 {
  %7 = xor i32 %2, -1
  %8 = and i32 %7, %0
  %9 = xor i32 %8, -1
  %10 = or i32 %1, %0
  %11 = xor i32 %2, %1
  %12 = and i32 %11, %10
  %13 = shl i32 %12, 1
  %14 = add i32 %13, %9
  %15 = xor i32 %5, -1
  %16 = or i32 %15, %3
  %17 = xor i32 %16, -1
  %18 = add i32 %16, 1
  %19 = add i32 %14, %18
  %20 = or i32 %7, %0
  %21 = xor i32 %20, -1
  %22 = xor i32 %1, %0
  %23 = or i32 %22, %21
  %24 = xor i32 %1, -1
  %25 = and i32 %24, %0
  %26 = and i32 %2, %1
  %27 = or i32 %26, %25
  %28 = xor i32 %22, -1
  %29 = and i32 %20, %28
  %30 = xor i32 %25, -1
  %31 = xor i32 %30, %2
  %32 = or i32 %24, %0
  %33 = xor i32 %32, -1
  %34 = or i32 %7, %33
  %35 = xor i32 %2, %0
  %36 = or i32 %35, %33
  %37 = shl i32 %36, 1
  %38 = and i32 %1, %0
  %39 = xor i32 %35, -1
  %40 = and i32 %22, %39
  %41 = or i32 %2, %1
  %42 = xor i32 %41, -1
  %43 = or i32 %42, %0
  %44 = and i32 %26, %0
  %45 = xor i32 %0, -1
  %46 = and i32 %11, %45
  %47 = or i32 %44, %46
  %48 = and i32 %24, %2
  %49 = and i32 %48, %0
  %50 = or i32 %24, %2
  %51 = and i32 %50, %45
  %52 = xor i32 %49, 2147483647
  %53 = xor i32 %52, %51
  %54 = or i32 %7, %1
  %55 = xor i32 %54, -1
  %56 = or i32 %8, %55
  %57 = and i32 %2, %0
  %58 = xor i32 %57, -1
  %59 = and i32 %58, %1
  %60 = and i32 %9, %28
  %61 = shl i32 %60, 1
  %62 = xor i32 %10, -1
  %63 = add i32 %10, 1
  %64 = or i32 %39, %28
  %65 = or i32 %54, %0
  %66 = and i32 %35, %28
  %67 = or i32 %2, %0
  %68 = xor i32 %62, %2
  %69 = or i32 %38, %2
  %70 = xor i32 %11, %0
  %71 = or i32 %26, %45
  %72 = and i32 %11, %30
  %73 = or i32 %38, %39
  %74 = shl i32 %73, 2
  %75 = shl i32 %7, 1
  %76 = xor i32 %38, -1
  %77 = and i32 %76, %2
  %78 = xor i32 %11, -1
  %79 = and i32 %32, %78
  %80 = xor i32 %57, %41
  %81 = xor i32 %52, %70
  %82 = shl i32 %81, 1
  %83 = and i32 %78, %76
  %84 = shl i32 %83, 1
  %85 = or i32 %39, %1
  %86 = add i32 %25, 1
  %87 = xor i32 %26, -1
  %88 = add i32 %26, 1
  %89 = xor i32 %25, %87
  %90 = and i32 %9, %24
  %91 = xor i32 %33, %2
  %92 = and i32 %67, %24
  %93 = and i32 %39, %30
  %94 = and i32 %28, %2
  %95 = and i32 %48, %45
  %96 = and i32 %50, %0
  %97 = xor i32 %96, 2147483647
  %98 = xor i32 %97, %95
  %99 = or i32 %55, %0
  %100 = or i32 %25, %78
  %101 = and i32 %7, %1
  %102 = xor i32 %101, -1
  %103 = shl i32 %41, 1
  %104 = or i32 %8, %22
  %105 = or i32 %54, %45
  %106 = shl i32 %105, 1
  %107 = or i32 %78, %62
  %108 = and i32 %22, %58
  %109 = or i32 %22, %39
  %110 = xor i32 %41, %0
  %111 = or i32 %44, %110
  %112 = and i32 %26, %45
  %113 = and i32 %41, %0
  %114 = xor i32 %112, -1
  %115 = xor i32 %113, %114
  %116 = or i32 %41, %45
  %117 = and i32 %35, %22
  %118 = add i32 %11, 1
  %119 = or i32 %95, %96
  %120 = or i32 %8, %28
  %121 = add i32 %32, 1
  %122 = or i32 %42, %45
  %123 = or i32 %87, %0
  %124 = or i32 %28, %2
  %125 = and i32 %39, %24
  %126 = or i32 %11, %38
  %127 = or i32 %78, %33
  %128 = and i32 %11, %0
  %129 = xor i32 %128, %114
  %130 = and i32 %41, %45
  %131 = shl i32 %130, 1
  %132 = or i32 %57, %101
  %133 = or i32 %38, %42
  %134 = or i32 %49, %51
  %135 = shl i32 %134, 1
  %136 = xor i32 %25, %102
  %137 = or i32 %35, %22
  %138 = or i32 %78, %0
  %139 = shl i32 %138, 1
  %140 = or i32 %39, %62
  %141 = or i32 %25, %2
  %142 = and i32 %10, %39
  %143 = or i32 %11, %45
  %144 = xor i32 %95, %143
  %145 = shl i32 %144, 1
  %146 = or i32 %11, %33
  %147 = shl i32 %54, 1
  %148 = and i32 %102, %45
  %149 = or i32 %21, %24
  %150 = xor i32 %143, -1
  %151 = or i32 %95, %150
  %152 = xor i32 %78, %0
  %153 = or i32 %101, %45
  %154 = and i32 %10, %2
  %155 = and i32 %42, %45
  %156 = and i32 %101, %45
  %157 = shl i32 %156, 4
  %158 = and i32 %42, %0
  %159 = and i32 %101, %0
  %160 = mul i32 %159, 26
  %161 = and i32 %55, %45
  %162 = mul i32 %112, 15
  %163 = and i32 %55, %0
  %164 = mul i32 %163, 17
  %165 = and i32 %4, %3
  %166 = or i32 %165, %17
  %167 = xor i32 %5, %4
  %168 = or i32 %4, %3
  %169 = xor i32 %168, -1
  %170 = or i32 %167, %169
  %171 = xor i32 %4, %3
  %172 = xor i32 %171, -1
  %173 = and i32 %172, %5
  %174 = or i32 %5, %4
  %175 = xor i32 %174, -1
  %176 = or i32 %175, %3
  %177 = and i32 %5, %3
  %178 = and i32 %177, %4
  %179 = xor i32 %4, -1
  %180 = xor i32 %5, %3
  %181 = and i32 %180, %179
  %182 = or i32 %178, %181
  %183 = or i32 %5, %3
  %184 = xor i32 %183, %165
  %185 = shl i32 %184, 1
  %186 = xor i32 %180, -1
  %187 = shl i32 %186, 2
  %188 = xor i32 %3, -1
  %189 = and i32 %188, %5
  %190 = and i32 %189, %4
  %191 = or i32 %188, %5
  %192 = xor i32 %191, %179
  %193 = xor i32 %192, %190
  %194 = and i32 %177, %179
  %195 = and i32 %180, %4
  %196 = or i32 %194, %195
  %197 = or i32 %188, %4
  %198 = xor i32 %197, -1
  %199 = or i32 %186, %198
  %200 = and i32 %183, %4
  %201 = or i32 %194, %200
  %202 = shl i32 %171, 1
  %203 = xor i32 %177, %4
  %204 = and i32 %15, %3
  %205 = xor i32 %204, -1
  %206 = xor i32 %205, %4
  %207 = xor i32 %198, %5
  %208 = or i32 %15, %4
  %209 = and i32 %208, %171
  %210 = shl i32 %209, 1
  %211 = and i32 %5, %4
  %212 = xor i32 %167, -1
  %213 = or i32 %171, %212
  %214 = and i32 %174, %188
  %215 = and i32 %171, %15
  %216 = shl i32 %215, 1
  %217 = xor i32 %174, %3
  %218 = or i32 %211, %172
  %219 = and i32 %188, %4
  %220 = xor i32 %219, -1
  %221 = and i32 %186, %220
  %222 = and i32 %205, %4
  %223 = or i32 %180, %4
  %224 = xor i32 %223, -1
  %225 = or i32 %190, %224
  %226 = or i32 %211, %3
  %227 = and i32 %205, %179
  %228 = or i32 %177, %4
  %229 = and i32 %16, %179
  %230 = xor i32 %219, %205
  %231 = and i32 %167, %171
  %232 = or i32 %212, %169
  %233 = or i32 %186, %179
  %234 = or i32 %171, %5
  %235 = xor i32 %177, -1
  %236 = xor i32 %219, %235
  %237 = xor i32 %180, %4
  %238 = xor i32 %178, %237
  %239 = and i32 %220, %5
  %240 = or i32 %211, %188
  %241 = and i32 %197, %5
  %242 = xor i32 %190, -1
  %243 = xor i32 %237, %242
  %244 = and i32 %15, %4
  %245 = or i32 %244, %3
  %246 = shl i32 %244, 1
  %247 = xor i32 %244, -1
  %248 = and i32 %247, %188
  %249 = shl i32 %248, 1
  %250 = or i32 %211, %198
  %251 = shl i32 %250, 1
  %252 = and i32 %167, %197
  %253 = or i32 %16, %179
  %254 = and i32 %197, %15
  %255 = shl i32 %254, 1
  %256 = or i32 %205, %4
  %257 = xor i32 %190, %223
  %258 = and i32 %235, %179
  %259 = and i32 %167, %172
  %260 = or i32 %167, %198
  %261 = shl i32 %260, 1
  %262 = and i32 %167, %3
  %263 = xor i32 %211, %183
  %264 = xor i32 %165, -1
  %265 = and i32 %264, %5
  %266 = or i32 %177, %179
  %267 = or i32 %219, %15
  %268 = or i32 %167, %188
  %269 = and i32 %183, %179
  %270 = xor i32 %269, -1
  %271 = xor i32 %178, %270
  %272 = xor i32 %247, %3
  %273 = or i32 %211, %169
  %274 = xor i32 %208, -1
  %275 = or i32 %165, %274
  %276 = or i32 %244, %188
  %277 = or i32 %180, %198
  %278 = or i32 %165, %175
  %279 = and i32 %171, %247
  %280 = xor i32 %200, -1
  %281 = xor i32 %194, %280
  %282 = and i32 %15, %172
  %283 = shl i32 %282, 1
  %284 = or i32 %177, %219
  %285 = or i32 %180, %165
  %286 = and i32 %189, %179
  %287 = and i32 %186, %4
  %288 = or i32 %286, %287
  %289 = xor i32 %197, %5
  %290 = shl i32 %289, 1
  %291 = xor i32 %183, %4
  %292 = or i32 %219, %212
  %293 = and i32 %171, %212
  %294 = xor i32 %183, -1
  %295 = or i32 %294, %179
  %296 = shl i32 %295, 1
  %297 = or i32 %186, %4
  %298 = xor i32 %294, %4
  %299 = or i32 %167, %3
  %300 = and i32 %174, %3
  %301 = or i32 %17, %4
  %302 = shl i32 %204, 1
  %303 = or i32 %204, %4
  %304 = shl i32 %303, 1
  %305 = and i32 %167, %188
  %306 = xor i32 %16, %165
  %307 = and i32 %191, %4
  %308 = xor i32 %307, -1
  %309 = xor i32 %286, %308
  %310 = or i32 %172, %5
  %311 = or i32 %178, %269
  %312 = and i32 %168, %186
  %313 = and i32 %171, %5
  %314 = and i32 %167, %168
  %315 = or i32 %171, %274
  %316 = or i32 %211, %294
  %317 = and i32 %212, %188
  %318 = or i32 %171, %175
  %319 = or i32 %167, %219
  %320 = or i32 %212, %188
  %321 = xor i32 %220, %5
  %322 = xor i32 %274, %3
  %323 = xor i32 %235, %4
  %324 = xor i32 %204, %4
  %325 = shl i32 %324, 1
  %326 = xor i32 %186, %4
  %327 = xor i32 %211, %197
  %328 = or i32 %244, %172
  %329 = and i32 %212, %3
  %330 = or i32 %15, %169
  %331 = and i32 %294, %179
  %332 = mul i32 %331, -6
  %333 = and i32 %204, %179
  %334 = shl i32 %333, 2
  %335 = and i32 %294, %4
  %336 = and i32 %204, %4
  %337 = mul i32 %336, -18
  %338 = and i32 %17, %179
  %339 = mul i32 %338, -14
  %340 = and i32 %17, %4
  %341 = mul i32 %178, -19
  %342 = add i32 %99, %136
  %343 = add i32 %342, %65
  %344 = add i32 %343, %119
  %345 = add i32 %344, %235
  %346 = add i32 %345, %183
  %347 = add i32 %346, %98
  %348 = add i32 %347, %53
  %349 = add i32 %348, %327
  %350 = add i32 %349, %285
  %351 = add i32 %350, %317
  %352 = add i32 %351, %316
  %353 = add i32 %352, %312
  %354 = add i32 %353, %297
  %355 = add i32 %354, %278
  %356 = add i32 %355, %268
  %357 = add i32 %356, %266
  %358 = add i32 %357, %218
  %359 = add i32 %358, %217
  %360 = add i32 %359, %182
  %361 = add i32 %107, %45
  %362 = add i32 %361, %16
  %363 = add i32 %362, %262
  %364 = add i32 %363, %335
  %365 = shl i32 %364, 2
  %366 = add i32 %271, %194
  %367 = mul i32 %366, -3
  %368 = sub i32 %166, %129
  %369 = mul i32 %368, 5
  %370 = add i32 %44, %158
  %371 = shl i32 %370, 3
  %372 = sub i32 %155, %340
  %373 = mul i32 %372, 21
  %374 = add i32 %360, %196
  %375 = shl i32 %374, 1
  %376 = sub i32 2, %38
  %377 = add i32 %376, %10
  %378 = add i32 %377, %63
  %379 = add i32 %378, %86
  %380 = add i32 %379, %121
  %381 = add i32 %380, %28
  %382 = sub i32 %381, %22
  %383 = sub i32 %382, %31
  %384 = sub i32 %383, %34
  %385 = add i32 %384, %21
  %386 = sub i32 %385, %57
  %387 = add i32 %386, %67
  %388 = sub i32 %387, %68
  %389 = add i32 %388, %69
  %390 = sub i32 %389, %75
  %391 = sub i32 %390, %77
  %392 = add i32 %391, %88
  %393 = sub i32 %392, %91
  %394 = add i32 %393, %94
  %395 = add i32 %394, %102
  %396 = add i32 %395, %118
  %397 = sub i32 %396, %124
  %398 = sub i32 %397, %26
  %399 = add i32 %398, %141
  %400 = sub i32 %399, %154
  %401 = sub i32 %400, %3
  %402 = add i32 %401, %188
  %403 = add i32 %402, %27
  %404 = add i32 %403, %23
  %405 = sub i32 %404, %29
  %406 = add i32 %405, %40
  %407 = sub i32 %406, %43
  %408 = sub i32 %407, %56
  %409 = sub i32 %408, %59
  %410 = sub i32 %409, %64
  %411 = sub i32 %410, %66
  %412 = add i32 %411, %70
  %413 = add i32 %412, %71
  %414 = add i32 %413, %72
  %415 = add i32 %414, %79
  %416 = sub i32 %415, %80
  %417 = sub i32 %416, %85
  %418 = add i32 %417, %89
  %419 = add i32 %418, %90
  %420 = sub i32 %419, %92
  %421 = add i32 %420, %93
  %422 = sub i32 %421, %100
  %423 = sub i32 %422, %103
  %424 = sub i32 %423, %104
  %425 = add i32 %424, %108
  %426 = add i32 %425, %109
  %427 = add i32 %426, %116
  %428 = sub i32 %427, %117
  %429 = sub i32 %428, %120
  %430 = sub i32 %429, %122
  %431 = add i32 %430, %123
  %432 = sub i32 %431, %125
  %433 = add i32 %432, %126
  %434 = add i32 %433, %127
  %435 = sub i32 %434, %132
  %436 = sub i32 %435, %133
  %437 = add i32 %436, %137
  %438 = add i32 %437, %140
  %439 = sub i32 %438, %142
  %440 = sub i32 %439, %146
  %441 = sub i32 %440, %147
  %442 = add i32 %441, %148
  %443 = sub i32 %442, %149
  %444 = sub i32 %443, %152
  %445 = sub i32 %444, %153
  %446 = add i32 %445, %46
  %447 = add i32 %446, %161
  %448 = sub i32 %447, %37
  %449 = add i32 %448, %47
  %450 = sub i32 %449, %61
  %451 = sub i32 %450, %74
  %452 = sub i32 %451, %84
  %453 = sub i32 %452, %106
  %454 = sub i32 %453, %111
  %455 = add i32 %454, %115
  %456 = sub i32 %455, %131
  %457 = sub i32 %456, %139
  %458 = sub i32 %457, %151
  %459 = add i32 %458, %157
  %460 = add i32 %459, %160
  %461 = add i32 %460, %162
  %462 = add i32 %461, %164
  %463 = add i32 %462, %165
  %464 = add i32 %463, %219
  %465 = sub i32 %464, %135
  %466 = sub i32 %465, %145
  %467 = sub i32 %466, %167
  %468 = add i32 %467, %173
  %469 = sub i32 %468, %202
  %470 = add i32 %469, %207
  %471 = add i32 %470, %211
  %472 = sub i32 %471, %234
  %473 = sub i32 %472, %239
  %474 = sub i32 %473, %241
  %475 = add i32 %474, %265
  %476 = add i32 %475, %267
  %477 = add i32 %476, %310
  %478 = sub i32 %477, %313
  %479 = add i32 %478, %321
  %480 = add i32 %479, %330
  %481 = add i32 %480, %371
  %482 = sub i32 %481, %82
  %483 = sub i32 %482, %170
  %484 = sub i32 %483, %176
  %485 = sub i32 %484, %187
  %486 = sub i32 %485, %199
  %487 = add i32 %486, %203
  %488 = add i32 %487, %206
  %489 = add i32 %488, %213
  %490 = add i32 %489, %214
  %491 = sub i32 %490, %216
  %492 = add i32 %491, %221
  %493 = add i32 %492, %222
  %494 = add i32 %493, %181
  %495 = sub i32 %494, %226
  %496 = sub i32 %495, %227
  %497 = add i32 %496, %228
  %498 = sub i32 %497, %229
  %499 = sub i32 %498, %230
  %500 = add i32 %499, %231
  %501 = sub i32 %500, %232
  %502 = sub i32 %501, %233
  %503 = sub i32 %502, %236
  %504 = sub i32 %503, %240
  %505 = add i32 %504, %245
  %506 = sub i32 %505, %246
  %507 = sub i32 %506, %252
  %508 = add i32 %507, %253
  %509 = sub i32 %508, %255
  %510 = sub i32 %509, %256
  %511 = add i32 %510, %258
  %512 = add i32 %511, %259
  %513 = sub i32 %512, %263
  %514 = add i32 %513, %272
  %515 = sub i32 %514, %273
  %516 = sub i32 %515, %275
  %517 = sub i32 %516, %276
  %518 = add i32 %517, %277
  %519 = add i32 %518, %279
  %520 = sub i32 %519, %283
  %521 = add i32 %520, %284
  %522 = add i32 %521, %285
  %523 = sub i32 %522, %290
  %524 = sub i32 %523, %291
  %525 = sub i32 %524, %223
  %526 = add i32 %525, %269
  %527 = add i32 %526, %292
  %528 = add i32 %527, %293
  %529 = add i32 %528, %298
  %530 = add i32 %529, %299
  %531 = add i32 %530, %300
  %532 = sub i32 %531, %301
  %533 = sub i32 %532, %302
  %534 = sub i32 %533, %305
  %535 = sub i32 %534, %306
  %536 = add i32 %535, %314
  %537 = add i32 %536, %315
  %538 = add i32 %537, %318
  %539 = sub i32 %538, %319
  %540 = add i32 %539, %320
  %541 = add i32 %540, %322
  %542 = sub i32 %541, %323
  %543 = sub i32 %542, %326
  %544 = add i32 %543, %328
  %545 = add i32 %544, %329
  %546 = sub i32 %545, %185
  %547 = sub i32 %546, %193
  %548 = add i32 %547, %201
  %549 = sub i32 %548, %210
  %550 = add i32 %549, %225
  %551 = add i32 %550, %238
  %552 = sub i32 %551, %243
  %553 = sub i32 %552, %249
  %554 = sub i32 %553, %251
  %555 = sub i32 %554, %257
  %556 = sub i32 %555, %261
  %557 = add i32 %556, %281
  %558 = add i32 %557, %288
  %559 = sub i32 %558, %296
  %560 = sub i32 %559, %304
  %561 = add i32 %560, %309
  %562 = sub i32 %561, %311
  %563 = sub i32 %562, %325
  %564 = add i32 %563, %332
  %565 = sub i32 %564, %334
  %566 = add i32 %565, %337
  %567 = add i32 %566, %339
  %568 = add i32 %567, %341
  %569 = add i32 %568, %369
  %570 = add i32 %569, %373
  %571 = add i32 %570, %367
  %572 = add i32 %571, %365
  %573 = add i32 %572, %375
  %574 = icmp eq i32 %19, %573
  %575 = select i1 %574, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)
  %576 = tail call i32 @puts(i8* nonnull dereferenceable(1) %575)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #1 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %7) #5
  %8 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %8) #5
  %9 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %9) #5
  %10 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %10) #5
  %11 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %11) #5
  %12 = bitcast i32* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %12) #5
  %13 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3, i32* nonnull %4, i32* nonnull %5, i32* nonnull %6)
  %14 = load i32, i32* %1, align 4, !tbaa !2
  %15 = load i32, i32* %2, align 4, !tbaa !2
  %16 = load i32, i32* %3, align 4, !tbaa !2
  %17 = load i32, i32* %4, align 4, !tbaa !2
  %18 = load i32, i32* %5, align 4, !tbaa !2
  %19 = load i32, i32* %6, align 4, !tbaa !2
  call void @crackme(i32 %14, i32 %15, i32 %16, i32 %17, i32 %18, i32 %19)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %12) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %11) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %10) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %9) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %8) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %7) #5
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare dso_local i32 @__isoc99_scanf(i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #4

attributes #0 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Ubuntu clang version 10.0.1-++20200708122807+ef32c611aa2-1~exp1~20200707223407.61 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
