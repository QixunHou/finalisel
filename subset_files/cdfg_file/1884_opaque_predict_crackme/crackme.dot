digraph "DFG for'crackme' function" {
	Node0xdbb570[shape=record, label="  %3 = and i32 %1, %0"];
	Node0xdbbc20[shape=record, label="  %4 = add i32 %3, 1"];
	Node0xdbbce0[shape=record, label="  %5 = xor i32 %1, -1"];
	Node0xdbbd50[shape=record, label="  %6 = and i32 %5, %0"];
	Node0xdbbdc0[shape=record, label="  %7 = xor i32 %1, %0"];
	Node0xdbbe30[shape=record, label="  %8 = xor i32 %7, -1"];
	Node0xdbbea0[shape=record, label="  %9 = or i32 %1, %0"];
	Node0xdbbf10[shape=record, label="  %10 = xor i32 %9, -1"];
	Node0xdbbfb0[shape=record, label="  %11 = mul i32 %10, -6"];
	Node0xdbc020[shape=record, label="  %12 = xor i32 %0, -1"];
	Node0xdbc090[shape=record, label="  %13 = and i32 %12, %1"];
	Node0xdbc130[shape=record, label="  %14 = mul i32 %13, -3"];
	Node0xdbc1d0[shape=record, label="  %15 = shl i32 %6, 2"];
	Node0xdbc240[shape=record, label="  %16 = shl i32 %3, 2"];
	Node0xdbc2b0[shape=record, label="  %17 = sub i32 -3, %1"];
	Node0xdbc320[shape=record, label="  %18 = add i32 %17, %5"];
	Node0xdbc390[shape=record, label="  %19 = sub i32 %18, %6"];
	Node0xdbc400[shape=record, label="  %20 = sub i32 %19, %7"];
	Node0xdbc470[shape=record, label="  %21 = add i32 %20, %8"];
	Node0xdbc4e0[shape=record, label="  %22 = add i32 %21, %9"];
	Node0xdbc550[shape=record, label="  %23 = add i32 %22, %11"];
	Node0xdbc5c0[shape=record, label="  %24 = add i32 %23, %14"];
	Node0xdbc630[shape=record, label="  %25 = sub i32 %24, %15"];
	Node0xdbc6a0[shape=record, label="  %26 = sub i32 %25, %16"];
	Node0xdbc710[shape=record, label="  %27 = icmp eq i32 %4, %26"];
	Node0xd5c268[shape=record, label="  %28 = select i1 %27, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0xdbcbb0[shape=record, label="  %29 = tail call i32 @puts(i8* nonnull dereferenceable(1) %28)"];
	Node0xdbcc00[shape=record, label="  ret void"];
	Node0xdbb570 -> Node0xdbbc20;
	Node0xdbbc20 -> Node0xdbbce0;
	Node0xdbbce0 -> Node0xdbbd50;
	Node0xdbbd50 -> Node0xdbbdc0;
	Node0xdbbdc0 -> Node0xdbbe30;
	Node0xdbbe30 -> Node0xdbbea0;
	Node0xdbbea0 -> Node0xdbbf10;
	Node0xdbbf10 -> Node0xdbbfb0;
	Node0xdbbfb0 -> Node0xdbc020;
	Node0xdbc020 -> Node0xdbc090;
	Node0xdbc090 -> Node0xdbc130;
	Node0xdbc130 -> Node0xdbc1d0;
	Node0xdbc1d0 -> Node0xdbc240;
	Node0xdbc240 -> Node0xdbc2b0;
	Node0xdbc2b0 -> Node0xdbc320;
	Node0xdbc320 -> Node0xdbc390;
	Node0xdbc390 -> Node0xdbc400;
	Node0xdbc400 -> Node0xdbc470;
	Node0xdbc470 -> Node0xdbc4e0;
	Node0xdbc4e0 -> Node0xdbc550;
	Node0xdbc550 -> Node0xdbc5c0;
	Node0xdbc5c0 -> Node0xdbc630;
	Node0xdbc630 -> Node0xdbc6a0;
	Node0xdbc6a0 -> Node0xdbc710;
	Node0xdbc710 -> Node0xd5c268;
	Node0xd5c268 -> Node0xdbcbb0;
	Node0xdbcbb0 -> Node0xdbcc00;
edge [color=red]
	Node0xdbb570 -> Node0xdbbc20;
	Node0xdbbce0 -> Node0xdbbd50;
	Node0xdbbdc0 -> Node0xdbbe30;
	Node0xdbbea0 -> Node0xdbbf10;
	Node0xdbbf10 -> Node0xdbbfb0;
	Node0xdbc020 -> Node0xdbc090;
	Node0xdbc090 -> Node0xdbc130;
	Node0xdbbd50 -> Node0xdbc1d0;
	Node0xdbb570 -> Node0xdbc240;
	Node0xdbc2b0 -> Node0xdbc320;
	Node0xdbbce0 -> Node0xdbc320;
	Node0xdbc320 -> Node0xdbc390;
	Node0xdbbd50 -> Node0xdbc390;
	Node0xdbc390 -> Node0xdbc400;
	Node0xdbbdc0 -> Node0xdbc400;
	Node0xdbc400 -> Node0xdbc470;
	Node0xdbbe30 -> Node0xdbc470;
	Node0xdbc470 -> Node0xdbc4e0;
	Node0xdbbea0 -> Node0xdbc4e0;
	Node0xdbc4e0 -> Node0xdbc550;
	Node0xdbbfb0 -> Node0xdbc550;
	Node0xdbc550 -> Node0xdbc5c0;
	Node0xdbc130 -> Node0xdbc5c0;
	Node0xdbc5c0 -> Node0xdbc630;
	Node0xdbc1d0 -> Node0xdbc630;
	Node0xdbc630 -> Node0xdbc6a0;
	Node0xdbc240 -> Node0xdbc6a0;
	Node0xdbbc20 -> Node0xdbc710;
	Node0xdbc6a0 -> Node0xdbc710;
	Node0xdbc710 -> Node0xd5c268;
	Node0xd5c268 -> Node0xdbcbb0;
}
