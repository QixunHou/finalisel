; ModuleID = '../.././c_source_file/1828_opaque_predict_crackme.c'
source_filename = "../.././c_source_file/1828_opaque_predict_crackme.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str.2 = private unnamed_addr constant [9 x i8] c"%d %d %d\00", align 1
@str = private unnamed_addr constant [4 x i8] c"bad\00", align 1
@str.3 = private unnamed_addr constant [5 x i8] c"good\00", align 1

; Function Attrs: nofree nounwind uwtable
define dso_local void @crackme(i32 %0, i32 %1, i32 %2) local_unnamed_addr #0 {
  %4 = and i32 %1, %0
  %5 = or i32 %2, %0
  %6 = xor i32 %5, %4
  %7 = xor i32 %2, -1
  %8 = and i32 %7, %0
  %9 = xor i32 %8, -1
  %10 = xor i32 %9, %1
  %11 = sub i32 %6, %10
  %12 = xor i32 %1, -1
  %13 = and i32 %5, %12
  %14 = and i32 %12, %0
  %15 = or i32 %14, %2
  %16 = or i32 %8, %1
  %17 = and i32 %2, %0
  %18 = xor i32 %17, -1
  %19 = xor i32 %18, %1
  %20 = or i32 %12, %0
  %21 = xor i32 %2, %1
  %22 = and i32 %21, %20
  %23 = xor i32 %5, -1
  %24 = xor i32 %1, %0
  %25 = or i32 %24, %23
  %26 = xor i32 %2, %0
  %27 = xor i32 %24, -1
  %28 = or i32 %26, %27
  %29 = xor i32 %0, -1
  %30 = or i32 %2, %1
  %31 = xor i32 %30, -1
  %32 = or i32 %31, %29
  %33 = and i32 %18, %27
  %34 = shl i32 %33, 1
  %35 = or i32 %7, %1
  %36 = xor i32 %35, %0
  %37 = xor i32 %21, -1
  %38 = and i32 %37, %29
  %39 = and i32 %7, %27
  %40 = xor i32 %26, -1
  %41 = shl i32 %40, 1
  %42 = or i32 %1, %0
  %43 = and i32 %26, %42
  %44 = xor i32 %14, -1
  %45 = and i32 %44, %2
  %46 = or i32 %30, %29
  %47 = xor i32 %35, -1
  %48 = or i32 %4, %47
  %49 = shl i32 %48, 1
  %50 = xor i32 %42, -1
  %51 = or i32 %21, %50
  %52 = xor i32 %14, %2
  %53 = or i32 %8, %27
  %54 = and i32 %12, %2
  %55 = and i32 %54, %29
  %56 = or i32 %12, %2
  %57 = and i32 %56, %0
  %58 = xor i32 %57, -1
  %59 = xor i32 %55, %58
  %60 = or i32 %7, %0
  %61 = xor i32 %60, -1
  %62 = xor i32 %61, %1
  %63 = and i32 %37, %0
  %64 = xor i32 %17, %42
  %65 = and i32 %2, %1
  %66 = xor i32 %65, -1
  %67 = and i32 %66, %0
  %68 = and i32 %21, %29
  %69 = or i32 %21, %0
  %70 = and i32 %7, %1
  %71 = xor i32 %70, -1
  %72 = or i32 %71, %29
  %73 = or i32 %40, %12
  %74 = or i32 %17, %24
  %75 = shl i32 %74, 1
  %76 = xor i32 %4, -1
  %77 = xor i32 %76, %2
  %78 = and i32 %5, %24
  %79 = and i32 %40, %1
  %80 = or i32 %26, %24
  %81 = or i32 %4, %40
  %82 = or i32 %66, %0
  %83 = or i32 %61, %1
  %84 = and i32 %66, %29
  %85 = or i32 %40, %27
  %86 = shl i32 %4, 1
  %87 = or i32 %40, %1
  %88 = or i32 %8, %12
  %89 = or i32 %24, %2
  %90 = or i32 %30, %0
  %91 = and i32 %65, %29
  %92 = and i32 %30, %0
  %93 = or i32 %91, %92
  %94 = or i32 %17, %31
  %95 = and i32 %5, %1
  %96 = add i32 %14, 1
  %97 = or i32 %24, %40
  %98 = and i32 %37, %76
  %99 = and i32 %54, %0
  %100 = xor i32 %21, %0
  %101 = or i32 %99, %100
  %102 = or i32 %65, %29
  %103 = or i32 %14, %37
  %104 = xor i32 %4, %2
  %105 = and i32 %60, %1
  %106 = or i32 %4, %23
  %107 = or i32 %61, %27
  %108 = shl i32 %107, 1
  %109 = or i32 %26, %4
  %110 = or i32 %17, %12
  %111 = and i32 %40, %44
  %112 = and i32 %30, %29
  %113 = or i32 %35, %29
  %114 = shl i32 %113, 1
  %115 = and i32 %40, %27
  %116 = and i32 %21, %0
  %117 = xor i32 %91, -1
  %118 = xor i32 %116, %117
  %119 = and i32 %71, %0
  %120 = and i32 %20, %7
  %121 = shl i32 %120, 1
  %122 = xor i32 %20, -1
  %123 = or i32 %21, %122
  %124 = and i32 %7, %76
  %125 = and i32 %9, %27
  %126 = or i32 %7, %50
  %127 = and i32 %24, %9
  %128 = xor i32 %69, -1
  %129 = or i32 %99, %128
  %130 = xor i32 %65, %0
  %131 = xor i32 %5, %1
  %132 = and i32 %20, %40
  %133 = or i32 %4, %61
  %134 = and i32 %60, %12
  %135 = shl i32 %134, 1
  %136 = and i32 %5, %27
  %137 = shl i32 %18, 1
  %138 = and i32 %24, %2
  %139 = xor i32 %8, %66
  %140 = or i32 %4, %7
  %141 = and i32 %26, %76
  %142 = shl i32 %141, 2
  %143 = xor i32 %92, %117
  %144 = and i32 %65, %0
  %145 = xor i32 %144, -1
  %146 = xor i32 %112, %145
  %147 = or i32 %21, %29
  %148 = xor i32 %147, -1
  %149 = or i32 %55, %148
  %150 = and i32 %24, %7
  %151 = or i32 %4, %2
  %152 = or i32 %71, %0
  %153 = or i32 %122, %2
  %154 = and i32 %40, %12
  %155 = shl i32 %23, 1
  %156 = and i32 %42, %2
  %157 = or i32 %23, %27
  %158 = or i32 %37, %29
  %159 = xor i32 %17, %30
  %160 = or i32 %70, %29
  %161 = shl i32 %160, 1
  %162 = or i32 %37, %122
  %163 = and i32 %40, %76
  %164 = or i32 %21, %4
  %165 = and i32 %18, %12
  %166 = xor i32 %17, %71
  %167 = shl i32 %166, 1
  %168 = or i32 %31, %0
  %169 = and i32 %26, %27
  %170 = or i32 %65, %0
  %171 = xor i32 %47, %0
  %172 = or i32 %26, %50
  %173 = or i32 %17, %1
  %174 = or i32 %66, %29
  %175 = or i32 %91, %116
  %176 = and i32 %26, %44
  %177 = shl i32 %176, 1
  %178 = xor i32 %60, %4
  %179 = and i32 %9, %1
  %180 = xor i32 %66, %0
  %181 = or i32 %40, %122
  %182 = and i32 %26, %20
  %183 = or i32 %144, %68
  %184 = or i32 %24, %7
  %185 = or i32 %4, %37
  %186 = or i32 %17, %70
  %187 = or i32 %70, %14
  %188 = add i32 %30, 1
  %189 = add i32 %4, 1
  %190 = xor i32 %23, %1
  %191 = shl i32 %190, 1
  %192 = or i32 %37, %50
  %193 = xor i32 %30, %0
  %194 = or i32 %47, %29
  %195 = or i32 %17, %50
  %196 = and i32 %56, %29
  %197 = or i32 %99, %196
  %198 = and i32 %42, %7
  %199 = or i32 %4, %31
  %200 = shl i32 %1, 1
  %201 = xor i32 %70, %0
  %202 = shl i32 %201, 1
  %203 = xor i32 %122, %2
  %204 = and i32 %24, %40
  %205 = xor i32 %17, %20
  %206 = and i32 %35, %0
  %207 = xor i32 %14, %71
  %208 = and i32 %60, %24
  %209 = xor i32 %100, -1
  %210 = xor i32 %99, %209
  %211 = or i32 %144, %193
  %212 = or i32 %27, %2
  %213 = or i32 %8, %24
  %214 = or i32 %144, %112
  %215 = shl i32 %214, 2
  %216 = or i32 %26, %14
  %217 = xor i32 %56, %0
  %218 = or i32 %99, %217
  %219 = or i32 %144, %209
  %220 = shl i32 %219, 1
  %221 = or i32 %8, %47
  %222 = xor i32 %37, %0
  %223 = and i32 %26, %1
  %224 = and i32 %24, %18
  %225 = xor i32 %30, %4
  %226 = and i32 %27, %2
  %227 = shl i32 %226, 2
  %228 = xor i32 %8, %35
  %229 = or i32 %8, %65
  %230 = or i32 %65, %14
  %231 = shl i32 %230, 1
  %232 = xor i32 %217, 2147483647
  %233 = xor i32 %232, %99
  %234 = or i32 %7, %27
  %235 = or i32 %47, %0
  %236 = or i32 %24, %61
  %237 = xor i32 %17, %1
  %238 = and i32 %21, %44
  %239 = shl i32 %238, 1
  %240 = xor i32 %42, %2
  %241 = and i32 %35, %29
  %242 = xor i32 %8, %1
  %243 = xor i32 %14, %66
  %244 = xor i32 %55, %147
  %245 = or i32 %61, %12
  %246 = xor i32 %99, %69
  %247 = and i32 %21, %76
  %248 = xor i32 %193, %145
  %249 = or i32 %50, %2
  %250 = and i32 %7, %44
  %251 = and i32 %26, %24
  %252 = and i32 %42, %37
  %253 = or i32 %70, %0
  %254 = add i32 %42, 1
  %255 = and i32 %26, %12
  %256 = or i32 %23, %1
  %257 = or i32 %35, %0
  %258 = xor i32 %35, %4
  %259 = xor i32 %50, %2
  %260 = xor i32 %68, %145
  %261 = xor i32 %71, %0
  %262 = and i32 %18, %1
  %263 = and i32 %31, %29
  %264 = mul i32 %263, 11
  %265 = and i32 %70, %29
  %266 = mul i32 %265, -21
  %267 = and i32 %31, %0
  %268 = and i32 %70, %0
  %269 = mul i32 %268, 7
  %270 = and i32 %47, %29
  %271 = mul i32 %270, 20
  %272 = and i32 %47, %0
  %273 = shl i32 %144, 3
  %274 = add i32 %240, %2
  %275 = add i32 %274, %9
  %276 = add i32 %275, %70
  %277 = add i32 %276, %203
  %278 = add i32 %277, %150
  %279 = add i32 %278, %89
  %280 = add i32 %279, %77
  %281 = add i32 %280, %15
  %282 = add i32 %281, %256
  %283 = add i32 %282, %253
  %284 = add i32 %283, %252
  %285 = add i32 %284, %221
  %286 = add i32 %285, %193
  %287 = add i32 %286, %165
  %288 = add i32 %287, %102
  %289 = add i32 %288, %97
  %290 = add i32 %289, %88
  %291 = add i32 %290, %81
  %292 = add i32 %291, %78
  %293 = add i32 %292, %38
  %294 = add i32 %293, %19
  %295 = add i32 %294, %93
  %296 = add i32 %295, %233
  %297 = shl i32 %296, 1
  %298 = add i32 %21, %259
  %299 = sub i32 %8, %298
  %300 = add i32 %299, %237
  %301 = sub i32 %300, %13
  %302 = add i32 %301, %59
  %303 = mul i32 %302, 5
  %304 = sub i32 %272, %267
  %305 = mul i32 %304, 9
  %306 = add i32 %91, %130
  %307 = shl i32 %306, 2
  %308 = add i32 %72, %39
  %309 = mul i32 %308, -3
  %310 = sub i32 %29, %0
  %311 = add i32 %310, %12
  %312 = add i32 %311, %96
  %313 = sub i32 %312, %24
  %314 = add i32 %313, %27
  %315 = add i32 %314, %14
  %316 = add i32 %315, %189
  %317 = sub i32 %316, %200
  %318 = sub i32 %317, %42
  %319 = add i32 %318, %7
  %320 = add i32 %319, %254
  %321 = add i32 %320, %20
  %322 = add i32 %321, %26
  %323 = sub i32 %322, %45
  %324 = sub i32 %323, %52
  %325 = sub i32 %324, %86
  %326 = add i32 %325, %71
  %327 = add i32 %326, %104
  %328 = add i32 %327, %37
  %329 = sub i32 %328, %124
  %330 = sub i32 %329, %126
  %331 = sub i32 %330, %60
  %332 = add i32 %331, %61
  %333 = add i32 %332, %138
  %334 = add i32 %333, %140
  %335 = sub i32 %334, %151
  %336 = add i32 %335, %153
  %337 = sub i32 %336, %156
  %338 = add i32 %337, %30
  %339 = add i32 %338, %35
  %340 = add i32 %339, %184
  %341 = add i32 %340, %188
  %342 = sub i32 %341, %5
  %343 = sub i32 %342, %198
  %344 = sub i32 %343, %212
  %345 = add i32 %344, %234
  %346 = sub i32 %345, %249
  %347 = add i32 %346, %250
  %348 = add i32 %347, %16
  %349 = sub i32 %348, %22
  %350 = sub i32 %349, %25
  %351 = sub i32 %350, %28
  %352 = add i32 %351, %32
  %353 = add i32 %352, %36
  %354 = sub i32 %353, %41
  %355 = add i32 %354, %43
  %356 = sub i32 %355, %46
  %357 = add i32 %356, %51
  %358 = sub i32 %357, %53
  %359 = add i32 %358, %62
  %360 = add i32 %359, %63
  %361 = sub i32 %360, %64
  %362 = add i32 %361, %67
  %363 = add i32 %362, %68
  %364 = sub i32 %363, %69
  %365 = add i32 %364, %73
  %366 = add i32 %365, %79
  %367 = add i32 %366, %80
  %368 = sub i32 %367, %82
  %369 = add i32 %368, %83
  %370 = add i32 %369, %84
  %371 = sub i32 %370, %85
  %372 = add i32 %371, %87
  %373 = add i32 %372, %90
  %374 = sub i32 %373, %94
  %375 = sub i32 %374, %95
  %376 = add i32 %375, %98
  %377 = add i32 %376, %103
  %378 = add i32 %377, %105
  %379 = sub i32 %378, %106
  %380 = sub i32 %379, %109
  %381 = add i32 %380, %110
  %382 = sub i32 %381, %111
  %383 = add i32 %382, %112
  %384 = add i32 %383, %115
  %385 = add i32 %384, %119
  %386 = sub i32 %385, %121
  %387 = add i32 %386, %123
  %388 = sub i32 %387, %125
  %389 = sub i32 %388, %127
  %390 = add i32 %389, %131
  %391 = add i32 %390, %132
  %392 = add i32 %391, %133
  %393 = add i32 %392, %136
  %394 = sub i32 %393, %137
  %395 = add i32 %394, %139
  %396 = sub i32 %395, %152
  %397 = sub i32 %396, %154
  %398 = sub i32 %397, %155
  %399 = add i32 %398, %157
  %400 = add i32 %399, %158
  %401 = add i32 %400, %159
  %402 = sub i32 %401, %162
  %403 = add i32 %402, %163
  %404 = sub i32 %403, %164
  %405 = sub i32 %404, %168
  %406 = sub i32 %405, %169
  %407 = add i32 %406, %92
  %408 = sub i32 %407, %170
  %409 = add i32 %408, %171
  %410 = add i32 %409, %172
  %411 = sub i32 %410, %173
  %412 = add i32 %411, %174
  %413 = sub i32 %412, %178
  %414 = add i32 %413, %179
  %415 = sub i32 %414, %180
  %416 = add i32 %415, %181
  %417 = sub i32 %416, %182
  %418 = sub i32 %417, %185
  %419 = add i32 %418, %186
  %420 = sub i32 %419, %187
  %421 = sub i32 %420, %192
  %422 = add i32 %421, %194
  %423 = sub i32 %422, %195
  %424 = add i32 %423, %199
  %425 = add i32 %424, %204
  %426 = sub i32 %425, %205
  %427 = add i32 %426, %206
  %428 = add i32 %427, %207
  %429 = add i32 %428, %208
  %430 = add i32 %429, %213
  %431 = sub i32 %430, %216
  %432 = sub i32 %431, %222
  %433 = add i32 %432, %223
  %434 = sub i32 %433, %224
  %435 = sub i32 %434, %225
  %436 = sub i32 %435, %227
  %437 = add i32 %436, %228
  %438 = sub i32 %437, %229
  %439 = sub i32 %438, %235
  %440 = sub i32 %439, %236
  %441 = add i32 %440, %241
  %442 = add i32 %441, %242
  %443 = sub i32 %442, %243
  %444 = sub i32 %443, %245
  %445 = sub i32 %444, %247
  %446 = sub i32 %445, %251
  %447 = add i32 %446, %255
  %448 = sub i32 %447, %257
  %449 = add i32 %448, %258
  %450 = add i32 %449, %100
  %451 = sub i32 %450, %261
  %452 = sub i32 %451, %262
  %453 = sub i32 %452, %34
  %454 = sub i32 %453, %49
  %455 = sub i32 %454, %75
  %456 = sub i32 %455, %101
  %457 = sub i32 %456, %108
  %458 = sub i32 %457, %114
  %459 = add i32 %458, %118
  %460 = sub i32 %459, %129
  %461 = sub i32 %460, %135
  %462 = sub i32 %461, %142
  %463 = add i32 %462, %143
  %464 = add i32 %463, %146
  %465 = sub i32 %464, %149
  %466 = sub i32 %465, %161
  %467 = sub i32 %466, %167
  %468 = sub i32 %467, %175
  %469 = sub i32 %468, %177
  %470 = sub i32 %469, %183
  %471 = sub i32 %470, %191
  %472 = sub i32 %471, %197
  %473 = sub i32 %472, %202
  %474 = sub i32 %473, %210
  %475 = add i32 %474, %211
  %476 = sub i32 %475, %218
  %477 = sub i32 %476, %231
  %478 = sub i32 %477, %239
  %479 = sub i32 %478, %244
  %480 = sub i32 %479, %246
  %481 = sub i32 %480, %248
  %482 = sub i32 %481, %260
  %483 = add i32 %482, %264
  %484 = add i32 %483, %266
  %485 = add i32 %484, %269
  %486 = add i32 %485, %271
  %487 = add i32 %486, %273
  %488 = sub i32 %487, %215
  %489 = sub i32 %488, %220
  %490 = add i32 %489, %305
  %491 = add i32 %490, %307
  %492 = add i32 %491, %309
  %493 = add i32 %492, %303
  %494 = add i32 %493, %297
  %495 = icmp eq i32 %11, %494
  %496 = select i1 %495, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)
  %497 = tail call i32 @puts(i8* nonnull dereferenceable(1) %496)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #1 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %4) #5
  %5 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %5) #5
  %6 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %6) #5
  %7 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3)
  %8 = load i32, i32* %1, align 4, !tbaa !2
  %9 = load i32, i32* %2, align 4, !tbaa !2
  %10 = load i32, i32* %3, align 4, !tbaa !2
  call void @crackme(i32 %8, i32 %9, i32 %10)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %6) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %5) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %4) #5
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare dso_local i32 @__isoc99_scanf(i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #4

attributes #0 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Ubuntu clang version 10.0.1-++20200708122807+ef32c611aa2-1~exp1~20200707223407.61 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
