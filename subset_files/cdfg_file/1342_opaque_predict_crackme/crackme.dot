digraph "DFG for'crackme' function" {
	Node0xbccd30[shape=record, label="  %5 = xor i32 %2, -1"];
	Node0xbccda0[shape=record, label="  %6 = or i32 %5, %1"];
	Node0xbcce10[shape=record, label="  %7 = xor i32 %0, -1"];
	Node0xbcce80[shape=record, label="  %8 = or i32 %7, %3"];
	Node0xbccef0[shape=record, label="  %9 = sub i32 %8, %6"];
	Node0xbccf60[shape=record, label="  %10 = xor i32 %5, %1"];
	Node0xbccfd0[shape=record, label="  %11 = or i32 %2, %1"];
	Node0xbcd070[shape=record, label="  %12 = shl i32 %11, 1"];
	Node0xbcd110[shape=record, label="  %13 = xor i32 %12, -2"];
	Node0xbcd180[shape=record, label="  %14 = shl i32 %6, 1"];
	Node0xbcd1f0[shape=record, label="  %15 = xor i32 %14, -2"];
	Node0xbcd260[shape=record, label="  %16 = and i32 %5, %1"];
	Node0xbcd300[shape=record, label="  %17 = mul i32 %16, -3"];
	Node0xbcd370[shape=record, label="  %18 = and i32 %2, %1"];
	Node0xbcd3e0[shape=record, label="  %19 = xor i32 %3, -1"];
	Node0xbcd450[shape=record, label="  %20 = xor i32 %3, %0"];
	Node0xbcd4c0[shape=record, label="  %21 = shl i32 %20, 1"];
	Node0xbcd530[shape=record, label="  %22 = or i32 %3, %0"];
	Node0xbcd5a0[shape=record, label="  %23 = and i32 %7, %3"];
	Node0xbcd610[shape=record, label="  %24 = shl i32 %23, 1"];
	Node0xbcd680[shape=record, label="  %25 = xor i32 %24, -2"];
	Node0xbcd6f0[shape=record, label="  %26 = xor i32 %20, -1"];
	Node0xbcd760[shape=record, label="  %27 = xor i32 %22, -1"];
	Node0xbcd7d0[shape=record, label="  %28 = xor i32 %8, -1"];
	Node0xbcd840[shape=record, label="  %29 = and i32 %3, %0"];
	Node0xbcd8b0[shape=record, label="  %30 = add i32 %18, %27"];
	Node0xbcd920[shape=record, label="  %31 = add i32 %30, %28"];
	Node0xbcd9c0[shape=record, label="  %32 = mul i32 %31, -5"];
	Node0xbcdc40[shape=record, label="  %33 = sub i32 -2, %0"];
	Node0xbcdcb0[shape=record, label="  %34 = add i32 %33, %1"];
	Node0xbcdd20[shape=record, label="  %35 = add i32 %34, %2"];
	Node0xbcdd90[shape=record, label="  %36 = add i32 %35, %10"];
	Node0xbcde00[shape=record, label="  %37 = add i32 %36, %11"];
	Node0xbcde70[shape=record, label="  %38 = sub i32 %37, %3"];
	Node0xbcdee0[shape=record, label="  %39 = add i32 %38, %19"];
	Node0xbcdf50[shape=record, label="  %40 = add i32 %39, %17"];
	Node0xbcdfc0[shape=record, label="  %41 = sub i32 %40, %22"];
	Node0xbce030[shape=record, label="  %42 = add i32 %41, %26"];
	Node0xbce0a0[shape=record, label="  %43 = sub i32 %42, %23"];
	Node0xbce110[shape=record, label="  %44 = sub i32 %43, %29"];
	Node0xbce180[shape=record, label="  %45 = sub i32 %44, %13"];
	Node0xbce1f0[shape=record, label="  %46 = sub i32 %45, %15"];
	Node0xbce260[shape=record, label="  %47 = add i32 %46, %21"];
	Node0xbce2d0[shape=record, label="  %48 = add i32 %47, %25"];
	Node0xbce340[shape=record, label="  %49 = add i32 %48, %32"];
	Node0xbce3b0[shape=record, label="  %50 = icmp eq i32 %9, %49"];
	Node0xb6d268[shape=record, label="  %51 = select i1 %50, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0xbce850[shape=record, label="  %52 = tail call i32 @puts(i8* nonnull dereferenceable(1) %51)"];
	Node0xbce8a0[shape=record, label="  ret void"];
	Node0xbccd30 -> Node0xbccda0;
	Node0xbccda0 -> Node0xbcce10;
	Node0xbcce10 -> Node0xbcce80;
	Node0xbcce80 -> Node0xbccef0;
	Node0xbccef0 -> Node0xbccf60;
	Node0xbccf60 -> Node0xbccfd0;
	Node0xbccfd0 -> Node0xbcd070;
	Node0xbcd070 -> Node0xbcd110;
	Node0xbcd110 -> Node0xbcd180;
	Node0xbcd180 -> Node0xbcd1f0;
	Node0xbcd1f0 -> Node0xbcd260;
	Node0xbcd260 -> Node0xbcd300;
	Node0xbcd300 -> Node0xbcd370;
	Node0xbcd370 -> Node0xbcd3e0;
	Node0xbcd3e0 -> Node0xbcd450;
	Node0xbcd450 -> Node0xbcd4c0;
	Node0xbcd4c0 -> Node0xbcd530;
	Node0xbcd530 -> Node0xbcd5a0;
	Node0xbcd5a0 -> Node0xbcd610;
	Node0xbcd610 -> Node0xbcd680;
	Node0xbcd680 -> Node0xbcd6f0;
	Node0xbcd6f0 -> Node0xbcd760;
	Node0xbcd760 -> Node0xbcd7d0;
	Node0xbcd7d0 -> Node0xbcd840;
	Node0xbcd840 -> Node0xbcd8b0;
	Node0xbcd8b0 -> Node0xbcd920;
	Node0xbcd920 -> Node0xbcd9c0;
	Node0xbcd9c0 -> Node0xbcdc40;
	Node0xbcdc40 -> Node0xbcdcb0;
	Node0xbcdcb0 -> Node0xbcdd20;
	Node0xbcdd20 -> Node0xbcdd90;
	Node0xbcdd90 -> Node0xbcde00;
	Node0xbcde00 -> Node0xbcde70;
	Node0xbcde70 -> Node0xbcdee0;
	Node0xbcdee0 -> Node0xbcdf50;
	Node0xbcdf50 -> Node0xbcdfc0;
	Node0xbcdfc0 -> Node0xbce030;
	Node0xbce030 -> Node0xbce0a0;
	Node0xbce0a0 -> Node0xbce110;
	Node0xbce110 -> Node0xbce180;
	Node0xbce180 -> Node0xbce1f0;
	Node0xbce1f0 -> Node0xbce260;
	Node0xbce260 -> Node0xbce2d0;
	Node0xbce2d0 -> Node0xbce340;
	Node0xbce340 -> Node0xbce3b0;
	Node0xbce3b0 -> Node0xb6d268;
	Node0xb6d268 -> Node0xbce850;
	Node0xbce850 -> Node0xbce8a0;
edge [color=red]
	Node0xbccd30 -> Node0xbccda0;
	Node0xbcce10 -> Node0xbcce80;
	Node0xbcce80 -> Node0xbccef0;
	Node0xbccda0 -> Node0xbccef0;
	Node0xbccd30 -> Node0xbccf60;
	Node0xbccfd0 -> Node0xbcd070;
	Node0xbcd070 -> Node0xbcd110;
	Node0xbccda0 -> Node0xbcd180;
	Node0xbcd180 -> Node0xbcd1f0;
	Node0xbccd30 -> Node0xbcd260;
	Node0xbcd260 -> Node0xbcd300;
	Node0xbcd450 -> Node0xbcd4c0;
	Node0xbcce10 -> Node0xbcd5a0;
	Node0xbcd5a0 -> Node0xbcd610;
	Node0xbcd610 -> Node0xbcd680;
	Node0xbcd450 -> Node0xbcd6f0;
	Node0xbcd530 -> Node0xbcd760;
	Node0xbcce80 -> Node0xbcd7d0;
	Node0xbcd370 -> Node0xbcd8b0;
	Node0xbcd760 -> Node0xbcd8b0;
	Node0xbcd8b0 -> Node0xbcd920;
	Node0xbcd7d0 -> Node0xbcd920;
	Node0xbcd920 -> Node0xbcd9c0;
	Node0xbcdc40 -> Node0xbcdcb0;
	Node0xbcdcb0 -> Node0xbcdd20;
	Node0xbcdd20 -> Node0xbcdd90;
	Node0xbccf60 -> Node0xbcdd90;
	Node0xbcdd90 -> Node0xbcde00;
	Node0xbccfd0 -> Node0xbcde00;
	Node0xbcde00 -> Node0xbcde70;
	Node0xbcde70 -> Node0xbcdee0;
	Node0xbcd3e0 -> Node0xbcdee0;
	Node0xbcdee0 -> Node0xbcdf50;
	Node0xbcd300 -> Node0xbcdf50;
	Node0xbcdf50 -> Node0xbcdfc0;
	Node0xbcd530 -> Node0xbcdfc0;
	Node0xbcdfc0 -> Node0xbce030;
	Node0xbcd6f0 -> Node0xbce030;
	Node0xbce030 -> Node0xbce0a0;
	Node0xbcd5a0 -> Node0xbce0a0;
	Node0xbce0a0 -> Node0xbce110;
	Node0xbcd840 -> Node0xbce110;
	Node0xbce110 -> Node0xbce180;
	Node0xbcd110 -> Node0xbce180;
	Node0xbce180 -> Node0xbce1f0;
	Node0xbcd1f0 -> Node0xbce1f0;
	Node0xbce1f0 -> Node0xbce260;
	Node0xbcd4c0 -> Node0xbce260;
	Node0xbce260 -> Node0xbce2d0;
	Node0xbcd680 -> Node0xbce2d0;
	Node0xbce2d0 -> Node0xbce340;
	Node0xbcd9c0 -> Node0xbce340;
	Node0xbccef0 -> Node0xbce3b0;
	Node0xbce340 -> Node0xbce3b0;
	Node0xbce3b0 -> Node0xb6d268;
	Node0xb6d268 -> Node0xbce850;
}
