digraph "DFG for'crackme' function" {
	Node0x10dc740[shape=record, label="  %5 = and i32 %2, %1"];
	Node0x10dcdc0[shape=record, label="  %6 = add i32 %2, 1"];
	Node0x10dce30[shape=record, label="  %7 = add i32 %6, %5"];
	Node0x10dcea0[shape=record, label="  %8 = xor i32 %3, %0"];
	Node0x10dcf10[shape=record, label="  %9 = sub i32 %7, %8"];
	Node0x10dcf80[shape=record, label="  %10 = xor i32 %2, %1"];
	Node0x10dcff0[shape=record, label="  %11 = shl i32 %10, 1"];
	Node0x10dd090[shape=record, label="  %12 = xor i32 %11, -2"];
	Node0x10dd130[shape=record, label="  %13 = shl i32 %10, 2"];
	Node0x10dd1a0[shape=record, label="  %14 = shl i32 %1, 1"];
	Node0x10dd210[shape=record, label="  %15 = xor i32 %14, -2"];
	Node0x10dd2b0[shape=record, label="  %16 = xor i32 %2, -1"];
	Node0x10dd320[shape=record, label="  %17 = or i32 %16, %1"];
	Node0x10dd390[shape=record, label="  %18 = or i32 %2, %1"];
	Node0x10dd400[shape=record, label="  %19 = shl i32 %17, 1"];
	Node0x10dd470[shape=record, label="  %20 = xor i32 %19, -2"];
	Node0x10dd4e0[shape=record, label="  %21 = and i32 %16, %1"];
	Node0x10dd580[shape=record, label="  %22 = mul i32 %21, -5"];
	Node0x10dd5f0[shape=record, label="  %23 = xor i32 %0, -1"];
	Node0x10dd660[shape=record, label="  %24 = or i32 %23, %3"];
	Node0x10dd6d0[shape=record, label="  %25 = and i32 %3, %0"];
	Node0x10dd740[shape=record, label="  %26 = shl i32 %25, 1"];
	Node0x10dd7b0[shape=record, label="  %27 = xor i32 %26, -2"];
	Node0x10dd820[shape=record, label="  %28 = or i32 %3, %0"];
	Node0x10dd890[shape=record, label="  %29 = shl i32 %24, 1"];
	Node0x10dd900[shape=record, label="  %30 = xor i32 %29, -2"];
	Node0x10dd970[shape=record, label="  %31 = and i32 %23, %3"];
	Node0x10dda10[shape=record, label="  %32 = mul i32 %31, -3"];
	Node0x10ddc90[shape=record, label="  %33 = sub i32 %28, %0"];
	Node0x10ddd00[shape=record, label="  %34 = shl i32 %33, 1"];
	Node0x10ddd70[shape=record, label="  %35 = sub i32 1, %2"];
	Node0x10ddde0[shape=record, label="  %36 = sub i32 %35, %15"];
	Node0x10dde50[shape=record, label="  %37 = sub i32 %36, %17"];
	Node0x10ddec0[shape=record, label="  %38 = add i32 %37, %18"];
	Node0x10ddf30[shape=record, label="  %39 = add i32 %38, %13"];
	Node0x10ddfa0[shape=record, label="  %40 = add i32 %39, %22"];
	Node0x10de010[shape=record, label="  %41 = sub i32 %40, %24"];
	Node0x10de080[shape=record, label="  %42 = sub i32 %41, %8"];
	Node0x10de0f0[shape=record, label="  %43 = add i32 %42, %28"];
	Node0x10de160[shape=record, label="  %44 = add i32 %43, %25"];
	Node0x10de1d0[shape=record, label="  %45 = add i32 %44, %12"];
	Node0x10de240[shape=record, label="  %46 = sub i32 %45, %20"];
	Node0x10de2b0[shape=record, label="  %47 = add i32 %46, %32"];
	Node0x10de320[shape=record, label="  %48 = add i32 %47, %27"];
	Node0x10de390[shape=record, label="  %49 = sub i32 %48, %30"];
	Node0x10de400[shape=record, label="  %50 = add i32 %49, %34"];
	Node0x10de470[shape=record, label="  %51 = icmp eq i32 %9, %50"];
	Node0x107d268[shape=record, label="  %52 = select i1 %51, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0x10de910[shape=record, label="  %53 = tail call i32 @puts(i8* nonnull dereferenceable(1) %52)"];
	Node0x10de960[shape=record, label="  ret void"];
	Node0x10dc740 -> Node0x10dcdc0;
	Node0x10dcdc0 -> Node0x10dce30;
	Node0x10dce30 -> Node0x10dcea0;
	Node0x10dcea0 -> Node0x10dcf10;
	Node0x10dcf10 -> Node0x10dcf80;
	Node0x10dcf80 -> Node0x10dcff0;
	Node0x10dcff0 -> Node0x10dd090;
	Node0x10dd090 -> Node0x10dd130;
	Node0x10dd130 -> Node0x10dd1a0;
	Node0x10dd1a0 -> Node0x10dd210;
	Node0x10dd210 -> Node0x10dd2b0;
	Node0x10dd2b0 -> Node0x10dd320;
	Node0x10dd320 -> Node0x10dd390;
	Node0x10dd390 -> Node0x10dd400;
	Node0x10dd400 -> Node0x10dd470;
	Node0x10dd470 -> Node0x10dd4e0;
	Node0x10dd4e0 -> Node0x10dd580;
	Node0x10dd580 -> Node0x10dd5f0;
	Node0x10dd5f0 -> Node0x10dd660;
	Node0x10dd660 -> Node0x10dd6d0;
	Node0x10dd6d0 -> Node0x10dd740;
	Node0x10dd740 -> Node0x10dd7b0;
	Node0x10dd7b0 -> Node0x10dd820;
	Node0x10dd820 -> Node0x10dd890;
	Node0x10dd890 -> Node0x10dd900;
	Node0x10dd900 -> Node0x10dd970;
	Node0x10dd970 -> Node0x10dda10;
	Node0x10dda10 -> Node0x10ddc90;
	Node0x10ddc90 -> Node0x10ddd00;
	Node0x10ddd00 -> Node0x10ddd70;
	Node0x10ddd70 -> Node0x10ddde0;
	Node0x10ddde0 -> Node0x10dde50;
	Node0x10dde50 -> Node0x10ddec0;
	Node0x10ddec0 -> Node0x10ddf30;
	Node0x10ddf30 -> Node0x10ddfa0;
	Node0x10ddfa0 -> Node0x10de010;
	Node0x10de010 -> Node0x10de080;
	Node0x10de080 -> Node0x10de0f0;
	Node0x10de0f0 -> Node0x10de160;
	Node0x10de160 -> Node0x10de1d0;
	Node0x10de1d0 -> Node0x10de240;
	Node0x10de240 -> Node0x10de2b0;
	Node0x10de2b0 -> Node0x10de320;
	Node0x10de320 -> Node0x10de390;
	Node0x10de390 -> Node0x10de400;
	Node0x10de400 -> Node0x10de470;
	Node0x10de470 -> Node0x107d268;
	Node0x107d268 -> Node0x10de910;
	Node0x10de910 -> Node0x10de960;
edge [color=red]
	Node0x10dcdc0 -> Node0x10dce30;
	Node0x10dc740 -> Node0x10dce30;
	Node0x10dce30 -> Node0x10dcf10;
	Node0x10dcea0 -> Node0x10dcf10;
	Node0x10dcf80 -> Node0x10dcff0;
	Node0x10dcff0 -> Node0x10dd090;
	Node0x10dcf80 -> Node0x10dd130;
	Node0x10dd1a0 -> Node0x10dd210;
	Node0x10dd2b0 -> Node0x10dd320;
	Node0x10dd320 -> Node0x10dd400;
	Node0x10dd400 -> Node0x10dd470;
	Node0x10dd2b0 -> Node0x10dd4e0;
	Node0x10dd4e0 -> Node0x10dd580;
	Node0x10dd5f0 -> Node0x10dd660;
	Node0x10dd6d0 -> Node0x10dd740;
	Node0x10dd740 -> Node0x10dd7b0;
	Node0x10dd660 -> Node0x10dd890;
	Node0x10dd890 -> Node0x10dd900;
	Node0x10dd5f0 -> Node0x10dd970;
	Node0x10dd970 -> Node0x10dda10;
	Node0x10dd820 -> Node0x10ddc90;
	Node0x10ddc90 -> Node0x10ddd00;
	Node0x10ddd70 -> Node0x10ddde0;
	Node0x10dd210 -> Node0x10ddde0;
	Node0x10ddde0 -> Node0x10dde50;
	Node0x10dd320 -> Node0x10dde50;
	Node0x10dde50 -> Node0x10ddec0;
	Node0x10dd390 -> Node0x10ddec0;
	Node0x10ddec0 -> Node0x10ddf30;
	Node0x10dd130 -> Node0x10ddf30;
	Node0x10ddf30 -> Node0x10ddfa0;
	Node0x10dd580 -> Node0x10ddfa0;
	Node0x10ddfa0 -> Node0x10de010;
	Node0x10dd660 -> Node0x10de010;
	Node0x10de010 -> Node0x10de080;
	Node0x10dcea0 -> Node0x10de080;
	Node0x10de080 -> Node0x10de0f0;
	Node0x10dd820 -> Node0x10de0f0;
	Node0x10de0f0 -> Node0x10de160;
	Node0x10dd6d0 -> Node0x10de160;
	Node0x10de160 -> Node0x10de1d0;
	Node0x10dd090 -> Node0x10de1d0;
	Node0x10de1d0 -> Node0x10de240;
	Node0x10dd470 -> Node0x10de240;
	Node0x10de240 -> Node0x10de2b0;
	Node0x10dda10 -> Node0x10de2b0;
	Node0x10de2b0 -> Node0x10de320;
	Node0x10dd7b0 -> Node0x10de320;
	Node0x10de320 -> Node0x10de390;
	Node0x10dd900 -> Node0x10de390;
	Node0x10de390 -> Node0x10de400;
	Node0x10ddd00 -> Node0x10de400;
	Node0x10dcf10 -> Node0x10de470;
	Node0x10de400 -> Node0x10de470;
	Node0x10de470 -> Node0x107d268;
	Node0x107d268 -> Node0x10de910;
}
