digraph "DFG for'crackme' function" {
	Node0xffd0f0[shape=record, label="  %5 = sub i32 -3, %1"];
	Node0xffd160[shape=record, label="  %6 = xor i32 %3, %0"];
	Node0xffd1d0[shape=record, label="  %7 = sub i32 %5, %6"];
	Node0xffd270[shape=record, label="  %8 = shl i32 %6, 1"];
	Node0xffd310[shape=record, label="  %9 = xor i32 %8, -2"];
	Node0xffd380[shape=record, label="  %10 = sub i32 %7, %9"];
	Node0xffd420[shape=record, label="  %11 = xor i32 %1, -1"];
	Node0xffd490[shape=record, label="  %12 = or i32 %11, %2"];
	Node0xffd500[shape=record, label="  %13 = shl i32 %1, 1"];
	Node0xffd570[shape=record, label="  %14 = or i32 %2, %1"];
	Node0xffd5e0[shape=record, label="  %15 = xor i32 %2, %1"];
	Node0xffd650[shape=record, label="  %16 = and i32 %2, %1"];
	Node0xffd6c0[shape=record, label="  %17 = xor i32 %16, -1"];
	Node0xffd730[shape=record, label="  %18 = shl i32 %14, 1"];
	Node0xffd7a0[shape=record, label="  %19 = xor i32 %18, -2"];
	Node0xffd840[shape=record, label="  %20 = mul i32 %16, 3"];
	Node0xffd8b0[shape=record, label="  %21 = and i32 %3, %0"];
	Node0xffd920[shape=record, label="  %22 = shl i32 %21, 1"];
	Node0xffd990[shape=record, label="  %23 = xor i32 %22, -2"];
	Node0xffda00[shape=record, label="  %24 = xor i32 %3, -1"];
	Node0xffdaa0[shape=record, label="  %25 = xor i32 %0, 2147483647"];
	Node0xffdb10[shape=record, label="  %26 = or i32 %3, %0"];
	Node0xffdb80[shape=record, label="  %27 = and i32 %24, %0"];
	Node0xffdbf0[shape=record, label="  %28 = and i32 %25, %3"];
	Node0xffdc60[shape=record, label="  %29 = shl i32 %28, 1"];
	Node0xffdcd0[shape=record, label="  %30 = add i32 %13, %0"];
	Node0xffdd40[shape=record, label="  %31 = add i32 %30, %12"];
	Node0xffddb0[shape=record, label="  %32 = sub i32 %14, %31"];
	Node0xffe030[shape=record, label="  %33 = add i32 %32, %15"];
	Node0xffe0a0[shape=record, label="  %34 = add i32 %33, %17"];
	Node0xffe110[shape=record, label="  %35 = sub i32 %34, %3"];
	Node0xffe180[shape=record, label="  %36 = add i32 %35, %24"];
	Node0xffe1f0[shape=record, label="  %37 = add i32 %36, %20"];
	Node0xffe260[shape=record, label="  %38 = add i32 %37, %26"];
	Node0xffe2d0[shape=record, label="  %39 = add i32 %38, %27"];
	Node0xffe340[shape=record, label="  %40 = add i32 %39, %19"];
	Node0xffe3b0[shape=record, label="  %41 = add i32 %40, %29"];
	Node0xffe420[shape=record, label="  %42 = sub i32 %41, %23"];
	Node0xffe490[shape=record, label="  %43 = icmp eq i32 %10, %42"];
	Node0xf9d268[shape=record, label="  %44 = select i1 %43, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0xffe930[shape=record, label="  %45 = tail call i32 @puts(i8* nonnull dereferenceable(1) %44)"];
	Node0xffe980[shape=record, label="  ret void"];
	Node0xffd0f0 -> Node0xffd160;
	Node0xffd160 -> Node0xffd1d0;
	Node0xffd1d0 -> Node0xffd270;
	Node0xffd270 -> Node0xffd310;
	Node0xffd310 -> Node0xffd380;
	Node0xffd380 -> Node0xffd420;
	Node0xffd420 -> Node0xffd490;
	Node0xffd490 -> Node0xffd500;
	Node0xffd500 -> Node0xffd570;
	Node0xffd570 -> Node0xffd5e0;
	Node0xffd5e0 -> Node0xffd650;
	Node0xffd650 -> Node0xffd6c0;
	Node0xffd6c0 -> Node0xffd730;
	Node0xffd730 -> Node0xffd7a0;
	Node0xffd7a0 -> Node0xffd840;
	Node0xffd840 -> Node0xffd8b0;
	Node0xffd8b0 -> Node0xffd920;
	Node0xffd920 -> Node0xffd990;
	Node0xffd990 -> Node0xffda00;
	Node0xffda00 -> Node0xffdaa0;
	Node0xffdaa0 -> Node0xffdb10;
	Node0xffdb10 -> Node0xffdb80;
	Node0xffdb80 -> Node0xffdbf0;
	Node0xffdbf0 -> Node0xffdc60;
	Node0xffdc60 -> Node0xffdcd0;
	Node0xffdcd0 -> Node0xffdd40;
	Node0xffdd40 -> Node0xffddb0;
	Node0xffddb0 -> Node0xffe030;
	Node0xffe030 -> Node0xffe0a0;
	Node0xffe0a0 -> Node0xffe110;
	Node0xffe110 -> Node0xffe180;
	Node0xffe180 -> Node0xffe1f0;
	Node0xffe1f0 -> Node0xffe260;
	Node0xffe260 -> Node0xffe2d0;
	Node0xffe2d0 -> Node0xffe340;
	Node0xffe340 -> Node0xffe3b0;
	Node0xffe3b0 -> Node0xffe420;
	Node0xffe420 -> Node0xffe490;
	Node0xffe490 -> Node0xf9d268;
	Node0xf9d268 -> Node0xffe930;
	Node0xffe930 -> Node0xffe980;
edge [color=red]
	Node0xffd0f0 -> Node0xffd1d0;
	Node0xffd160 -> Node0xffd1d0;
	Node0xffd160 -> Node0xffd270;
	Node0xffd270 -> Node0xffd310;
	Node0xffd1d0 -> Node0xffd380;
	Node0xffd310 -> Node0xffd380;
	Node0xffd420 -> Node0xffd490;
	Node0xffd650 -> Node0xffd6c0;
	Node0xffd570 -> Node0xffd730;
	Node0xffd730 -> Node0xffd7a0;
	Node0xffd650 -> Node0xffd840;
	Node0xffd8b0 -> Node0xffd920;
	Node0xffd920 -> Node0xffd990;
	Node0xffda00 -> Node0xffdb80;
	Node0xffdaa0 -> Node0xffdbf0;
	Node0xffdbf0 -> Node0xffdc60;
	Node0xffd500 -> Node0xffdcd0;
	Node0xffdcd0 -> Node0xffdd40;
	Node0xffd490 -> Node0xffdd40;
	Node0xffd570 -> Node0xffddb0;
	Node0xffdd40 -> Node0xffddb0;
	Node0xffddb0 -> Node0xffe030;
	Node0xffd5e0 -> Node0xffe030;
	Node0xffe030 -> Node0xffe0a0;
	Node0xffd6c0 -> Node0xffe0a0;
	Node0xffe0a0 -> Node0xffe110;
	Node0xffe110 -> Node0xffe180;
	Node0xffda00 -> Node0xffe180;
	Node0xffe180 -> Node0xffe1f0;
	Node0xffd840 -> Node0xffe1f0;
	Node0xffe1f0 -> Node0xffe260;
	Node0xffdb10 -> Node0xffe260;
	Node0xffe260 -> Node0xffe2d0;
	Node0xffdb80 -> Node0xffe2d0;
	Node0xffe2d0 -> Node0xffe340;
	Node0xffd7a0 -> Node0xffe340;
	Node0xffe340 -> Node0xffe3b0;
	Node0xffdc60 -> Node0xffe3b0;
	Node0xffe3b0 -> Node0xffe420;
	Node0xffd990 -> Node0xffe420;
	Node0xffd380 -> Node0xffe490;
	Node0xffe420 -> Node0xffe490;
	Node0xffe490 -> Node0xf9d268;
	Node0xf9d268 -> Node0xffe930;
}
