; ModuleID = '../.././c_source_file/1811_opaque_predict_crackme.c'
source_filename = "../.././c_source_file/1811_opaque_predict_crackme.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str.2 = private unnamed_addr constant [9 x i8] c"%d %d %d\00", align 1
@str = private unnamed_addr constant [4 x i8] c"bad\00", align 1
@str.3 = private unnamed_addr constant [5 x i8] c"good\00", align 1

; Function Attrs: nofree nounwind uwtable
define dso_local void @crackme(i32 %0, i32 %1, i32 %2) local_unnamed_addr #0 {
  %4 = or i32 %2, %0
  %5 = xor i32 %4, -1
  %6 = xor i32 %1, %0
  %7 = or i32 %6, %5
  %8 = and i32 %4, %1
  %9 = and i32 %2, %1
  %10 = and i32 %9, %0
  %11 = xor i32 %0, -1
  %12 = xor i32 %2, %1
  %13 = and i32 %12, %11
  %14 = or i32 %10, %13
  %15 = and i32 %2, %0
  %16 = xor i32 %1, -1
  %17 = or i32 %16, %0
  %18 = xor i32 %15, %17
  %19 = or i32 %2, %1
  %20 = xor i32 %19, %0
  %21 = xor i32 %10, -1
  %22 = xor i32 %20, %21
  %23 = add i32 %4, 1
  %24 = and i32 %19, %11
  %25 = xor i32 %2, -1
  %26 = and i32 %25, %1
  %27 = xor i32 %26, -1
  %28 = or i32 %27, %0
  %29 = xor i32 %15, -1
  %30 = and i32 %29, %16
  %31 = and i32 %25, %0
  %32 = or i32 %31, %1
  %33 = and i32 %16, %0
  %34 = or i32 %33, %2
  %35 = and i32 %16, %2
  %36 = and i32 %35, %11
  %37 = or i32 %12, %11
  %38 = xor i32 %36, %37
  %39 = shl i32 %38, 1
  %40 = or i32 %26, %11
  %41 = or i32 %10, %20
  %42 = shl i32 %41, 1
  %43 = or i32 %1, %0
  %44 = xor i32 %43, -1
  %45 = or i32 %12, %44
  %46 = xor i32 %37, -1
  %47 = or i32 %36, %46
  %48 = and i32 %43, %25
  %49 = xor i32 %6, -1
  %50 = xor i32 %2, %0
  %51 = or i32 %50, %49
  %52 = xor i32 %33, -1
  %53 = xor i32 %52, %2
  %54 = and i32 %43, %2
  %55 = xor i32 %12, %0
  %56 = shl i32 %55, 1
  %57 = xor i32 %17, -1
  %58 = or i32 %15, %57
  %59 = or i32 %15, %1
  %60 = and i32 %52, %2
  %61 = xor i32 %12, -1
  %62 = and i32 %61, %52
  %63 = or i32 %25, %0
  %64 = xor i32 %63, %1
  %65 = xor i32 %63, -1
  %66 = xor i32 %65, %1
  %67 = xor i32 %9, -1
  %68 = xor i32 %31, %67
  %69 = or i32 %16, %2
  %70 = and i32 %69, %0
  %71 = xor i32 %70, -1
  %72 = xor i32 %36, %71
  %73 = and i32 %1, %0
  %74 = xor i32 %19, -1
  %75 = or i32 %73, %74
  %76 = xor i32 %31, -1
  %77 = xor i32 %76, %1
  %78 = shl i32 %77, 2
  %79 = and i32 %76, %49
  %80 = and i32 %61, %11
  %81 = shl i32 %80, 1
  %82 = xor i32 %73, -1
  %83 = xor i32 %50, -1
  %84 = and i32 %83, %82
  %85 = and i32 %63, %1
  %86 = and i32 %50, %49
  %87 = xor i32 %15, %1
  %88 = and i32 %82, %2
  %89 = and i32 %35, %0
  %90 = or i32 %89, %55
  %91 = or i32 %83, %16
  %92 = or i32 %25, %1
  %93 = xor i32 %92, -1
  %94 = or i32 %93, %11
  %95 = and i32 %27, %11
  %96 = or i32 %12, %0
  %97 = xor i32 %89, %96
  %98 = or i32 %31, %93
  %99 = or i32 %15, %26
  %100 = or i32 %10, %24
  %101 = and i32 %12, %43
  %102 = shl i32 %101, 1
  %103 = and i32 %9, %11
  %104 = and i32 %19, %0
  %105 = xor i32 %103, -1
  %106 = xor i32 %104, %105
  %107 = or i32 %50, %6
  %108 = and i32 %6, %25
  %109 = and i32 %12, %52
  %110 = shl i32 %109, 1
  %111 = shl i32 %25, 1
  %112 = or i32 %73, %65
  %113 = or i32 %50, %57
  %114 = and i32 %69, %11
  %115 = or i32 %89, %114
  %116 = shl i32 %115, 1
  %117 = or i32 %83, %44
  %118 = xor i32 %73, %2
  %119 = shl i32 %118, 2
  %120 = and i32 %4, %16
  %121 = or i32 %93, %0
  %122 = xor i32 %9, %0
  %123 = and i32 %17, %83
  %124 = or i32 %73, %93
  %125 = or i32 %15, %49
  %126 = and i32 %63, %49
  %127 = and i32 %67, %0
  %128 = and i32 %83, %52
  %129 = or i32 %73, %5
  %130 = or i32 %92, %0
  %131 = or i32 %83, %1
  %132 = and i32 %6, %2
  %133 = or i32 %50, %1
  %134 = or i32 %74, %11
  %135 = and i32 %61, %0
  %136 = and i32 %76, %16
  %137 = shl i32 %19, 1
  %138 = or i32 %26, %33
  %139 = and i32 %6, %83
  %140 = xor i32 %31, %1
  %141 = or i32 %61, %0
  %142 = or i32 %31, %16
  %143 = shl i32 %142, 1
  %144 = and i32 %12, %0
  %145 = or i32 %25, %57
  %146 = xor i32 %69, %0
  %147 = or i32 %89, %146
  %148 = shl i32 %147, 1
  %149 = xor i32 %5, %1
  %150 = xor i32 %15, %19
  %151 = or i32 %9, %33
  %152 = or i32 %73, %61
  %153 = shl i32 %152, 1
  %154 = or i32 %61, %44
  %155 = and i32 %29, %49
  %156 = or i32 %65, %1
  %157 = or i32 %6, %2
  %158 = or i32 %6, %25
  %159 = or i32 %50, %33
  %160 = xor i32 %4, %73
  %161 = and i32 %83, %49
  %162 = xor i32 %74, %0
  %163 = or i32 %27, %11
  %164 = or i32 %92, %11
  %165 = or i32 %50, %73
  %166 = or i32 %12, %33
  %167 = and i32 %4, %49
  %168 = xor i32 %57, %2
  %169 = add i32 %26, 1
  %170 = xor i32 %67, %0
  %171 = xor i32 %15, %43
  %172 = and i32 %61, %82
  %173 = or i32 %5, %1
  %174 = and i32 %92, %0
  %175 = or i32 %19, %11
  %176 = xor i32 %93, %0
  %177 = shl i32 %176, 1
  %178 = xor i32 %43, %2
  %179 = shl i32 %178, 1
  %180 = or i32 %31, %9
  %181 = xor i32 %61, %0
  %182 = or i32 %26, %0
  %183 = or i32 %65, %49
  %184 = shl i32 %183, 1
  %185 = xor i32 %144, %105
  %186 = xor i32 %33, %67
  %187 = shl i32 %186, 1
  %188 = xor i32 %10, %55
  %189 = and i32 %25, %49
  %190 = and i32 %50, %82
  %191 = shl i32 %190, 1
  %192 = xor i32 %29, %1
  %193 = or i32 %83, %49
  %194 = or i32 %67, %11
  %195 = and i32 %6, %29
  %196 = xor i32 %17, %2
  %197 = and i32 %17, %61
  %198 = and i32 %83, %16
  %199 = or i32 %15, %16
  %200 = and i32 %50, %43
  %201 = or i32 %83, %57
  %202 = xor i32 %31, %92
  %203 = or i32 %12, %73
  %204 = xor i32 %89, -1
  %205 = xor i32 %146, %204
  %206 = or i32 %73, %2
  %207 = or i32 %61, %11
  %208 = shl i32 %207, 1
  %209 = or i32 %15, %44
  %210 = or i32 %33, %83
  %211 = shl i32 %210, 1
  %212 = xor i32 %15, %27
  %213 = or i32 %36, %70
  %214 = or i32 %61, %57
  %215 = or i32 %25, %49
  %216 = and i32 %25, %52
  %217 = and i32 %17, %25
  %218 = and i32 %76, %1
  %219 = and i32 %43, %83
  %220 = shl i32 %219, 1
  %221 = xor i32 %82, %2
  %222 = or i32 %49, %2
  %223 = xor i32 %114, %204
  %224 = and i32 %25, %82
  %225 = xor i32 %44, %2
  %226 = or i32 %5, %16
  %227 = xor i32 %24, %21
  %228 = and i32 %12, %17
  %229 = xor i32 %13, %21
  %230 = or i32 %74, %0
  %231 = and i32 %12, %82
  %232 = or i32 %103, %144
  %233 = or i32 %33, %25
  %234 = or i32 %44, %2
  %235 = shl i32 %73, 1
  %236 = or i32 %9, %0
  %237 = or i32 %19, %0
  %238 = or i32 %15, %74
  %239 = and i32 %50, %17
  %240 = and i32 %63, %16
  %241 = shl i32 %240, 1
  %242 = or i32 %50, %16
  %243 = xor i32 %33, %27
  %244 = shl i32 %243, 1
  %245 = add i32 %19, 1
  %246 = xor i32 %96, -1
  %247 = or i32 %89, %246
  %248 = and i32 %74, %11
  %249 = and i32 %26, %11
  %250 = mul i32 %249, -14
  %251 = and i32 %74, %0
  %252 = and i32 %26, %0
  %253 = mul i32 %252, 7
  %254 = and i32 %93, %11
  %255 = mul i32 %254, 12
  %256 = mul i32 %103, -15
  %257 = and i32 %93, %0
  %258 = sub i32 -2, %92
  %259 = add i32 %258, %76
  %260 = add i32 %259, %217
  %261 = add i32 %260, %9
  %262 = add i32 %261, %108
  %263 = add i32 %262, %48
  %264 = add i32 %263, %195
  %265 = add i32 %264, %231
  %266 = add i32 %265, %194
  %267 = add i32 %266, %172
  %268 = add i32 %267, %167
  %269 = add i32 %268, %164
  %270 = add i32 %269, %156
  %271 = add i32 %270, %139
  %272 = add i32 %271, %130
  %273 = add i32 %272, %113
  %274 = add i32 %273, %99
  %275 = add i32 %274, %87
  %276 = add i32 %275, %64
  %277 = add i32 %276, %24
  %278 = shl i32 %277, 1
  %279 = sub i32 %203, %4
  %280 = sub i32 %279, %228
  %281 = sub i32 %280, %174
  %282 = sub i32 %281, %68
  %283 = mul i32 %282, 5
  %284 = sub i32 %10, %251
  %285 = add i32 %284, %98
  %286 = add i32 %285, %8
  %287 = mul i32 %286, 3
  %288 = add i32 %257, %248
  %289 = shl i32 %288, 3
  %290 = add i32 %28, 1073741823
  %291 = add i32 %290, %134
  %292 = shl i32 %291, 2
  %293 = add i32 %0, -5
  %294 = add i32 %293, %2
  %295 = sub i32 %294, %6
  %296 = add i32 %295, %82
  %297 = add i32 %296, %23
  %298 = add i32 %297, %34
  %299 = add i32 %298, %53
  %300 = sub i32 %299, %54
  %301 = add i32 %300, %60
  %302 = sub i32 %301, %26
  %303 = add i32 %302, %88
  %304 = sub i32 %303, %111
  %305 = add i32 %304, %132
  %306 = add i32 %305, %145
  %307 = sub i32 %306, %157
  %308 = add i32 %307, %158
  %309 = add i32 %308, %12
  %310 = sub i32 %309, %168
  %311 = add i32 %310, %169
  %312 = add i32 %311, %67
  %313 = add i32 %312, %50
  %314 = sub i32 %313, %31
  %315 = add i32 %314, %92
  %316 = sub i32 %315, %189
  %317 = add i32 %316, %196
  %318 = add i32 %317, %206
  %319 = add i32 %318, %215
  %320 = add i32 %319, %216
  %321 = add i32 %320, %221
  %322 = sub i32 %321, %222
  %323 = add i32 %322, %224
  %324 = sub i32 %323, %225
  %325 = add i32 %324, %63
  %326 = add i32 %325, %233
  %327 = sub i32 %326, %234
  %328 = sub i32 %327, %235
  %329 = add i32 %328, %245
  %330 = sub i32 %329, %18
  %331 = sub i32 %330, %30
  %332 = sub i32 %331, %32
  %333 = add i32 %332, %40
  %334 = sub i32 %333, %45
  %335 = sub i32 %334, %51
  %336 = sub i32 %335, %58
  %337 = add i32 %336, %59
  %338 = add i32 %337, %62
  %339 = add i32 %338, %66
  %340 = sub i32 %339, %75
  %341 = sub i32 %340, %79
  %342 = sub i32 %341, %84
  %343 = sub i32 %342, %85
  %344 = sub i32 %343, %86
  %345 = sub i32 %344, %91
  %346 = add i32 %345, %94
  %347 = add i32 %346, %95
  %348 = sub i32 %347, %107
  %349 = add i32 %348, %112
  %350 = add i32 %349, %117
  %351 = sub i32 %350, %119
  %352 = sub i32 %351, %120
  %353 = add i32 %352, %121
  %354 = add i32 %353, %122
  %355 = add i32 %354, %123
  %356 = sub i32 %355, %124
  %357 = sub i32 %356, %125
  %358 = sub i32 %357, %126
  %359 = add i32 %358, %127
  %360 = sub i32 %359, %128
  %361 = add i32 %360, %129
  %362 = sub i32 %361, %131
  %363 = sub i32 %362, %133
  %364 = add i32 %363, %135
  %365 = sub i32 %364, %136
  %366 = sub i32 %365, %137
  %367 = add i32 %366, %138
  %368 = add i32 %367, %140
  %369 = sub i32 %368, %141
  %370 = sub i32 %369, %144
  %371 = sub i32 %370, %149
  %372 = add i32 %371, %150
  %373 = sub i32 %372, %151
  %374 = sub i32 %373, %154
  %375 = sub i32 %374, %37
  %376 = add i32 %375, %155
  %377 = sub i32 %376, %159
  %378 = add i32 %377, %160
  %379 = add i32 %378, %161
  %380 = add i32 %379, %162
  %381 = add i32 %380, %163
  %382 = add i32 %381, %165
  %383 = sub i32 %382, %166
  %384 = add i32 %383, %170
  %385 = sub i32 %384, %171
  %386 = sub i32 %385, %173
  %387 = add i32 %386, %175
  %388 = sub i32 %387, %179
  %389 = sub i32 %388, %13
  %390 = add i32 %389, %180
  %391 = add i32 %390, %181
  %392 = sub i32 %391, %182
  %393 = add i32 %392, %192
  %394 = sub i32 %393, %20
  %395 = sub i32 %394, %193
  %396 = add i32 %395, %197
  %397 = sub i32 %396, %198
  %398 = sub i32 %397, %199
  %399 = sub i32 %398, %200
  %400 = add i32 %399, %201
  %401 = add i32 %400, %202
  %402 = sub i32 %401, %209
  %403 = add i32 %402, %212
  %404 = sub i32 %403, %214
  %405 = sub i32 %404, %218
  %406 = sub i32 %405, %226
  %407 = sub i32 %406, %230
  %408 = sub i32 %407, %236
  %409 = add i32 %408, %237
  %410 = sub i32 %409, %238
  %411 = sub i32 %410, %239
  %412 = add i32 %411, %242
  %413 = sub i32 %412, %14
  %414 = add i32 %413, %22
  %415 = sub i32 %414, %47
  %416 = sub i32 %415, %56
  %417 = sub i32 %416, %72
  %418 = sub i32 %417, %78
  %419 = sub i32 %418, %81
  %420 = sub i32 %419, %90
  %421 = sub i32 %420, %97
  %422 = sub i32 %421, %100
  %423 = sub i32 %422, %102
  %424 = sub i32 %423, %106
  %425 = sub i32 %424, %110
  %426 = sub i32 %425, %143
  %427 = sub i32 %426, %153
  %428 = sub i32 %427, %177
  %429 = sub i32 %428, %184
  %430 = sub i32 %429, %185
  %431 = sub i32 %430, %187
  %432 = add i32 %431, %188
  %433 = sub i32 %432, %191
  %434 = add i32 %433, %205
  %435 = sub i32 %434, %208
  %436 = sub i32 %435, %211
  %437 = add i32 %436, %213
  %438 = sub i32 %437, %220
  %439 = sub i32 %438, %223
  %440 = sub i32 %439, %227
  %441 = sub i32 %440, %229
  %442 = sub i32 %441, %232
  %443 = sub i32 %442, %241
  %444 = sub i32 %443, %244
  %445 = sub i32 %444, %247
  %446 = add i32 %445, %250
  %447 = add i32 %446, %253
  %448 = add i32 %447, %255
  %449 = add i32 %448, %256
  %450 = sub i32 %449, %39
  %451 = sub i32 %450, %42
  %452 = sub i32 %451, %116
  %453 = sub i32 %452, %148
  %454 = add i32 %453, %289
  %455 = add i32 %454, %292
  %456 = add i32 %455, %287
  %457 = add i32 %456, %283
  %458 = add i32 %457, %278
  %459 = icmp eq i32 %7, %458
  %460 = select i1 %459, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)
  %461 = tail call i32 @puts(i8* nonnull dereferenceable(1) %460)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #1 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %4) #5
  %5 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %5) #5
  %6 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %6) #5
  %7 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3)
  %8 = load i32, i32* %1, align 4, !tbaa !2
  %9 = load i32, i32* %2, align 4, !tbaa !2
  %10 = load i32, i32* %3, align 4, !tbaa !2
  call void @crackme(i32 %8, i32 %9, i32 %10)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %6) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %5) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %4) #5
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare dso_local i32 @__isoc99_scanf(i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #4

attributes #0 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Ubuntu clang version 10.0.1-++20200708122807+ef32c611aa2-1~exp1~20200707223407.61 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
