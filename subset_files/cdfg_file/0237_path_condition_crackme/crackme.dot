digraph "DFG for'crackme' function" {
	Node0xb7db00[shape=record, label="  %3 = xor i32 %1, -1"];
	Node0xb7db70[shape=record, label="  %4 = or i32 %3, %0"];
	Node0xb7dc30[shape=record, label="  %5 = xor i32 %1, %0"];
	Node0xb7dca0[shape=record, label="  %6 = sub i32 %5, %4"];
	Node0xb7dd10[shape=record, label="  %7 = add i32 %1, 1"];
	Node0xb7dd80[shape=record, label="  %8 = or i32 %1, %0"];
	Node0xb7ddf0[shape=record, label="  %9 = and i32 %3, %0"];
	Node0xb7de60[shape=record, label="  %10 = shl i32 %9, 1"];
	Node0xb7df00[shape=record, label="  %11 = xor i32 %10, -2"];
	Node0xb7df70[shape=record, label="  %12 = xor i32 %8, -1"];
	Node0xb7dfe0[shape=record, label="  %13 = xor i32 %4, -1"];
	Node0xb7e050[shape=record, label="  %14 = add i32 %13, %0"];
	Node0xb7e0c0[shape=record, label="  %15 = add i32 %14, %12"];
	Node0xb7e160[shape=record, label="  %16 = mul i32 %15, 5"];
	Node0xb7e200[shape=record, label="  %17 = sub i32 3, %0"];
	Node0xb7e270[shape=record, label="  %18 = add i32 %17, %7"];
	Node0xb7e2e0[shape=record, label="  %19 = add i32 %18, %1"];
	Node0xb7e350[shape=record, label="  %20 = sub i32 %19, %8"];
	Node0xb7e3c0[shape=record, label="  %21 = add i32 %20, %5"];
	Node0xb7e430[shape=record, label="  %22 = sub i32 %21, %11"];
	Node0xb7e4a0[shape=record, label="  %23 = add i32 %22, %16"];
	Node0xb7e510[shape=record, label="  %24 = icmp eq i32 %6, %23"];
	Node0xb1e268[shape=record, label="  %25 = select i1 %24, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0xb7e9b0[shape=record, label="  %26 = tail call i32 @puts(i8* nonnull dereferenceable(1) %25)"];
	Node0xb7ea00[shape=record, label="  ret void"];
	Node0xb7db00 -> Node0xb7db70;
	Node0xb7db70 -> Node0xb7dc30;
	Node0xb7dc30 -> Node0xb7dca0;
	Node0xb7dca0 -> Node0xb7dd10;
	Node0xb7dd10 -> Node0xb7dd80;
	Node0xb7dd80 -> Node0xb7ddf0;
	Node0xb7ddf0 -> Node0xb7de60;
	Node0xb7de60 -> Node0xb7df00;
	Node0xb7df00 -> Node0xb7df70;
	Node0xb7df70 -> Node0xb7dfe0;
	Node0xb7dfe0 -> Node0xb7e050;
	Node0xb7e050 -> Node0xb7e0c0;
	Node0xb7e0c0 -> Node0xb7e160;
	Node0xb7e160 -> Node0xb7e200;
	Node0xb7e200 -> Node0xb7e270;
	Node0xb7e270 -> Node0xb7e2e0;
	Node0xb7e2e0 -> Node0xb7e350;
	Node0xb7e350 -> Node0xb7e3c0;
	Node0xb7e3c0 -> Node0xb7e430;
	Node0xb7e430 -> Node0xb7e4a0;
	Node0xb7e4a0 -> Node0xb7e510;
	Node0xb7e510 -> Node0xb1e268;
	Node0xb1e268 -> Node0xb7e9b0;
	Node0xb7e9b0 -> Node0xb7ea00;
edge [color=red]
	Node0xb7db00 -> Node0xb7db70;
	Node0xb7dc30 -> Node0xb7dca0;
	Node0xb7db70 -> Node0xb7dca0;
	Node0xb7db00 -> Node0xb7ddf0;
	Node0xb7ddf0 -> Node0xb7de60;
	Node0xb7de60 -> Node0xb7df00;
	Node0xb7dd80 -> Node0xb7df70;
	Node0xb7db70 -> Node0xb7dfe0;
	Node0xb7dfe0 -> Node0xb7e050;
	Node0xb7e050 -> Node0xb7e0c0;
	Node0xb7df70 -> Node0xb7e0c0;
	Node0xb7e0c0 -> Node0xb7e160;
	Node0xb7e200 -> Node0xb7e270;
	Node0xb7dd10 -> Node0xb7e270;
	Node0xb7e270 -> Node0xb7e2e0;
	Node0xb7e2e0 -> Node0xb7e350;
	Node0xb7dd80 -> Node0xb7e350;
	Node0xb7e350 -> Node0xb7e3c0;
	Node0xb7dc30 -> Node0xb7e3c0;
	Node0xb7e3c0 -> Node0xb7e430;
	Node0xb7df00 -> Node0xb7e430;
	Node0xb7e430 -> Node0xb7e4a0;
	Node0xb7e160 -> Node0xb7e4a0;
	Node0xb7dca0 -> Node0xb7e510;
	Node0xb7e4a0 -> Node0xb7e510;
	Node0xb7e510 -> Node0xb1e268;
	Node0xb1e268 -> Node0xb7e9b0;
}
