digraph "DFG for'crackme' function" {
	Node0x2381520[shape=record, label="  %3 = or i32 %1, %0"];
	Node0x2381bd0[shape=record, label="  %4 = xor i32 %1, 1073741823"];
	Node0x2381c90[shape=record, label="  %5 = add i32 %1, 1"];
	Node0x2381d00[shape=record, label="  %6 = sub i32 %5, %3"];
	Node0x2381d70[shape=record, label="  %7 = and i32 %1, %0"];
	Node0x2381de0[shape=record, label="  %8 = xor i32 %1, %0"];
	Node0x2381e80[shape=record, label="  %9 = xor i32 %0, -1"];
	Node0x2381ef0[shape=record, label="  %10 = xor i32 %3, -1"];
	Node0x2381f90[shape=record, label="  %11 = mul i32 %10, 3"];
	Node0x2382000[shape=record, label="  %12 = xor i32 %11, -1"];
	Node0x2382070[shape=record, label="  %13 = and i32 %9, %1"];
	Node0x2382110[shape=record, label="  %14 = mul i32 %13, -5"];
	Node0x2382180[shape=record, label="  %15 = and i32 %4, %0"];
	Node0x2382220[shape=record, label="  %16 = shl i32 %15, 2"];
	Node0x2382290[shape=record, label="  %17 = shl i32 %7, 1"];
	Node0x2382300[shape=record, label="  %18 = add i32 %9, %1"];
	Node0x2382370[shape=record, label="  %19 = sub i32 %18, %7"];
	Node0x23823e0[shape=record, label="  %20 = add i32 %19, %8"];
	Node0x2382450[shape=record, label="  %21 = add i32 %20, %12"];
	Node0x23824c0[shape=record, label="  %22 = add i32 %21, %14"];
	Node0x2382530[shape=record, label="  %23 = sub i32 %22, %16"];
	Node0x23825a0[shape=record, label="  %24 = sub i32 %23, %17"];
	Node0x2382610[shape=record, label="  %25 = icmp eq i32 %6, %24"];
	Node0x2322268[shape=record, label="  %26 = select i1 %25, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0x2382ab0[shape=record, label="  %27 = tail call i32 @puts(i8* nonnull dereferenceable(1) %26)"];
	Node0x2382b00[shape=record, label="  ret void"];
	Node0x2381520 -> Node0x2381bd0;
	Node0x2381bd0 -> Node0x2381c90;
	Node0x2381c90 -> Node0x2381d00;
	Node0x2381d00 -> Node0x2381d70;
	Node0x2381d70 -> Node0x2381de0;
	Node0x2381de0 -> Node0x2381e80;
	Node0x2381e80 -> Node0x2381ef0;
	Node0x2381ef0 -> Node0x2381f90;
	Node0x2381f90 -> Node0x2382000;
	Node0x2382000 -> Node0x2382070;
	Node0x2382070 -> Node0x2382110;
	Node0x2382110 -> Node0x2382180;
	Node0x2382180 -> Node0x2382220;
	Node0x2382220 -> Node0x2382290;
	Node0x2382290 -> Node0x2382300;
	Node0x2382300 -> Node0x2382370;
	Node0x2382370 -> Node0x23823e0;
	Node0x23823e0 -> Node0x2382450;
	Node0x2382450 -> Node0x23824c0;
	Node0x23824c0 -> Node0x2382530;
	Node0x2382530 -> Node0x23825a0;
	Node0x23825a0 -> Node0x2382610;
	Node0x2382610 -> Node0x2322268;
	Node0x2322268 -> Node0x2382ab0;
	Node0x2382ab0 -> Node0x2382b00;
edge [color=red]
	Node0x2381c90 -> Node0x2381d00;
	Node0x2381520 -> Node0x2381d00;
	Node0x2381520 -> Node0x2381ef0;
	Node0x2381ef0 -> Node0x2381f90;
	Node0x2381f90 -> Node0x2382000;
	Node0x2381e80 -> Node0x2382070;
	Node0x2382070 -> Node0x2382110;
	Node0x2381bd0 -> Node0x2382180;
	Node0x2382180 -> Node0x2382220;
	Node0x2381d70 -> Node0x2382290;
	Node0x2381e80 -> Node0x2382300;
	Node0x2382300 -> Node0x2382370;
	Node0x2381d70 -> Node0x2382370;
	Node0x2382370 -> Node0x23823e0;
	Node0x2381de0 -> Node0x23823e0;
	Node0x23823e0 -> Node0x2382450;
	Node0x2382000 -> Node0x2382450;
	Node0x2382450 -> Node0x23824c0;
	Node0x2382110 -> Node0x23824c0;
	Node0x23824c0 -> Node0x2382530;
	Node0x2382220 -> Node0x2382530;
	Node0x2382530 -> Node0x23825a0;
	Node0x2382290 -> Node0x23825a0;
	Node0x2381d00 -> Node0x2382610;
	Node0x23825a0 -> Node0x2382610;
	Node0x2382610 -> Node0x2322268;
	Node0x2322268 -> Node0x2382ab0;
}
