; ModuleID = '../.././c_source_file/1033_opaque_predict_crackme.c'
source_filename = "../.././c_source_file/1033_opaque_predict_crackme.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str.2 = private unnamed_addr constant [15 x i8] c"%d %d %d %d %d\00", align 1
@str = private unnamed_addr constant [4 x i8] c"bad\00", align 1
@str.3 = private unnamed_addr constant [5 x i8] c"good\00", align 1

; Function Attrs: nofree nounwind uwtable
define dso_local void @crackme(i32 %0, i32 %1, i32 %2, i32 %3, i32 %4) local_unnamed_addr #0 {
  %6 = and i32 %4, %3
  %7 = add i32 %3, 1
  %8 = xor i32 %2, -1
  %9 = or i32 %8, %1
  %10 = xor i32 %9, -1
  %11 = or i32 %10, %0
  %12 = add i32 %7, %11
  %13 = add i32 %12, %6
  %14 = xor i32 %4, -1
  %15 = or i32 %4, %3
  %16 = and i32 %14, %3
  %17 = and i32 %1, %0
  %18 = or i32 %2, %0
  %19 = xor i32 %18, %17
  %20 = shl i32 %19, 1
  %21 = xor i32 %2, %1
  %22 = or i32 %21, %17
  %23 = xor i32 %0, -1
  %24 = and i32 %2, %1
  %25 = xor i32 %24, -1
  %26 = or i32 %25, %23
  %27 = and i32 %8, %1
  %28 = xor i32 %27, -1
  %29 = xor i32 %28, %0
  %30 = shl i32 %29, 1
  %31 = xor i32 %1, %0
  %32 = xor i32 %31, -1
  %33 = and i32 %8, %32
  %34 = xor i32 %1, -1
  %35 = and i32 %34, %2
  %36 = and i32 %35, %23
  %37 = xor i32 %21, -1
  %38 = and i32 %37, %0
  %39 = or i32 %36, %38
  %40 = xor i32 %2, %0
  %41 = or i32 %40, %32
  %42 = xor i32 %18, -1
  %43 = or i32 %42, %32
  %44 = and i32 %8, %0
  %45 = xor i32 %17, -1
  %46 = and i32 %37, %45
  %47 = add i32 %9, 1
  %48 = and i32 %2, %0
  %49 = or i32 %48, %31
  %50 = and i32 %34, %0
  %51 = xor i32 %50, -1
  %52 = and i32 %40, %51
  %53 = xor i32 %44, -1
  %54 = and i32 %53, %1
  %55 = or i32 %1, %0
  %56 = xor i32 %55, -1
  %57 = or i32 %40, %56
  %58 = or i32 %37, %0
  %59 = or i32 %2, %1
  %60 = xor i32 %59, %17
  %61 = shl i32 %60, 1
  %62 = or i32 %31, %2
  %63 = and i32 %18, %1
  %64 = or i32 %31, %8
  %65 = shl i32 %64, 1
  %66 = and i32 %35, %0
  %67 = xor i32 %21, %0
  %68 = or i32 %66, %67
  %69 = or i32 %56, %2
  %70 = xor i32 %48, -1
  %71 = or i32 %10, %23
  %72 = or i32 %34, %2
  %73 = and i32 %72, %23
  %74 = or i32 %66, %73
  %75 = or i32 %50, %2
  %76 = and i32 %40, %32
  %77 = or i32 %8, %56
  %78 = or i32 %34, %0
  %79 = xor i32 %78, -1
  %80 = or i32 %37, %79
  %81 = or i32 %8, %0
  %82 = xor i32 %81, -1
  %83 = or i32 %8, %79
  %84 = or i32 %79, %2
  %85 = or i32 %21, %50
  %86 = and i32 %55, %2
  %87 = and i32 %81, %1
  %88 = shl i32 %87, 1
  %89 = or i32 %44, %32
  %90 = xor i32 %9, %17
  %91 = or i32 %8, %32
  %92 = and i32 %18, %34
  %93 = xor i32 %40, -1
  %94 = or i32 %93, %34
  %95 = xor i32 %56, %2
  %96 = or i32 %25, %0
  %97 = or i32 %28, %0
  %98 = xor i32 %44, %1
  %99 = xor i32 %37, %0
  %100 = or i32 %82, %34
  %101 = or i32 %40, %17
  %102 = or i32 %93, %56
  %103 = and i32 %55, %37
  %104 = or i32 %93, %79
  %105 = shl i32 %104, 1
  %106 = xor i32 %67, -1
  %107 = xor i32 %66, %106
  %108 = or i32 %17, %10
  %109 = or i32 %31, %82
  %110 = or i32 %42, %1
  %111 = shl i32 %110, 1
  %112 = or i32 %17, %37
  %113 = and i32 %59, %0
  %114 = or i32 %24, %23
  %115 = and i32 %24, %0
  %116 = xor i32 %115, %67
  %117 = and i32 %21, %51
  %118 = xor i32 %42, %1
  %119 = and i32 %81, %32
  %120 = xor i32 %79, %2
  %121 = shl i32 %120, 1
  %122 = xor i32 %59, -1
  %123 = xor i32 %81, %17
  %124 = shl i32 %123, 1
  %125 = or i32 %27, %50
  %126 = and i32 %18, %32
  %127 = and i32 %70, %34
  %128 = and i32 %93, %34
  %129 = or i32 %31, %93
  %130 = and i32 %40, %31
  %131 = or i32 %44, %1
  %132 = and i32 %8, %51
  %133 = or i32 %21, %0
  %134 = and i32 %40, %1
  %135 = xor i32 %59, %0
  %136 = shl i32 %135, 1
  %137 = or i32 %82, %1
  %138 = or i32 %40, %31
  %139 = xor i32 %9, %0
  %140 = or i32 %48, %79
  %141 = and i32 %25, %23
  %142 = xor i32 %66, %133
  %143 = or i32 %40, %1
  %144 = xor i32 %44, %9
  %145 = and i32 %59, %23
  %146 = shl i32 %145, 1
  %147 = xor i32 %72, %0
  %148 = xor i32 %147, 2147483647
  %149 = xor i32 %148, %66
  %150 = or i32 %40, %50
  %151 = shl i32 %150, 2
  %152 = and i32 %81, %31
  %153 = shl i32 %8, 1
  %154 = or i32 %28, %23
  %155 = or i32 %48, %1
  %156 = or i32 %122, %23
  %157 = or i32 %40, %34
  %158 = and i32 %21, %55
  %159 = add i32 %78, 1
  %160 = xor i32 %51, %2
  %161 = shl i32 %160, 1
  %162 = or i32 %37, %56
  %163 = shl i32 %162, 2
  %164 = and i32 %9, %23
  %165 = xor i32 %18, %1
  %166 = xor i32 %81, %1
  %167 = or i32 %50, %37
  %168 = and i32 %21, %45
  %169 = or i32 %21, %79
  %170 = xor i32 %115, 2147483647
  %171 = xor i32 %170, %135
  %172 = shl i32 %171, 1
  %173 = xor i32 %27, %0
  %174 = xor i32 %55, %2
  %175 = or i32 %42, %34
  %176 = or i32 %66, %147
  %177 = shl i32 %176, 1
  %178 = or i32 %24, %0
  %179 = or i32 %115, %145
  %180 = add i32 %27, 1
  %181 = and i32 %21, %23
  %182 = xor i32 %170, %181
  %183 = and i32 %31, %93
  %184 = add i32 %17, 1
  %185 = xor i32 %48, %28
  %186 = and i32 %24, %23
  %187 = and i32 %21, %0
  %188 = or i32 %186, %187
  %189 = xor i32 %70, %1
  %190 = and i32 %93, %1
  %191 = and i32 %78, %2
  %192 = add i32 %1, 1
  %193 = or i32 %59, %23
  %194 = or i32 %31, %42
  %195 = or i32 %44, %24
  %196 = or i32 %48, %27
  %197 = xor i32 %44, %25
  %198 = xor i32 %50, %28
  %199 = or i32 %50, %93
  %200 = or i32 %48, %32
  %201 = or i32 %9, %0
  %202 = and i32 %70, %32
  %203 = xor i32 %73, -1
  %204 = xor i32 %66, %203
  %205 = and i32 %25, %0
  %206 = or i32 %27, %23
  %207 = or i32 %37, %23
  %208 = and i32 %93, %45
  %209 = shl i32 %208, 1
  %210 = or i32 %82, %32
  %211 = or i32 %21, %56
  %212 = and i32 %18, %31
  %213 = and i32 %37, %23
  %214 = and i32 %8, %45
  %215 = or i32 %115, %135
  %216 = or i32 %17, %82
  %217 = and i32 %40, %55
  %218 = and i32 %93, %32
  %219 = xor i32 %78, %2
  %220 = shl i32 %219, 1
  %221 = or i32 %17, %122
  %222 = or i32 %17, %42
  %223 = and i32 %32, %2
  %224 = xor i32 %53, %1
  %225 = shl i32 %224, 1
  %226 = or i32 %40, %79
  %227 = or i32 %44, %31
  %228 = and i32 %55, %93
  %229 = and i32 %37, %51
  %230 = xor i32 %186, -1
  %231 = xor i32 %187, %230
  %232 = and i32 %31, %8
  %233 = or i32 %9, %23
  %234 = or i32 %44, %10
  %235 = xor i32 %48, %55
  %236 = and i32 %53, %34
  %237 = xor i32 %50, %2
  %238 = and i32 %40, %78
  %239 = or i32 %44, %34
  %240 = shl i32 %239, 1
  %241 = xor i32 %48, %1
  %242 = and i32 %81, %34
  %243 = or i32 %17, %2
  %244 = or i32 %48, %56
  %245 = and i32 %55, %8
  %246 = xor i32 %48, %59
  %247 = and i32 %72, %0
  %248 = or i32 %36, %247
  %249 = or i32 %27, %0
  %250 = and i32 %78, %8
  %251 = or i32 %48, %34
  %252 = or i32 %115, %106
  %253 = or i32 %122, %0
  %254 = and i32 %28, %0
  %255 = and i32 %28, %23
  %256 = or i32 %17, %8
  %257 = xor i32 %113, %230
  %258 = xor i32 %133, -1
  %259 = or i32 %66, %258
  %260 = and i32 %45, %2
  %261 = mul i32 %260, -3
  %262 = and i32 %40, %34
  %263 = shl i32 %262, 1
  %264 = xor i32 %45, %2
  %265 = shl i32 %264, 1
  %266 = xor i32 %82, %1
  %267 = xor i32 %25, %0
  %268 = and i32 %78, %37
  %269 = and i32 %9, %0
  %270 = or i32 %48, %122
  %271 = and i32 %21, %78
  %272 = or i32 %186, %113
  %273 = and i32 %78, %93
  %274 = and i32 %122, %23
  %275 = and i32 %27, %23
  %276 = mul i32 %275, 18
  %277 = and i32 %122, %0
  %278 = mul i32 %277, 19
  %279 = and i32 %27, %0
  %280 = mul i32 %279, 13
  %281 = and i32 %10, %23
  %282 = and i32 %10, %0
  %283 = mul i32 %282, 14
  %284 = mul i32 %115, -20
  %285 = add i32 %180, %2
  %286 = add i32 %285, %274
  %287 = sub i32 %286, %281
  %288 = add i32 %287, %198
  %289 = add i32 %288, %63
  %290 = mul i32 %289, 5
  %291 = add i32 %75, %53
  %292 = shl i32 %291, 2
  %293 = sub i32 -2, %0
  %294 = add i32 %293, %50
  %295 = add i32 %294, %93
  %296 = add i32 %295, %18
  %297 = add i32 %296, %95
  %298 = add i32 %297, %91
  %299 = add i32 %298, %37
  %300 = add i32 %299, %266
  %301 = add i32 %300, %242
  %302 = add i32 %301, %213
  %303 = add i32 %302, %210
  %304 = add i32 %303, %165
  %305 = add i32 %304, %76
  %306 = add i32 %305, %57
  %307 = add i32 %306, %46
  %308 = add i32 %307, %41
  %309 = add i32 %308, %149
  %310 = add i32 %309, %182
  %311 = shl i32 %310, 1
  %312 = add i32 %0, 2
  %313 = add i32 %312, %1
  %314 = add i32 %313, %192
  %315 = sub i32 %314, %55
  %316 = add i32 %315, %56
  %317 = add i32 %316, %51
  %318 = sub i32 %317, %31
  %319 = add i32 %318, %159
  %320 = add i32 %319, %78
  %321 = add i32 %320, %184
  %322 = add i32 %321, %3
  %323 = sub i32 %322, %33
  %324 = sub i32 %323, %44
  %325 = add i32 %324, %47
  %326 = sub i32 %325, %62
  %327 = sub i32 %326, %69
  %328 = add i32 %327, %70
  %329 = add i32 %328, %77
  %330 = add i32 %329, %82
  %331 = sub i32 %330, %83
  %332 = sub i32 %331, %84
  %333 = sub i32 %332, %86
  %334 = sub i32 %333, %21
  %335 = sub i32 %334, %27
  %336 = sub i32 %335, %48
  %337 = sub i32 %336, %132
  %338 = sub i32 %337, %153
  %339 = add i32 %338, %174
  %340 = sub i32 %339, %191
  %341 = add i32 %340, %214
  %342 = sub i32 %341, %223
  %343 = add i32 %342, %232
  %344 = add i32 %343, %237
  %345 = sub i32 %344, %243
  %346 = sub i32 %345, %40
  %347 = sub i32 %346, %245
  %348 = sub i32 %347, %250
  %349 = sub i32 %348, %256
  %350 = sub i32 %349, %4
  %351 = add i32 %350, %22
  %352 = add i32 %351, %26
  %353 = sub i32 %352, %43
  %354 = sub i32 %353, %49
  %355 = sub i32 %354, %52
  %356 = add i32 %355, %54
  %357 = sub i32 %356, %58
  %358 = sub i32 %357, %65
  %359 = add i32 %358, %71
  %360 = add i32 %359, %80
  %361 = sub i32 %360, %85
  %362 = sub i32 %361, %89
  %363 = sub i32 %362, %90
  %364 = add i32 %363, %92
  %365 = sub i32 %364, %94
  %366 = add i32 %365, %96
  %367 = sub i32 %366, %97
  %368 = sub i32 %367, %98
  %369 = sub i32 %368, %99
  %370 = add i32 %369, %100
  %371 = add i32 %370, %101
  %372 = sub i32 %371, %102
  %373 = add i32 %372, %103
  %374 = add i32 %373, %108
  %375 = add i32 %374, %109
  %376 = sub i32 %375, %112
  %377 = add i32 %376, %113
  %378 = add i32 %377, %114
  %379 = sub i32 %378, %117
  %380 = add i32 %379, %118
  %381 = sub i32 %380, %119
  %382 = sub i32 %381, %121
  %383 = sub i32 %382, %125
  %384 = add i32 %383, %126
  %385 = sub i32 %384, %127
  %386 = add i32 %385, %128
  %387 = sub i32 %386, %129
  %388 = sub i32 %387, %130
  %389 = add i32 %388, %131
  %390 = sub i32 %389, %133
  %391 = add i32 %390, %134
  %392 = sub i32 %391, %137
  %393 = add i32 %392, %138
  %394 = add i32 %393, %139
  %395 = sub i32 %394, %140
  %396 = sub i32 %395, %141
  %397 = sub i32 %396, %143
  %398 = sub i32 %397, %144
  %399 = add i32 %398, %152
  %400 = add i32 %399, %154
  %401 = add i32 %400, %155
  %402 = sub i32 %401, %156
  %403 = sub i32 %402, %157
  %404 = add i32 %403, %158
  %405 = sub i32 %404, %161
  %406 = add i32 %405, %67
  %407 = add i32 %406, %164
  %408 = sub i32 %407, %166
  %409 = sub i32 %408, %167
  %410 = add i32 %409, %168
  %411 = add i32 %410, %169
  %412 = sub i32 %411, %173
  %413 = add i32 %412, %175
  %414 = add i32 %413, %178
  %415 = sub i32 %414, %183
  %416 = add i32 %415, %185
  %417 = sub i32 %416, %189
  %418 = add i32 %417, %190
  %419 = add i32 %418, %193
  %420 = sub i32 %419, %194
  %421 = add i32 %420, %195
  %422 = sub i32 %421, %196
  %423 = sub i32 %422, %197
  %424 = add i32 %423, %199
  %425 = add i32 %424, %200
  %426 = sub i32 %425, %201
  %427 = add i32 %426, %202
  %428 = add i32 %427, %205
  %429 = sub i32 %428, %206
  %430 = sub i32 %429, %207
  %431 = add i32 %430, %211
  %432 = sub i32 %431, %212
  %433 = add i32 %432, %216
  %434 = sub i32 %433, %217
  %435 = add i32 %434, %218
  %436 = sub i32 %435, %220
  %437 = sub i32 %436, %221
  %438 = sub i32 %437, %222
  %439 = sub i32 %438, %226
  %440 = sub i32 %439, %227
  %441 = add i32 %440, %228
  %442 = add i32 %441, %229
  %443 = sub i32 %442, %233
  %444 = add i32 %443, %181
  %445 = add i32 %444, %234
  %446 = sub i32 %445, %235
  %447 = add i32 %446, %236
  %448 = add i32 %447, %238
  %449 = sub i32 %448, %241
  %450 = add i32 %449, %244
  %451 = sub i32 %450, %246
  %452 = add i32 %451, %249
  %453 = sub i32 %452, %251
  %454 = add i32 %453, %253
  %455 = add i32 %454, %254
  %456 = add i32 %455, %255
  %457 = add i32 %456, %38
  %458 = add i32 %457, %261
  %459 = sub i32 %458, %265
  %460 = add i32 %459, %267
  %461 = sub i32 %460, %268
  %462 = sub i32 %461, %269
  %463 = sub i32 %462, %270
  %464 = sub i32 %463, %271
  %465 = add i32 %464, %273
  %466 = add i32 %465, %186
  %467 = add i32 %466, %15
  %468 = sub i32 %467, %16
  %469 = add i32 %468, %6
  %470 = sub i32 %469, %20
  %471 = sub i32 %470, %30
  %472 = add i32 %471, %39
  %473 = sub i32 %472, %61
  %474 = sub i32 %473, %68
  %475 = add i32 %474, %74
  %476 = sub i32 %475, %88
  %477 = sub i32 %476, %105
  %478 = add i32 %477, %107
  %479 = sub i32 %478, %111
  %480 = add i32 %479, %116
  %481 = sub i32 %480, %124
  %482 = sub i32 %481, %136
  %483 = sub i32 %482, %142
  %484 = sub i32 %483, %146
  %485 = sub i32 %484, %151
  %486 = sub i32 %485, %163
  %487 = add i32 %486, %179
  %488 = sub i32 %487, %188
  %489 = sub i32 %488, %204
  %490 = sub i32 %489, %209
  %491 = sub i32 %490, %215
  %492 = sub i32 %491, %225
  %493 = add i32 %492, %231
  %494 = sub i32 %493, %240
  %495 = sub i32 %494, %248
  %496 = add i32 %495, %252
  %497 = add i32 %496, %257
  %498 = sub i32 %497, %259
  %499 = sub i32 %498, %263
  %500 = add i32 %499, %272
  %501 = add i32 %500, %276
  %502 = add i32 %501, %278
  %503 = add i32 %502, %280
  %504 = add i32 %503, %283
  %505 = add i32 %504, %284
  %506 = add i32 %505, %292
  %507 = sub i32 %506, %177
  %508 = sub i32 %507, %172
  %509 = add i32 %508, %290
  %510 = add i32 %509, %311
  %511 = icmp eq i32 %13, %510
  %512 = select i1 %511, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)
  %513 = tail call i32 @puts(i8* nonnull dereferenceable(1) %512)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #1 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %6) #5
  %7 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %7) #5
  %8 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %8) #5
  %9 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %9) #5
  %10 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %10) #5
  %11 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3, i32* nonnull %4, i32* nonnull %5)
  %12 = load i32, i32* %1, align 4, !tbaa !2
  %13 = load i32, i32* %2, align 4, !tbaa !2
  %14 = load i32, i32* %3, align 4, !tbaa !2
  %15 = load i32, i32* %4, align 4, !tbaa !2
  %16 = load i32, i32* %5, align 4, !tbaa !2
  call void @crackme(i32 %12, i32 %13, i32 %14, i32 %15, i32 %16)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %10) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %9) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %8) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %7) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %6) #5
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare dso_local i32 @__isoc99_scanf(i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #4

attributes #0 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Ubuntu clang version 10.0.1-++20200708122807+ef32c611aa2-1~exp1~20200707223407.61 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
