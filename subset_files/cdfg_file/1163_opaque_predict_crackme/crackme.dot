digraph "DFG for'crackme' function" {
	Node0x15c4480[shape=record, label="  %3 = or i32 %1, %0"];
	Node0x15c4b30[shape=record, label="  %4 = shl i32 %0, 1"];
	Node0x15c4bf0[shape=record, label="  %5 = xor i32 %4, -2"];
	Node0x15c4c90[shape=record, label="  %6 = xor i32 %1, -1"];
	Node0x15c4d00[shape=record, label="  %7 = or i32 %6, %0"];
	Node0x15c4d70[shape=record, label="  %8 = and i32 %6, %0"];
	Node0x15c4de0[shape=record, label="  %9 = and i32 %1, %0"];
	Node0x15c4e80[shape=record, label="  %10 = shl i32 %3, 2"];
	Node0x15c4f20[shape=record, label="  %11 = xor i32 %10, -4"];
	Node0x15c4f90[shape=record, label="  %12 = add i32 %8, %6"];
	Node0x15c5000[shape=record, label="  %13 = add i32 %12, %7"];
	Node0x15c5070[shape=record, label="  %14 = add i32 %13, %9"];
	Node0x15c50e0[shape=record, label="  %15 = shl i32 %14, 1"];
	Node0x15c5150[shape=record, label="  %16 = sub i32 2, %4"];
	Node0x15c51c0[shape=record, label="  %17 = add i32 %16, %1"];
	Node0x15c5230[shape=record, label="  %18 = add i32 %17, %5"];
	Node0x15c52a0[shape=record, label="  %19 = sub i32 %18, %8"];
	Node0x15c5310[shape=record, label="  %20 = sub i32 %19, %11"];
	Node0x15c5380[shape=record, label="  %21 = add i32 %20, %15"];
	Node0x15c53f0[shape=record, label="  %22 = icmp eq i32 %3, %21"];
	Node0x1565268[shape=record, label="  %23 = select i1 %22, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0x15c5890[shape=record, label="  %24 = tail call i32 @puts(i8* nonnull dereferenceable(1) %23)"];
	Node0x15c58e0[shape=record, label="  ret void"];
	Node0x15c4480 -> Node0x15c4b30;
	Node0x15c4b30 -> Node0x15c4bf0;
	Node0x15c4bf0 -> Node0x15c4c90;
	Node0x15c4c90 -> Node0x15c4d00;
	Node0x15c4d00 -> Node0x15c4d70;
	Node0x15c4d70 -> Node0x15c4de0;
	Node0x15c4de0 -> Node0x15c4e80;
	Node0x15c4e80 -> Node0x15c4f20;
	Node0x15c4f20 -> Node0x15c4f90;
	Node0x15c4f90 -> Node0x15c5000;
	Node0x15c5000 -> Node0x15c5070;
	Node0x15c5070 -> Node0x15c50e0;
	Node0x15c50e0 -> Node0x15c5150;
	Node0x15c5150 -> Node0x15c51c0;
	Node0x15c51c0 -> Node0x15c5230;
	Node0x15c5230 -> Node0x15c52a0;
	Node0x15c52a0 -> Node0x15c5310;
	Node0x15c5310 -> Node0x15c5380;
	Node0x15c5380 -> Node0x15c53f0;
	Node0x15c53f0 -> Node0x1565268;
	Node0x1565268 -> Node0x15c5890;
	Node0x15c5890 -> Node0x15c58e0;
edge [color=red]
	Node0x15c4b30 -> Node0x15c4bf0;
	Node0x15c4c90 -> Node0x15c4d00;
	Node0x15c4c90 -> Node0x15c4d70;
	Node0x15c4480 -> Node0x15c4e80;
	Node0x15c4e80 -> Node0x15c4f20;
	Node0x15c4d70 -> Node0x15c4f90;
	Node0x15c4c90 -> Node0x15c4f90;
	Node0x15c4f90 -> Node0x15c5000;
	Node0x15c4d00 -> Node0x15c5000;
	Node0x15c5000 -> Node0x15c5070;
	Node0x15c4de0 -> Node0x15c5070;
	Node0x15c5070 -> Node0x15c50e0;
	Node0x15c4b30 -> Node0x15c5150;
	Node0x15c5150 -> Node0x15c51c0;
	Node0x15c51c0 -> Node0x15c5230;
	Node0x15c4bf0 -> Node0x15c5230;
	Node0x15c5230 -> Node0x15c52a0;
	Node0x15c4d70 -> Node0x15c52a0;
	Node0x15c52a0 -> Node0x15c5310;
	Node0x15c4f20 -> Node0x15c5310;
	Node0x15c5310 -> Node0x15c5380;
	Node0x15c50e0 -> Node0x15c5380;
	Node0x15c4480 -> Node0x15c53f0;
	Node0x15c5380 -> Node0x15c53f0;
	Node0x15c53f0 -> Node0x1565268;
	Node0x1565268 -> Node0x15c5890;
}
