digraph "DFG for'crackme' function" {
	Node0xbf9af0[shape=record, label="  %3 = xor i32 %0, -1"];
	Node0xbf9b60[shape=record, label="  %4 = xor i32 %1, -1"];
	Node0xbf9c20[shape=record, label="  %5 = or i32 %4, %0"];
	Node0xbf9c90[shape=record, label="  %6 = or i32 %3, %1"];
	Node0xbf9d00[shape=record, label="  %7 = mul i32 %1, 5"];
	Node0xbf9d70[shape=record, label="  %8 = xor i32 %3, %1"];
	Node0xbf9de0[shape=record, label="  %9 = and i32 %1, %0"];
	Node0xbf9e80[shape=record, label="  %10 = shl i32 %9, 1"];
	Node0xbf9f20[shape=record, label="  %11 = xor i32 %10, -2"];
	Node0xbf9f90[shape=record, label="  %12 = xor i32 %5, -1"];
	Node0xbfa030[shape=record, label="  %13 = mul i32 %12, -3"];
	Node0xbfa0d0[shape=record, label="  %14 = mul i32 %9, -7"];
	Node0xbfa140[shape=record, label="  %15 = sub i32 -2, %0"];
	Node0xbfa1b0[shape=record, label="  %16 = add i32 %15, %5"];
	Node0xbfa220[shape=record, label="  %17 = sub i32 %16, %6"];
	Node0xbfa290[shape=record, label="  %18 = add i32 %17, %7"];
	Node0xbfa300[shape=record, label="  %19 = add i32 %18, %8"];
	Node0xbfa370[shape=record, label="  %20 = add i32 %19, %13"];
	Node0xbfa3e0[shape=record, label="  %21 = add i32 %20, %14"];
	Node0xbfa450[shape=record, label="  %22 = sub i32 %21, %11"];
	Node0xbfa4c0[shape=record, label="  %23 = icmp eq i32 %22, %3"];
	Node0xb9a268[shape=record, label="  %24 = select i1 %23, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0xbfa960[shape=record, label="  %25 = tail call i32 @puts(i8* nonnull dereferenceable(1) %24)"];
	Node0xbfa9b0[shape=record, label="  ret void"];
	Node0xbf9af0 -> Node0xbf9b60;
	Node0xbf9b60 -> Node0xbf9c20;
	Node0xbf9c20 -> Node0xbf9c90;
	Node0xbf9c90 -> Node0xbf9d00;
	Node0xbf9d00 -> Node0xbf9d70;
	Node0xbf9d70 -> Node0xbf9de0;
	Node0xbf9de0 -> Node0xbf9e80;
	Node0xbf9e80 -> Node0xbf9f20;
	Node0xbf9f20 -> Node0xbf9f90;
	Node0xbf9f90 -> Node0xbfa030;
	Node0xbfa030 -> Node0xbfa0d0;
	Node0xbfa0d0 -> Node0xbfa140;
	Node0xbfa140 -> Node0xbfa1b0;
	Node0xbfa1b0 -> Node0xbfa220;
	Node0xbfa220 -> Node0xbfa290;
	Node0xbfa290 -> Node0xbfa300;
	Node0xbfa300 -> Node0xbfa370;
	Node0xbfa370 -> Node0xbfa3e0;
	Node0xbfa3e0 -> Node0xbfa450;
	Node0xbfa450 -> Node0xbfa4c0;
	Node0xbfa4c0 -> Node0xb9a268;
	Node0xb9a268 -> Node0xbfa960;
	Node0xbfa960 -> Node0xbfa9b0;
edge [color=red]
	Node0xbf9b60 -> Node0xbf9c20;
	Node0xbf9af0 -> Node0xbf9c90;
	Node0xbf9af0 -> Node0xbf9d70;
	Node0xbf9de0 -> Node0xbf9e80;
	Node0xbf9e80 -> Node0xbf9f20;
	Node0xbf9c20 -> Node0xbf9f90;
	Node0xbf9f90 -> Node0xbfa030;
	Node0xbf9de0 -> Node0xbfa0d0;
	Node0xbfa140 -> Node0xbfa1b0;
	Node0xbf9c20 -> Node0xbfa1b0;
	Node0xbfa1b0 -> Node0xbfa220;
	Node0xbf9c90 -> Node0xbfa220;
	Node0xbfa220 -> Node0xbfa290;
	Node0xbf9d00 -> Node0xbfa290;
	Node0xbfa290 -> Node0xbfa300;
	Node0xbf9d70 -> Node0xbfa300;
	Node0xbfa300 -> Node0xbfa370;
	Node0xbfa030 -> Node0xbfa370;
	Node0xbfa370 -> Node0xbfa3e0;
	Node0xbfa0d0 -> Node0xbfa3e0;
	Node0xbfa3e0 -> Node0xbfa450;
	Node0xbf9f20 -> Node0xbfa450;
	Node0xbfa450 -> Node0xbfa4c0;
	Node0xbf9af0 -> Node0xbfa4c0;
	Node0xbfa4c0 -> Node0xb9a268;
	Node0xb9a268 -> Node0xbfa960;
}
