digraph "DFG for'crackme' function" {
	Node0x24b8720[shape=record, label="  %5 = xor i32 %2, %1"];
	Node0x24b8da0[shape=record, label="  %6 = add i32 %2, 1"];
	Node0x24b8e10[shape=record, label="  %7 = add i32 %6, %5"];
	Node0x24b8e80[shape=record, label="  %8 = xor i32 %3, %0"];
	Node0x24b8ef0[shape=record, label="  %9 = add i32 %7, %3"];
	Node0x24b8f60[shape=record, label="  %10 = sub i32 %9, %8"];
	Node0x24b8fd0[shape=record, label="  %11 = or i32 %2, %1"];
	Node0x24b9070[shape=record, label="  %12 = xor i32 %1, -1"];
	Node0x24b90e0[shape=record, label="  %13 = and i32 %12, %2"];
	Node0x24b9150[shape=record, label="  %14 = shl i32 %2, 1"];
	Node0x24b91f0[shape=record, label="  %15 = xor i32 %14, -2"];
	Node0x24b9260[shape=record, label="  %16 = and i32 %2, %1"];
	Node0x24b92d0[shape=record, label="  %17 = xor i32 %16, -1"];
	Node0x24b9340[shape=record, label="  %18 = xor i32 %0, -1"];
	Node0x24b93b0[shape=record, label="  %19 = and i32 %18, %3"];
	Node0x24b9420[shape=record, label="  %20 = xor i32 %19, -1"];
	Node0x24b9490[shape=record, label="  %21 = shl i32 %0, 1"];
	Node0x24b9500[shape=record, label="  %22 = or i32 %18, %3"];
	Node0x24b9570[shape=record, label="  %23 = shl i32 %22, 1"];
	Node0x24b95e0[shape=record, label="  %24 = and i32 %3, %0"];
	Node0x24b9650[shape=record, label="  %25 = xor i32 %24, -1"];
	Node0x24b96c0[shape=record, label="  %26 = or i32 %3, %0"];
	Node0x24b9760[shape=record, label="  %27 = shl i32 %26, 2"];
	Node0x24b9800[shape=record, label="  %28 = xor i32 %27, -4"];
	Node0x24b9870[shape=record, label="  %29 = shl i32 %22, 2"];
	Node0x24b98e0[shape=record, label="  %30 = xor i32 %29, -4"];
	Node0x24b9950[shape=record, label="  %31 = sub i32 %25, %19"];
	Node0x24b99f0[shape=record, label="  %32 = mul i32 %31, 3"];
	Node0x24b9c70[shape=record, label="  %33 = add i32 %24, %1"];
	Node0x24b9ce0[shape=record, label="  %34 = shl i32 %33, 1"];
	Node0x24b9d50[shape=record, label="  %35 = sub i32 -2, %0"];
	Node0x24b9dc0[shape=record, label="  %36 = sub i32 %35, %21"];
	Node0x24b9e30[shape=record, label="  %37 = sub i32 %36, %11"];
	Node0x24b9ea0[shape=record, label="  %38 = add i32 %37, %13"];
	Node0x24b9f10[shape=record, label="  %39 = sub i32 %38, %15"];
	Node0x24b9f80[shape=record, label="  %40 = add i32 %39, %17"];
	Node0x24b9ff0[shape=record, label="  %41 = sub i32 %40, %16"];
	Node0x24ba060[shape=record, label="  %42 = add i32 %41, %20"];
	Node0x24ba0d0[shape=record, label="  %43 = sub i32 %42, %8"];
	Node0x24ba140[shape=record, label="  %44 = add i32 %43, %26"];
	Node0x24ba1b0[shape=record, label="  %45 = sub i32 %44, %23"];
	Node0x24ba220[shape=record, label="  %46 = sub i32 %45, %28"];
	Node0x24ba290[shape=record, label="  %47 = sub i32 %46, %30"];
	Node0x24ba300[shape=record, label="  %48 = add i32 %47, %32"];
	Node0x24ba370[shape=record, label="  %49 = add i32 %48, %34"];
	Node0x24ba3e0[shape=record, label="  %50 = icmp eq i32 %10, %49"];
	Node0x2459268[shape=record, label="  %51 = select i1 %50, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0x24ba880[shape=record, label="  %52 = tail call i32 @puts(i8* nonnull dereferenceable(1) %51)"];
	Node0x24ba8d0[shape=record, label="  ret void"];
	Node0x24b8720 -> Node0x24b8da0;
	Node0x24b8da0 -> Node0x24b8e10;
	Node0x24b8e10 -> Node0x24b8e80;
	Node0x24b8e80 -> Node0x24b8ef0;
	Node0x24b8ef0 -> Node0x24b8f60;
	Node0x24b8f60 -> Node0x24b8fd0;
	Node0x24b8fd0 -> Node0x24b9070;
	Node0x24b9070 -> Node0x24b90e0;
	Node0x24b90e0 -> Node0x24b9150;
	Node0x24b9150 -> Node0x24b91f0;
	Node0x24b91f0 -> Node0x24b9260;
	Node0x24b9260 -> Node0x24b92d0;
	Node0x24b92d0 -> Node0x24b9340;
	Node0x24b9340 -> Node0x24b93b0;
	Node0x24b93b0 -> Node0x24b9420;
	Node0x24b9420 -> Node0x24b9490;
	Node0x24b9490 -> Node0x24b9500;
	Node0x24b9500 -> Node0x24b9570;
	Node0x24b9570 -> Node0x24b95e0;
	Node0x24b95e0 -> Node0x24b9650;
	Node0x24b9650 -> Node0x24b96c0;
	Node0x24b96c0 -> Node0x24b9760;
	Node0x24b9760 -> Node0x24b9800;
	Node0x24b9800 -> Node0x24b9870;
	Node0x24b9870 -> Node0x24b98e0;
	Node0x24b98e0 -> Node0x24b9950;
	Node0x24b9950 -> Node0x24b99f0;
	Node0x24b99f0 -> Node0x24b9c70;
	Node0x24b9c70 -> Node0x24b9ce0;
	Node0x24b9ce0 -> Node0x24b9d50;
	Node0x24b9d50 -> Node0x24b9dc0;
	Node0x24b9dc0 -> Node0x24b9e30;
	Node0x24b9e30 -> Node0x24b9ea0;
	Node0x24b9ea0 -> Node0x24b9f10;
	Node0x24b9f10 -> Node0x24b9f80;
	Node0x24b9f80 -> Node0x24b9ff0;
	Node0x24b9ff0 -> Node0x24ba060;
	Node0x24ba060 -> Node0x24ba0d0;
	Node0x24ba0d0 -> Node0x24ba140;
	Node0x24ba140 -> Node0x24ba1b0;
	Node0x24ba1b0 -> Node0x24ba220;
	Node0x24ba220 -> Node0x24ba290;
	Node0x24ba290 -> Node0x24ba300;
	Node0x24ba300 -> Node0x24ba370;
	Node0x24ba370 -> Node0x24ba3e0;
	Node0x24ba3e0 -> Node0x2459268;
	Node0x2459268 -> Node0x24ba880;
	Node0x24ba880 -> Node0x24ba8d0;
edge [color=red]
	Node0x24b8da0 -> Node0x24b8e10;
	Node0x24b8720 -> Node0x24b8e10;
	Node0x24b8e10 -> Node0x24b8ef0;
	Node0x24b8ef0 -> Node0x24b8f60;
	Node0x24b8e80 -> Node0x24b8f60;
	Node0x24b9070 -> Node0x24b90e0;
	Node0x24b9150 -> Node0x24b91f0;
	Node0x24b9260 -> Node0x24b92d0;
	Node0x24b9340 -> Node0x24b93b0;
	Node0x24b93b0 -> Node0x24b9420;
	Node0x24b9340 -> Node0x24b9500;
	Node0x24b9500 -> Node0x24b9570;
	Node0x24b95e0 -> Node0x24b9650;
	Node0x24b96c0 -> Node0x24b9760;
	Node0x24b9760 -> Node0x24b9800;
	Node0x24b9500 -> Node0x24b9870;
	Node0x24b9870 -> Node0x24b98e0;
	Node0x24b9650 -> Node0x24b9950;
	Node0x24b93b0 -> Node0x24b9950;
	Node0x24b9950 -> Node0x24b99f0;
	Node0x24b95e0 -> Node0x24b9c70;
	Node0x24b9c70 -> Node0x24b9ce0;
	Node0x24b9d50 -> Node0x24b9dc0;
	Node0x24b9490 -> Node0x24b9dc0;
	Node0x24b9dc0 -> Node0x24b9e30;
	Node0x24b8fd0 -> Node0x24b9e30;
	Node0x24b9e30 -> Node0x24b9ea0;
	Node0x24b90e0 -> Node0x24b9ea0;
	Node0x24b9ea0 -> Node0x24b9f10;
	Node0x24b91f0 -> Node0x24b9f10;
	Node0x24b9f10 -> Node0x24b9f80;
	Node0x24b92d0 -> Node0x24b9f80;
	Node0x24b9f80 -> Node0x24b9ff0;
	Node0x24b9260 -> Node0x24b9ff0;
	Node0x24b9ff0 -> Node0x24ba060;
	Node0x24b9420 -> Node0x24ba060;
	Node0x24ba060 -> Node0x24ba0d0;
	Node0x24b8e80 -> Node0x24ba0d0;
	Node0x24ba0d0 -> Node0x24ba140;
	Node0x24b96c0 -> Node0x24ba140;
	Node0x24ba140 -> Node0x24ba1b0;
	Node0x24b9570 -> Node0x24ba1b0;
	Node0x24ba1b0 -> Node0x24ba220;
	Node0x24b9800 -> Node0x24ba220;
	Node0x24ba220 -> Node0x24ba290;
	Node0x24b98e0 -> Node0x24ba290;
	Node0x24ba290 -> Node0x24ba300;
	Node0x24b99f0 -> Node0x24ba300;
	Node0x24ba300 -> Node0x24ba370;
	Node0x24b9ce0 -> Node0x24ba370;
	Node0x24b8f60 -> Node0x24ba3e0;
	Node0x24ba370 -> Node0x24ba3e0;
	Node0x24ba3e0 -> Node0x2459268;
	Node0x2459268 -> Node0x24ba880;
}
