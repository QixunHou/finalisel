digraph "DFG for'crackme' function" {
	Node0xdf94e0[shape=record, label="  %3 = xor i32 %1, %0"];
	Node0xdf9b90[shape=record, label="  %4 = sub i32 1, %3"];
	Node0xdf9c50[shape=record, label="  %5 = or i32 %1, %0"];
	Node0xdf9cc0[shape=record, label="  %6 = xor i32 %1, -1"];
	Node0xdf9d30[shape=record, label="  %7 = and i32 %6, %0"];
	Node0xdf9da0[shape=record, label="  %8 = and i32 %1, %0"];
	Node0xdf9e10[shape=record, label="  %9 = xor i32 %8, -1"];
	Node0xdf9e80[shape=record, label="  %10 = shl i32 %0, 1"];
	Node0xdf9f20[shape=record, label="  %11 = xor i32 %10, -2"];
	Node0xdf9f90[shape=record, label="  %12 = xor i32 %5, -1"];
	Node0xdfa030[shape=record, label="  %13 = mul i32 %12, -3"];
	Node0xdfa0a0[shape=record, label="  %14 = shl i32 %8, 1"];
	Node0xdfa140[shape=record, label="  %15 = mul i32 %3, -5"];
	Node0xdfa1b0[shape=record, label="  %16 = add i32 %0, 1"];
	Node0xdfa220[shape=record, label="  %17 = add i32 %16, %5"];
	Node0xdfa290[shape=record, label="  %18 = add i32 %17, %7"];
	Node0xdfa300[shape=record, label="  %19 = add i32 %18, %9"];
	Node0xdfa370[shape=record, label="  %20 = add i32 %19, %11"];
	Node0xdfa3e0[shape=record, label="  %21 = add i32 %20, %13"];
	Node0xdfa450[shape=record, label="  %22 = sub i32 %21, %14"];
	Node0xdfa4c0[shape=record, label="  %23 = add i32 %22, %15"];
	Node0xdfa530[shape=record, label="  %24 = icmp eq i32 %4, %23"];
	Node0xd9a268[shape=record, label="  %25 = select i1 %24, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0xdfa9d0[shape=record, label="  %26 = tail call i32 @puts(i8* nonnull dereferenceable(1) %25)"];
	Node0xdfaa20[shape=record, label="  ret void"];
	Node0xdf94e0 -> Node0xdf9b90;
	Node0xdf9b90 -> Node0xdf9c50;
	Node0xdf9c50 -> Node0xdf9cc0;
	Node0xdf9cc0 -> Node0xdf9d30;
	Node0xdf9d30 -> Node0xdf9da0;
	Node0xdf9da0 -> Node0xdf9e10;
	Node0xdf9e10 -> Node0xdf9e80;
	Node0xdf9e80 -> Node0xdf9f20;
	Node0xdf9f20 -> Node0xdf9f90;
	Node0xdf9f90 -> Node0xdfa030;
	Node0xdfa030 -> Node0xdfa0a0;
	Node0xdfa0a0 -> Node0xdfa140;
	Node0xdfa140 -> Node0xdfa1b0;
	Node0xdfa1b0 -> Node0xdfa220;
	Node0xdfa220 -> Node0xdfa290;
	Node0xdfa290 -> Node0xdfa300;
	Node0xdfa300 -> Node0xdfa370;
	Node0xdfa370 -> Node0xdfa3e0;
	Node0xdfa3e0 -> Node0xdfa450;
	Node0xdfa450 -> Node0xdfa4c0;
	Node0xdfa4c0 -> Node0xdfa530;
	Node0xdfa530 -> Node0xd9a268;
	Node0xd9a268 -> Node0xdfa9d0;
	Node0xdfa9d0 -> Node0xdfaa20;
edge [color=red]
	Node0xdf94e0 -> Node0xdf9b90;
	Node0xdf9cc0 -> Node0xdf9d30;
	Node0xdf9da0 -> Node0xdf9e10;
	Node0xdf9e80 -> Node0xdf9f20;
	Node0xdf9c50 -> Node0xdf9f90;
	Node0xdf9f90 -> Node0xdfa030;
	Node0xdf9da0 -> Node0xdfa0a0;
	Node0xdf94e0 -> Node0xdfa140;
	Node0xdfa1b0 -> Node0xdfa220;
	Node0xdf9c50 -> Node0xdfa220;
	Node0xdfa220 -> Node0xdfa290;
	Node0xdf9d30 -> Node0xdfa290;
	Node0xdfa290 -> Node0xdfa300;
	Node0xdf9e10 -> Node0xdfa300;
	Node0xdfa300 -> Node0xdfa370;
	Node0xdf9f20 -> Node0xdfa370;
	Node0xdfa370 -> Node0xdfa3e0;
	Node0xdfa030 -> Node0xdfa3e0;
	Node0xdfa3e0 -> Node0xdfa450;
	Node0xdfa0a0 -> Node0xdfa450;
	Node0xdfa450 -> Node0xdfa4c0;
	Node0xdfa140 -> Node0xdfa4c0;
	Node0xdf9b90 -> Node0xdfa530;
	Node0xdfa4c0 -> Node0xdfa530;
	Node0xdfa530 -> Node0xd9a268;
	Node0xd9a268 -> Node0xdfa9d0;
}
