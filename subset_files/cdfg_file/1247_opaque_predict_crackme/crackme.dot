digraph "DFG for'crackme' function" {
	Node0xf634e0[shape=record, label="  %3 = or i32 %1, %0"];
	Node0xf63b90[shape=record, label="  %4 = sub i32 0, %3"];
	Node0xf63c50[shape=record, label="  %5 = xor i32 %1, -1"];
	Node0xf63cc0[shape=record, label="  %6 = and i32 %5, %0"];
	Node0xf63d60[shape=record, label="  %7 = shl i32 %6, 1"];
	Node0xf63e00[shape=record, label="  %8 = xor i32 %7, -2"];
	Node0xf63e70[shape=record, label="  %9 = xor i32 %1, %0"];
	Node0xf63ee0[shape=record, label="  %10 = xor i32 %9, -1"];
	Node0xf63f50[shape=record, label="  %11 = and i32 %1, %0"];
	Node0xf63fc0[shape=record, label="  %12 = shl i32 %11, 1"];
	Node0xf64030[shape=record, label="  %13 = xor i32 %12, -2"];
	Node0xf640a0[shape=record, label="  %14 = shl i32 %3, 1"];
	Node0xf64110[shape=record, label="  %15 = xor i32 %14, -2"];
	Node0xf641b0[shape=record, label="  %16 = shl i32 %11, 2"];
	Node0xf64220[shape=record, label="  %17 = add i32 %10, %5"];
	Node0xf64290[shape=record, label="  %18 = sub i32 %17, %9"];
	Node0xf64300[shape=record, label="  %19 = add i32 %18, %6"];
	Node0xf64370[shape=record, label="  %20 = sub i32 %19, %16"];
	Node0xf643e0[shape=record, label="  %21 = add i32 %20, %8"];
	Node0xf64450[shape=record, label="  %22 = sub i32 %21, %13"];
	Node0xf644c0[shape=record, label="  %23 = sub i32 %22, %15"];
	Node0xf64530[shape=record, label="  %24 = icmp eq i32 %23, %4"];
	Node0xf04268[shape=record, label="  %25 = select i1 %24, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0xf649d0[shape=record, label="  %26 = tail call i32 @puts(i8* nonnull dereferenceable(1) %25)"];
	Node0xf64a20[shape=record, label="  ret void"];
	Node0xf634e0 -> Node0xf63b90;
	Node0xf63b90 -> Node0xf63c50;
	Node0xf63c50 -> Node0xf63cc0;
	Node0xf63cc0 -> Node0xf63d60;
	Node0xf63d60 -> Node0xf63e00;
	Node0xf63e00 -> Node0xf63e70;
	Node0xf63e70 -> Node0xf63ee0;
	Node0xf63ee0 -> Node0xf63f50;
	Node0xf63f50 -> Node0xf63fc0;
	Node0xf63fc0 -> Node0xf64030;
	Node0xf64030 -> Node0xf640a0;
	Node0xf640a0 -> Node0xf64110;
	Node0xf64110 -> Node0xf641b0;
	Node0xf641b0 -> Node0xf64220;
	Node0xf64220 -> Node0xf64290;
	Node0xf64290 -> Node0xf64300;
	Node0xf64300 -> Node0xf64370;
	Node0xf64370 -> Node0xf643e0;
	Node0xf643e0 -> Node0xf64450;
	Node0xf64450 -> Node0xf644c0;
	Node0xf644c0 -> Node0xf64530;
	Node0xf64530 -> Node0xf04268;
	Node0xf04268 -> Node0xf649d0;
	Node0xf649d0 -> Node0xf64a20;
edge [color=red]
	Node0xf634e0 -> Node0xf63b90;
	Node0xf63c50 -> Node0xf63cc0;
	Node0xf63cc0 -> Node0xf63d60;
	Node0xf63d60 -> Node0xf63e00;
	Node0xf63e70 -> Node0xf63ee0;
	Node0xf63f50 -> Node0xf63fc0;
	Node0xf63fc0 -> Node0xf64030;
	Node0xf634e0 -> Node0xf640a0;
	Node0xf640a0 -> Node0xf64110;
	Node0xf63f50 -> Node0xf641b0;
	Node0xf63ee0 -> Node0xf64220;
	Node0xf63c50 -> Node0xf64220;
	Node0xf64220 -> Node0xf64290;
	Node0xf63e70 -> Node0xf64290;
	Node0xf64290 -> Node0xf64300;
	Node0xf63cc0 -> Node0xf64300;
	Node0xf64300 -> Node0xf64370;
	Node0xf641b0 -> Node0xf64370;
	Node0xf64370 -> Node0xf643e0;
	Node0xf63e00 -> Node0xf643e0;
	Node0xf643e0 -> Node0xf64450;
	Node0xf64030 -> Node0xf64450;
	Node0xf64450 -> Node0xf644c0;
	Node0xf64110 -> Node0xf644c0;
	Node0xf644c0 -> Node0xf64530;
	Node0xf63b90 -> Node0xf64530;
	Node0xf64530 -> Node0xf04268;
	Node0xf04268 -> Node0xf649d0;
}
