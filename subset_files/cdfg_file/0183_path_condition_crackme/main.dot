digraph "DFG for'main' function" {
	Node0x105ae78[shape=record, label="  %1 = alloca i32, align 4"];
	Node0x105aef8[shape=record, label="  %2 = alloca i32, align 4"];
	Node0x105af88[shape=record, label="  %3 = bitcast i32* %1 to i8*"];
	Node0x105b3e8[shape=record, label="  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %3) #5"];
	Node0x105b4c8[shape=record, label="  %4 = bitcast i32* %2 to i8*"];
	Node0x105b5e8[shape=record, label="  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %4) #5"];
	Node0x105b820[shape=record, label="  %5 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2)"];
	Node0x105b8d8[shape=record, label="  %6 = load i32, i32* %1, align 4, !tbaa !2"];
	Node0x105c848[shape=record, label="  %7 = load i32, i32* %2, align 4, !tbaa !2"];
	Node0x105ced0[shape=record, label="  %8 = xor i32 %7, -1"];
	Node0x105cf40[shape=record, label="  %9 = add i32 %7, 1"];
	Node0x105cfb0[shape=record, label="  %10 = shl i32 %6, 1"];
	Node0x105d020[shape=record, label="  %11 = xor i32 %10, -2"];
	Node0x105d090[shape=record, label="  %12 = add i32 %9, %11"];
	Node0x105d100[shape=record, label="  %13 = xor i32 %7, %6"];
	Node0x105d170[shape=record, label="  %14 = and i32 %7, %6"];
	Node0x105d1e0[shape=record, label="  %15 = or i32 %6, %8"];
	Node0x105d250[shape=record, label="  %16 = or i32 %7, %6"];
	Node0x105d2c0[shape=record, label="  %17 = xor i32 %16, -1"];
	Node0x105d330[shape=record, label="  %18 = mul i32 %17, 3"];
	Node0x105d3a0[shape=record, label="  %19 = shl i32 %15, 2"];
	Node0x105d410[shape=record, label="  %20 = xor i32 %19, -4"];
	Node0x105d480[shape=record, label="  %21 = and i32 %6, %8"];
	Node0x105d4f0[shape=record, label="  %22 = shl i32 %21, 2"];
	Node0x105d560[shape=record, label="  %23 = add i32 %14, %7"];
	Node0x105d5d0[shape=record, label="  %24 = shl i32 %23, 1"];
	Node0x105d640[shape=record, label="  %25 = sub i32 3, %10"];
	Node0x105d6b0[shape=record, label="  %26 = sub i32 %25, %13"];
	Node0x105d720[shape=record, label="  %27 = add i32 %26, %15"];
	Node0x105d790[shape=record, label="  %28 = add i32 %27, %18"];
	Node0x105d800[shape=record, label="  %29 = add i32 %28, %22"];
	Node0x105d870[shape=record, label="  %30 = add i32 %29, %20"];
	Node0x105d8e0[shape=record, label="  %31 = add i32 %30, %24"];
	Node0x105d950[shape=record, label="  %32 = icmp eq i32 %12, %31"];
	Node0xffb9d8[shape=record, label="  %33 = select i1 %32, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0x105dbf0[shape=record, label="  %34 = call i32 @puts(i8* nonnull dereferenceable(1) %33) #5"];
	Node0x105de48[shape=record, label="  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %4) #5"];
	Node0x105dfa8[shape=record, label="  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %3) #5"];
	Node0x105e068[shape=record, label="  ret i32 0"];
	Node0x105ae78 -> Node0x105aef8;
	Node0x105aef8 -> Node0x105af88;
	Node0x105af88 -> Node0x105b3e8;
	Node0x105b3e8 -> Node0x105b4c8;
	Node0x105b4c8 -> Node0x105b5e8;
	Node0x105b5e8 -> Node0x105b820;
	Node0x105b820 -> Node0x105b8d8;
	Node0x105b8d8 -> Node0x105c848;
	Node0x105c848 -> Node0x105ced0;
	Node0x105ced0 -> Node0x105cf40;
	Node0x105cf40 -> Node0x105cfb0;
	Node0x105cfb0 -> Node0x105d020;
	Node0x105d020 -> Node0x105d090;
	Node0x105d090 -> Node0x105d100;
	Node0x105d100 -> Node0x105d170;
	Node0x105d170 -> Node0x105d1e0;
	Node0x105d1e0 -> Node0x105d250;
	Node0x105d250 -> Node0x105d2c0;
	Node0x105d2c0 -> Node0x105d330;
	Node0x105d330 -> Node0x105d3a0;
	Node0x105d3a0 -> Node0x105d410;
	Node0x105d410 -> Node0x105d480;
	Node0x105d480 -> Node0x105d4f0;
	Node0x105d4f0 -> Node0x105d560;
	Node0x105d560 -> Node0x105d5d0;
	Node0x105d5d0 -> Node0x105d640;
	Node0x105d640 -> Node0x105d6b0;
	Node0x105d6b0 -> Node0x105d720;
	Node0x105d720 -> Node0x105d790;
	Node0x105d790 -> Node0x105d800;
	Node0x105d800 -> Node0x105d870;
	Node0x105d870 -> Node0x105d8e0;
	Node0x105d8e0 -> Node0x105d950;
	Node0x105d950 -> Node0xffb9d8;
	Node0xffb9d8 -> Node0x105dbf0;
	Node0x105dbf0 -> Node0x105de48;
	Node0x105de48 -> Node0x105dfa8;
	Node0x105dfa8 -> Node0x105e068;
edge [color=red]
	Node0x105ae78 -> Node0x105af88;
	Node0x105af88 -> Node0x105b3e8;
	Node0x105aef8 -> Node0x105b4c8;
	Node0x105b4c8 -> Node0x105b5e8;
	Node0x105ae78 -> Node0x105b820;
	Node0x105aef8 -> Node0x105b820;
	Node0x105ae78 -> Node0x105b8d8;
	Node0x105aef8 -> Node0x105c848;
	Node0x105c848 -> Node0x105ced0;
	Node0x105c848 -> Node0x105cf40;
	Node0x105b8d8 -> Node0x105cfb0;
	Node0x105cfb0 -> Node0x105d020;
	Node0x105cf40 -> Node0x105d090;
	Node0x105d020 -> Node0x105d090;
	Node0x105c848 -> Node0x105d100;
	Node0x105b8d8 -> Node0x105d100;
	Node0x105c848 -> Node0x105d170;
	Node0x105b8d8 -> Node0x105d170;
	Node0x105b8d8 -> Node0x105d1e0;
	Node0x105ced0 -> Node0x105d1e0;
	Node0x105c848 -> Node0x105d250;
	Node0x105b8d8 -> Node0x105d250;
	Node0x105d250 -> Node0x105d2c0;
	Node0x105d2c0 -> Node0x105d330;
	Node0x105d1e0 -> Node0x105d3a0;
	Node0x105d3a0 -> Node0x105d410;
	Node0x105b8d8 -> Node0x105d480;
	Node0x105ced0 -> Node0x105d480;
	Node0x105d480 -> Node0x105d4f0;
	Node0x105d170 -> Node0x105d560;
	Node0x105c848 -> Node0x105d560;
	Node0x105d560 -> Node0x105d5d0;
	Node0x105cfb0 -> Node0x105d640;
	Node0x105d640 -> Node0x105d6b0;
	Node0x105d100 -> Node0x105d6b0;
	Node0x105d6b0 -> Node0x105d720;
	Node0x105d1e0 -> Node0x105d720;
	Node0x105d720 -> Node0x105d790;
	Node0x105d330 -> Node0x105d790;
	Node0x105d790 -> Node0x105d800;
	Node0x105d4f0 -> Node0x105d800;
	Node0x105d800 -> Node0x105d870;
	Node0x105d410 -> Node0x105d870;
	Node0x105d870 -> Node0x105d8e0;
	Node0x105d5d0 -> Node0x105d8e0;
	Node0x105d090 -> Node0x105d950;
	Node0x105d8e0 -> Node0x105d950;
	Node0x105d950 -> Node0xffb9d8;
	Node0xffb9d8 -> Node0x105dbf0;
	Node0x105b4c8 -> Node0x105de48;
	Node0x105af88 -> Node0x105dfa8;
}
