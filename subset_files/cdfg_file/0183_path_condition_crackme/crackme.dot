digraph "DFG for'crackme' function" {
	Node0x1059bc0[shape=record, label="  %3 = xor i32 %1, -1"];
	Node0x1059c60[shape=record, label="  %4 = add i32 %1, 1"];
	Node0x1059d20[shape=record, label="  %5 = shl i32 %0, 1"];
	Node0x1059d90[shape=record, label="  %6 = xor i32 %5, -2"];
	Node0x1059e00[shape=record, label="  %7 = add i32 %4, %6"];
	Node0x1059e70[shape=record, label="  %8 = shl i32 %1, 1"];
	Node0x1059ee0[shape=record, label="  %9 = xor i32 %1, %0"];
	Node0x1059f50[shape=record, label="  %10 = and i32 %1, %0"];
	Node0x1059fc0[shape=record, label="  %11 = or i32 %3, %0"];
	Node0x105a030[shape=record, label="  %12 = or i32 %1, %0"];
	Node0x105a0a0[shape=record, label="  %13 = xor i32 %12, -1"];
	Node0x105a140[shape=record, label="  %14 = mul i32 %13, 3"];
	Node0x105a1e0[shape=record, label="  %15 = shl i32 %11, 2"];
	Node0x105a280[shape=record, label="  %16 = xor i32 %15, -4"];
	Node0x105a2f0[shape=record, label="  %17 = and i32 %3, %0"];
	Node0x105a360[shape=record, label="  %18 = shl i32 %17, 2"];
	Node0x105a3d0[shape=record, label="  %19 = shl i32 %10, 1"];
	Node0x105a440[shape=record, label="  %20 = sub i32 3, %5"];
	Node0x105a4b0[shape=record, label="  %21 = sub i32 %20, %9"];
	Node0x105a520[shape=record, label="  %22 = add i32 %21, %8"];
	Node0x105a590[shape=record, label="  %23 = add i32 %22, %11"];
	Node0x105a600[shape=record, label="  %24 = add i32 %23, %14"];
	Node0x105a670[shape=record, label="  %25 = add i32 %24, %18"];
	Node0x105a6e0[shape=record, label="  %26 = add i32 %25, %19"];
	Node0x105a750[shape=record, label="  %27 = add i32 %26, %16"];
	Node0x105a7c0[shape=record, label="  %28 = icmp eq i32 %7, %27"];
	Node0xffa268[shape=record, label="  %29 = select i1 %28, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0x105ac60[shape=record, label="  %30 = tail call i32 @puts(i8* nonnull dereferenceable(1) %29)"];
	Node0x105acb0[shape=record, label="  ret void"];
	Node0x1059bc0 -> Node0x1059c60;
	Node0x1059c60 -> Node0x1059d20;
	Node0x1059d20 -> Node0x1059d90;
	Node0x1059d90 -> Node0x1059e00;
	Node0x1059e00 -> Node0x1059e70;
	Node0x1059e70 -> Node0x1059ee0;
	Node0x1059ee0 -> Node0x1059f50;
	Node0x1059f50 -> Node0x1059fc0;
	Node0x1059fc0 -> Node0x105a030;
	Node0x105a030 -> Node0x105a0a0;
	Node0x105a0a0 -> Node0x105a140;
	Node0x105a140 -> Node0x105a1e0;
	Node0x105a1e0 -> Node0x105a280;
	Node0x105a280 -> Node0x105a2f0;
	Node0x105a2f0 -> Node0x105a360;
	Node0x105a360 -> Node0x105a3d0;
	Node0x105a3d0 -> Node0x105a440;
	Node0x105a440 -> Node0x105a4b0;
	Node0x105a4b0 -> Node0x105a520;
	Node0x105a520 -> Node0x105a590;
	Node0x105a590 -> Node0x105a600;
	Node0x105a600 -> Node0x105a670;
	Node0x105a670 -> Node0x105a6e0;
	Node0x105a6e0 -> Node0x105a750;
	Node0x105a750 -> Node0x105a7c0;
	Node0x105a7c0 -> Node0xffa268;
	Node0xffa268 -> Node0x105ac60;
	Node0x105ac60 -> Node0x105acb0;
edge [color=red]
	Node0x1059d20 -> Node0x1059d90;
	Node0x1059c60 -> Node0x1059e00;
	Node0x1059d90 -> Node0x1059e00;
	Node0x1059bc0 -> Node0x1059fc0;
	Node0x105a030 -> Node0x105a0a0;
	Node0x105a0a0 -> Node0x105a140;
	Node0x1059fc0 -> Node0x105a1e0;
	Node0x105a1e0 -> Node0x105a280;
	Node0x1059bc0 -> Node0x105a2f0;
	Node0x105a2f0 -> Node0x105a360;
	Node0x1059f50 -> Node0x105a3d0;
	Node0x1059d20 -> Node0x105a440;
	Node0x105a440 -> Node0x105a4b0;
	Node0x1059ee0 -> Node0x105a4b0;
	Node0x105a4b0 -> Node0x105a520;
	Node0x1059e70 -> Node0x105a520;
	Node0x105a520 -> Node0x105a590;
	Node0x1059fc0 -> Node0x105a590;
	Node0x105a590 -> Node0x105a600;
	Node0x105a140 -> Node0x105a600;
	Node0x105a600 -> Node0x105a670;
	Node0x105a360 -> Node0x105a670;
	Node0x105a670 -> Node0x105a6e0;
	Node0x105a3d0 -> Node0x105a6e0;
	Node0x105a6e0 -> Node0x105a750;
	Node0x105a280 -> Node0x105a750;
	Node0x1059e00 -> Node0x105a7c0;
	Node0x105a750 -> Node0x105a7c0;
	Node0x105a7c0 -> Node0xffa268;
	Node0xffa268 -> Node0x105ac60;
}
