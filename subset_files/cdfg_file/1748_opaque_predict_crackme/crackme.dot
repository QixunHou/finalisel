digraph "DFG for'crackme' function" {
	Node0x139bb40[shape=record, label="  %5 = xor i32 %2, %1"];
	Node0x139c1c0[shape=record, label="  %6 = shl i32 %5, 1"];
	Node0x139c230[shape=record, label="  %7 = xor i32 %3, %0"];
	Node0x139c2a0[shape=record, label="  %8 = add i32 %6, %7"];
	Node0x139c310[shape=record, label="  %9 = or i32 %3, %0"];
	Node0x139c380[shape=record, label="  %10 = sub i32 %8, %9"];
	Node0x139c3f0[shape=record, label="  %11 = and i32 %2, %1"];
	Node0x139c490[shape=record, label="  %12 = xor i32 %2, -1"];
	Node0x139c500[shape=record, label="  %13 = or i32 %12, %1"];
	Node0x139c570[shape=record, label="  %14 = and i32 %12, %1"];
	Node0x139c5e0[shape=record, label="  %15 = shl i32 %14, 1"];
	Node0x139c680[shape=record, label="  %16 = xor i32 %15, -2"];
	Node0x139c6f0[shape=record, label="  %17 = xor i32 %1, -1"];
	Node0x139c760[shape=record, label="  %18 = xor i32 %13, -1"];
	Node0x139c800[shape=record, label="  %19 = mul i32 %18, 5"];
	Node0x139c870[shape=record, label="  %20 = and i32 %3, %0"];
	Node0x139c8e0[shape=record, label="  %21 = shl i32 %20, 1"];
	Node0x139c950[shape=record, label="  %22 = xor i32 %21, -2"];
	Node0x139c9c0[shape=record, label="  %23 = xor i32 %0, -1"];
	Node0x139ca30[shape=record, label="  %24 = or i32 %23, %3"];
	Node0x139caa0[shape=record, label="  %25 = xor i32 %9, -1"];
	Node0x139cb40[shape=record, label="  %26 = shl i32 %24, 2"];
	Node0x139cbe0[shape=record, label="  %27 = xor i32 %26, -4"];
	Node0x139cc50[shape=record, label="  %28 = add i32 %24, %1"];
	Node0x139ccc0[shape=record, label="  %29 = shl i32 %28, 1"];
	Node0x139cd30[shape=record, label="  %30 = sub i32 2, %0"];
	Node0x139cda0[shape=record, label="  %31 = add i32 %30, %17"];
	Node0x139ce10[shape=record, label="  %32 = sub i32 %31, %2"];
	Node0x139d090[shape=record, label="  %33 = add i32 %32, %12"];
	Node0x139d100[shape=record, label="  %34 = add i32 %33, %11"];
	Node0x139d170[shape=record, label="  %35 = add i32 %34, %13"];
	Node0x139d1e0[shape=record, label="  %36 = sub i32 %35, %14"];
	Node0x139d250[shape=record, label="  %37 = add i32 %36, %3"];
	Node0x139d2c0[shape=record, label="  %38 = add i32 %37, %19"];
	Node0x139d330[shape=record, label="  %39 = add i32 %38, %25"];
	Node0x139d3a0[shape=record, label="  %40 = sub i32 %39, %16"];
	Node0x139d410[shape=record, label="  %41 = sub i32 %40, %21"];
	Node0x139d480[shape=record, label="  %42 = sub i32 %41, %22"];
	Node0x139d4f0[shape=record, label="  %43 = add i32 %42, %27"];
	Node0x139d560[shape=record, label="  %44 = add i32 %43, %29"];
	Node0x139d5d0[shape=record, label="  %45 = icmp eq i32 %10, %44"];
	Node0x133c268[shape=record, label="  %46 = select i1 %45, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0x139da70[shape=record, label="  %47 = tail call i32 @puts(i8* nonnull dereferenceable(1) %46)"];
	Node0x139dac0[shape=record, label="  ret void"];
	Node0x139bb40 -> Node0x139c1c0;
	Node0x139c1c0 -> Node0x139c230;
	Node0x139c230 -> Node0x139c2a0;
	Node0x139c2a0 -> Node0x139c310;
	Node0x139c310 -> Node0x139c380;
	Node0x139c380 -> Node0x139c3f0;
	Node0x139c3f0 -> Node0x139c490;
	Node0x139c490 -> Node0x139c500;
	Node0x139c500 -> Node0x139c570;
	Node0x139c570 -> Node0x139c5e0;
	Node0x139c5e0 -> Node0x139c680;
	Node0x139c680 -> Node0x139c6f0;
	Node0x139c6f0 -> Node0x139c760;
	Node0x139c760 -> Node0x139c800;
	Node0x139c800 -> Node0x139c870;
	Node0x139c870 -> Node0x139c8e0;
	Node0x139c8e0 -> Node0x139c950;
	Node0x139c950 -> Node0x139c9c0;
	Node0x139c9c0 -> Node0x139ca30;
	Node0x139ca30 -> Node0x139caa0;
	Node0x139caa0 -> Node0x139cb40;
	Node0x139cb40 -> Node0x139cbe0;
	Node0x139cbe0 -> Node0x139cc50;
	Node0x139cc50 -> Node0x139ccc0;
	Node0x139ccc0 -> Node0x139cd30;
	Node0x139cd30 -> Node0x139cda0;
	Node0x139cda0 -> Node0x139ce10;
	Node0x139ce10 -> Node0x139d090;
	Node0x139d090 -> Node0x139d100;
	Node0x139d100 -> Node0x139d170;
	Node0x139d170 -> Node0x139d1e0;
	Node0x139d1e0 -> Node0x139d250;
	Node0x139d250 -> Node0x139d2c0;
	Node0x139d2c0 -> Node0x139d330;
	Node0x139d330 -> Node0x139d3a0;
	Node0x139d3a0 -> Node0x139d410;
	Node0x139d410 -> Node0x139d480;
	Node0x139d480 -> Node0x139d4f0;
	Node0x139d4f0 -> Node0x139d560;
	Node0x139d560 -> Node0x139d5d0;
	Node0x139d5d0 -> Node0x133c268;
	Node0x133c268 -> Node0x139da70;
	Node0x139da70 -> Node0x139dac0;
edge [color=red]
	Node0x139bb40 -> Node0x139c1c0;
	Node0x139c1c0 -> Node0x139c2a0;
	Node0x139c230 -> Node0x139c2a0;
	Node0x139c2a0 -> Node0x139c380;
	Node0x139c310 -> Node0x139c380;
	Node0x139c490 -> Node0x139c500;
	Node0x139c490 -> Node0x139c570;
	Node0x139c570 -> Node0x139c5e0;
	Node0x139c5e0 -> Node0x139c680;
	Node0x139c500 -> Node0x139c760;
	Node0x139c760 -> Node0x139c800;
	Node0x139c870 -> Node0x139c8e0;
	Node0x139c8e0 -> Node0x139c950;
	Node0x139c9c0 -> Node0x139ca30;
	Node0x139c310 -> Node0x139caa0;
	Node0x139ca30 -> Node0x139cb40;
	Node0x139cb40 -> Node0x139cbe0;
	Node0x139ca30 -> Node0x139cc50;
	Node0x139cc50 -> Node0x139ccc0;
	Node0x139cd30 -> Node0x139cda0;
	Node0x139c6f0 -> Node0x139cda0;
	Node0x139cda0 -> Node0x139ce10;
	Node0x139ce10 -> Node0x139d090;
	Node0x139c490 -> Node0x139d090;
	Node0x139d090 -> Node0x139d100;
	Node0x139c3f0 -> Node0x139d100;
	Node0x139d100 -> Node0x139d170;
	Node0x139c500 -> Node0x139d170;
	Node0x139d170 -> Node0x139d1e0;
	Node0x139c570 -> Node0x139d1e0;
	Node0x139d1e0 -> Node0x139d250;
	Node0x139d250 -> Node0x139d2c0;
	Node0x139c800 -> Node0x139d2c0;
	Node0x139d2c0 -> Node0x139d330;
	Node0x139caa0 -> Node0x139d330;
	Node0x139d330 -> Node0x139d3a0;
	Node0x139c680 -> Node0x139d3a0;
	Node0x139d3a0 -> Node0x139d410;
	Node0x139c8e0 -> Node0x139d410;
	Node0x139d410 -> Node0x139d480;
	Node0x139c950 -> Node0x139d480;
	Node0x139d480 -> Node0x139d4f0;
	Node0x139cbe0 -> Node0x139d4f0;
	Node0x139d4f0 -> Node0x139d560;
	Node0x139ccc0 -> Node0x139d560;
	Node0x139c380 -> Node0x139d5d0;
	Node0x139d560 -> Node0x139d5d0;
	Node0x139d5d0 -> Node0x133c268;
	Node0x133c268 -> Node0x139da70;
}
