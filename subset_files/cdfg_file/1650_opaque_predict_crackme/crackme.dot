digraph "DFG for'crackme' function" {
	Node0x1d38870[shape=record, label="  %3 = xor i32 %1, 2147483647"];
	Node0x1d388e0[shape=record, label="  %4 = and i32 %3, %0"];
	Node0x1d389a0[shape=record, label="  %5 = and i32 %1, %0"];
	Node0x1d38a10[shape=record, label="  %6 = sub i32 %4, %0"];
	Node0x1d38a80[shape=record, label="  %7 = add i32 %6, %5"];
	Node0x1d38af0[shape=record, label="  %8 = and i32 %7, 2147483647"];
	Node0x1d38b60[shape=record, label="  %9 = icmp eq i32 %8, 0"];
	Node0x1cd9388[shape=record, label="  %10 = select i1 %9, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0x1d39000[shape=record, label="  %11 = tail call i32 @puts(i8* nonnull dereferenceable(1) %10)"];
	Node0x1d39050[shape=record, label="  ret void"];
	Node0x1d38870 -> Node0x1d388e0;
	Node0x1d388e0 -> Node0x1d389a0;
	Node0x1d389a0 -> Node0x1d38a10;
	Node0x1d38a10 -> Node0x1d38a80;
	Node0x1d38a80 -> Node0x1d38af0;
	Node0x1d38af0 -> Node0x1d38b60;
	Node0x1d38b60 -> Node0x1cd9388;
	Node0x1cd9388 -> Node0x1d39000;
	Node0x1d39000 -> Node0x1d39050;
edge [color=red]
	Node0x1d38870 -> Node0x1d388e0;
	Node0x1d388e0 -> Node0x1d38a10;
	Node0x1d38a10 -> Node0x1d38a80;
	Node0x1d389a0 -> Node0x1d38a80;
	Node0x1d38a80 -> Node0x1d38af0;
	Node0x1d38af0 -> Node0x1d38b60;
	Node0x1d38b60 -> Node0x1cd9388;
	Node0x1cd9388 -> Node0x1d39000;
}
