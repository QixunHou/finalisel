digraph "DFG for'main' function" {
	Node0x1d39218[shape=record, label="  %1 = alloca i32, align 4"];
	Node0x1d392c8[shape=record, label="  %2 = alloca i32, align 4"];
	Node0x1d39358[shape=record, label="  %3 = bitcast i32* %1 to i8*"];
	Node0x1d397b8[shape=record, label="  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %3) #5"];
	Node0x1d39898[shape=record, label="  %4 = bitcast i32* %2 to i8*"];
	Node0x1d399b8[shape=record, label="  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %4) #5"];
	Node0x1d39bf0[shape=record, label="  %5 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2)"];
	Node0x1d39ca8[shape=record, label="  %6 = load i32, i32* %1, align 4, !tbaa !2"];
	Node0x1d3ac18[shape=record, label="  %7 = load i32, i32* %2, align 4, !tbaa !2"];
	Node0x1d3b2a0[shape=record, label="  %8 = xor i32 %7, 2147483647"];
	Node0x1d3b310[shape=record, label="  %9 = and i32 %8, %6"];
	Node0x1d3b380[shape=record, label="  %10 = and i32 %7, %6"];
	Node0x1d3b3f0[shape=record, label="  %11 = sub i32 %10, %6"];
	Node0x1d3b460[shape=record, label="  %12 = add i32 %11, %9"];
	Node0x1d3b4d0[shape=record, label="  %13 = and i32 %12, 2147483647"];
	Node0x1d3b540[shape=record, label="  %14 = icmp eq i32 %13, 0"];
	Node0x1d3b5c8[shape=record, label="  %15 = select i1 %14, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0x1d3b660[shape=record, label="  %16 = call i32 @puts(i8* nonnull dereferenceable(1) %15) #5"];
	Node0x1d3b828[shape=record, label="  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %4) #5"];
	Node0x1d3b988[shape=record, label="  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %3) #5"];
	Node0x1d3ba48[shape=record, label="  ret i32 0"];
	Node0x1d39218 -> Node0x1d392c8;
	Node0x1d392c8 -> Node0x1d39358;
	Node0x1d39358 -> Node0x1d397b8;
	Node0x1d397b8 -> Node0x1d39898;
	Node0x1d39898 -> Node0x1d399b8;
	Node0x1d399b8 -> Node0x1d39bf0;
	Node0x1d39bf0 -> Node0x1d39ca8;
	Node0x1d39ca8 -> Node0x1d3ac18;
	Node0x1d3ac18 -> Node0x1d3b2a0;
	Node0x1d3b2a0 -> Node0x1d3b310;
	Node0x1d3b310 -> Node0x1d3b380;
	Node0x1d3b380 -> Node0x1d3b3f0;
	Node0x1d3b3f0 -> Node0x1d3b460;
	Node0x1d3b460 -> Node0x1d3b4d0;
	Node0x1d3b4d0 -> Node0x1d3b540;
	Node0x1d3b540 -> Node0x1d3b5c8;
	Node0x1d3b5c8 -> Node0x1d3b660;
	Node0x1d3b660 -> Node0x1d3b828;
	Node0x1d3b828 -> Node0x1d3b988;
	Node0x1d3b988 -> Node0x1d3ba48;
edge [color=red]
	Node0x1d39218 -> Node0x1d39358;
	Node0x1d39358 -> Node0x1d397b8;
	Node0x1d392c8 -> Node0x1d39898;
	Node0x1d39898 -> Node0x1d399b8;
	Node0x1d39218 -> Node0x1d39bf0;
	Node0x1d392c8 -> Node0x1d39bf0;
	Node0x1d39218 -> Node0x1d39ca8;
	Node0x1d392c8 -> Node0x1d3ac18;
	Node0x1d3ac18 -> Node0x1d3b2a0;
	Node0x1d3b2a0 -> Node0x1d3b310;
	Node0x1d39ca8 -> Node0x1d3b310;
	Node0x1d3ac18 -> Node0x1d3b380;
	Node0x1d39ca8 -> Node0x1d3b380;
	Node0x1d3b380 -> Node0x1d3b3f0;
	Node0x1d39ca8 -> Node0x1d3b3f0;
	Node0x1d3b3f0 -> Node0x1d3b460;
	Node0x1d3b310 -> Node0x1d3b460;
	Node0x1d3b460 -> Node0x1d3b4d0;
	Node0x1d3b4d0 -> Node0x1d3b540;
	Node0x1d3b540 -> Node0x1d3b5c8;
	Node0x1d3b5c8 -> Node0x1d3b660;
	Node0x1d39898 -> Node0x1d3b828;
	Node0x1d39358 -> Node0x1d3b988;
}
