digraph "DFG for'crackme' function" {
	Node0x9a1bb0[shape=record, label="  %3 = xor i32 %0, -1"];
	Node0x9a1c20[shape=record, label="  %4 = xor i32 %1, %0"];
	Node0x9a1ce0[shape=record, label="  %5 = xor i32 %4, -1"];
	Node0x9a1d50[shape=record, label="  %6 = mul i32 %5, -4"];
	Node0x9a1dc0[shape=record, label="  %7 = xor i32 %1, -1"];
	Node0x9a1e30[shape=record, label="  %8 = and i32 %1, %0"];
	Node0x9a1ea0[shape=record, label="  %9 = xor i32 %8, -1"];
	Node0x9a1f10[shape=record, label="  %10 = and i32 %7, %0"];
	Node0x9a1fb0[shape=record, label="  %11 = shl i32 %10, 1"];
	Node0x9a2050[shape=record, label="  %12 = xor i32 %11, -2"];
	Node0x9a20c0[shape=record, label="  %13 = or i32 %7, %0"];
	Node0x9a2130[shape=record, label="  %14 = or i32 %1, %0"];
	Node0x9a21a0[shape=record, label="  %15 = xor i32 %13, -1"];
	Node0x9a2240[shape=record, label="  %16 = mul i32 %15, -9"];
	Node0x9a22e0[shape=record, label="  %17 = mul i32 %10, -5"];
	Node0x9a2350[shape=record, label="  %18 = add i32 %14, %4"];
	Node0x9a23c0[shape=record, label="  %19 = shl i32 %18, 1"];
	Node0x9a2430[shape=record, label="  %20 = add i32 %9, %3"];
	Node0x9a24a0[shape=record, label="  %21 = sub i32 %20, %13"];
	Node0x9a2510[shape=record, label="  %22 = add i32 %21, %6"];
	Node0x9a2580[shape=record, label="  %23 = add i32 %22, %16"];
	Node0x9a25f0[shape=record, label="  %24 = add i32 %23, %17"];
	Node0x9a2660[shape=record, label="  %25 = add i32 %24, %12"];
	Node0x9a26d0[shape=record, label="  %26 = add i32 %25, %19"];
	Node0x9a2740[shape=record, label="  %27 = icmp eq i32 %26, 1"];
	Node0x942268[shape=record, label="  %28 = select i1 %27, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0x9a2be0[shape=record, label="  %29 = tail call i32 @puts(i8* nonnull dereferenceable(1) %28)"];
	Node0x9a2c30[shape=record, label="  ret void"];
	Node0x9a1bb0 -> Node0x9a1c20;
	Node0x9a1c20 -> Node0x9a1ce0;
	Node0x9a1ce0 -> Node0x9a1d50;
	Node0x9a1d50 -> Node0x9a1dc0;
	Node0x9a1dc0 -> Node0x9a1e30;
	Node0x9a1e30 -> Node0x9a1ea0;
	Node0x9a1ea0 -> Node0x9a1f10;
	Node0x9a1f10 -> Node0x9a1fb0;
	Node0x9a1fb0 -> Node0x9a2050;
	Node0x9a2050 -> Node0x9a20c0;
	Node0x9a20c0 -> Node0x9a2130;
	Node0x9a2130 -> Node0x9a21a0;
	Node0x9a21a0 -> Node0x9a2240;
	Node0x9a2240 -> Node0x9a22e0;
	Node0x9a22e0 -> Node0x9a2350;
	Node0x9a2350 -> Node0x9a23c0;
	Node0x9a23c0 -> Node0x9a2430;
	Node0x9a2430 -> Node0x9a24a0;
	Node0x9a24a0 -> Node0x9a2510;
	Node0x9a2510 -> Node0x9a2580;
	Node0x9a2580 -> Node0x9a25f0;
	Node0x9a25f0 -> Node0x9a2660;
	Node0x9a2660 -> Node0x9a26d0;
	Node0x9a26d0 -> Node0x9a2740;
	Node0x9a2740 -> Node0x942268;
	Node0x942268 -> Node0x9a2be0;
	Node0x9a2be0 -> Node0x9a2c30;
edge [color=red]
	Node0x9a1c20 -> Node0x9a1ce0;
	Node0x9a1ce0 -> Node0x9a1d50;
	Node0x9a1e30 -> Node0x9a1ea0;
	Node0x9a1dc0 -> Node0x9a1f10;
	Node0x9a1f10 -> Node0x9a1fb0;
	Node0x9a1fb0 -> Node0x9a2050;
	Node0x9a1dc0 -> Node0x9a20c0;
	Node0x9a20c0 -> Node0x9a21a0;
	Node0x9a21a0 -> Node0x9a2240;
	Node0x9a1f10 -> Node0x9a22e0;
	Node0x9a2130 -> Node0x9a2350;
	Node0x9a1c20 -> Node0x9a2350;
	Node0x9a2350 -> Node0x9a23c0;
	Node0x9a1ea0 -> Node0x9a2430;
	Node0x9a1bb0 -> Node0x9a2430;
	Node0x9a2430 -> Node0x9a24a0;
	Node0x9a20c0 -> Node0x9a24a0;
	Node0x9a24a0 -> Node0x9a2510;
	Node0x9a1d50 -> Node0x9a2510;
	Node0x9a2510 -> Node0x9a2580;
	Node0x9a2240 -> Node0x9a2580;
	Node0x9a2580 -> Node0x9a25f0;
	Node0x9a22e0 -> Node0x9a25f0;
	Node0x9a25f0 -> Node0x9a2660;
	Node0x9a2050 -> Node0x9a2660;
	Node0x9a2660 -> Node0x9a26d0;
	Node0x9a23c0 -> Node0x9a26d0;
	Node0x9a26d0 -> Node0x9a2740;
	Node0x9a2740 -> Node0x942268;
	Node0x942268 -> Node0x9a2be0;
}
