; ModuleID = '../.././c_source_file/0784_path_condition_crackme.c'
source_filename = "../.././c_source_file/0784_path_condition_crackme.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str.2 = private unnamed_addr constant [15 x i8] c"%d %d %d %d %d\00", align 1
@str = private unnamed_addr constant [4 x i8] c"bad\00", align 1
@str.3 = private unnamed_addr constant [5 x i8] c"good\00", align 1

; Function Attrs: nofree nounwind uwtable
define dso_local void @crackme(i32 %0, i32 %1, i32 %2, i32 %3, i32 %4) local_unnamed_addr #0 {
  %6 = xor i32 %4, %3
  %7 = xor i32 %3, -1
  %8 = or i32 %2, %1
  %9 = xor i32 %8, %0
  %10 = shl i32 %9, 1
  %11 = and i32 %1, %0
  %12 = xor i32 %8, -1
  %13 = or i32 %11, %12
  %14 = add i32 %13, %7
  %15 = sub i32 %14, %6
  %16 = sub i32 %15, %10
  %17 = or i32 %4, %3
  %18 = shl i32 %17, 1
  %19 = and i32 %4, %3
  %20 = xor i32 %19, -1
  %21 = xor i32 %4, -1
  %22 = shl i32 %21, 1
  %23 = or i32 %21, %3
  %24 = xor i32 %2, -1
  %25 = and i32 %24, %1
  %26 = xor i32 %25, %0
  %27 = shl i32 %26, 2
  %28 = and i32 %2, %0
  %29 = shl i32 %28, 1
  %30 = xor i32 %25, -1
  %31 = or i32 %30, %0
  %32 = and i32 %2, %1
  %33 = and i32 %32, %0
  %34 = xor i32 %33, -1
  %35 = xor i32 %9, %34
  %36 = xor i32 %1, -1
  %37 = xor i32 %2, %0
  %38 = or i32 %37, %36
  %39 = shl i32 %38, 1
  %40 = xor i32 %0, -1
  %41 = and i32 %8, %40
  %42 = xor i32 %41, %34
  %43 = xor i32 %37, -1
  %44 = or i32 %43, %36
  %45 = and i32 %36, %2
  %46 = and i32 %45, %0
  %47 = xor i32 %2, %1
  %48 = or i32 %47, %0
  %49 = xor i32 %46, %48
  %50 = or i32 %1, %0
  %51 = xor i32 %50, -1
  %52 = xor i32 %51, %2
  %53 = xor i32 %11, -1
  %54 = and i32 %37, %53
  %55 = xor i32 %47, %40
  %56 = xor i32 %46, %55
  %57 = or i32 %2, %0
  %58 = xor i32 %57, -1
  %59 = xor i32 %58, %1
  %60 = xor i32 %1, %0
  %61 = xor i32 %60, -1
  %62 = and i32 %24, %61
  %63 = xor i32 %28, -1
  %64 = and i32 %63, %36
  %65 = shl i32 %64, 1
  %66 = xor i32 %32, %0
  %67 = or i32 %24, %0
  %68 = and i32 %67, %36
  %69 = xor i32 %57, %1
  %70 = and i32 %47, %40
  %71 = xor i32 %70, %34
  %72 = shl i32 %30, 2
  %73 = xor i32 %30, %0
  %74 = and i32 %57, %60
  %75 = or i32 %47, %11
  %76 = shl i32 %75, 1
  %77 = xor i32 %67, %11
  %78 = and i32 %24, %53
  %79 = and i32 %36, %0
  %80 = xor i32 %79, -1
  %81 = and i32 %43, %80
  %82 = or i32 %32, %79
  %83 = shl i32 %82, 1
  %84 = and i32 %24, %0
  %85 = or i32 %28, %12
  %86 = xor i32 %67, -1
  %87 = or i32 %36, %0
  %88 = and i32 %37, %87
  %89 = xor i32 %87, -1
  %90 = or i32 %89, %2
  %91 = xor i32 %84, -1
  %92 = and i32 %91, %61
  %93 = and i32 %50, %24
  %94 = xor i32 %47, -1
  %95 = and i32 %87, %94
  %96 = or i32 %24, %1
  %97 = xor i32 %96, -1
  %98 = or i32 %43, %61
  %99 = and i32 %63, %1
  %100 = or i32 %79, %2
  %101 = or i32 %28, %61
  %102 = and i32 %30, %40
  %103 = or i32 %79, %43
  %104 = or i32 %28, %36
  %105 = add i32 %79, 1
  %106 = or i32 %94, %89
  %107 = and i32 %30, %0
  %108 = and i32 %47, %53
  %109 = or i32 %60, %43
  %110 = or i32 %60, %86
  %111 = xor i32 %96, %11
  %112 = and i32 %47, %0
  %113 = xor i32 %53, %2
  %114 = xor i32 %32, -1
  %115 = and i32 %114, %40
  %116 = xor i32 %86, %1
  %117 = or i32 %58, %1
  %118 = shl i32 %117, 1
  %119 = xor i32 %79, %2
  %120 = or i32 %84, %32
  %121 = xor i32 %84, %114
  %122 = xor i32 %94, %0
  %123 = or i32 %12, %40
  %124 = and i32 %45, %40
  %125 = or i32 %36, %2
  %126 = and i32 %125, %0
  %127 = xor i32 %126, -1
  %128 = xor i32 %124, %127
  %129 = or i32 %94, %0
  %130 = or i32 %94, %51
  %131 = or i32 %37, %51
  %132 = or i32 %124, %126
  %133 = or i32 %25, %0
  %134 = and i32 %57, %61
  %135 = and i32 %50, %2
  %136 = and i32 %32, %40
  %137 = and i32 %8, %0
  %138 = xor i32 %137, -1
  %139 = xor i32 %136, %138
  %140 = or i32 %47, %89
  %141 = or i32 %28, %60
  %142 = or i32 %37, %11
  %143 = and i32 %37, %1
  %144 = xor i32 %8, %11
  %145 = or i32 %37, %1
  %146 = and i32 %125, %40
  %147 = or i32 %46, %146
  %148 = or i32 %32, %0
  %149 = and i32 %67, %60
  %150 = xor i32 %12, %0
  %151 = shl i32 %150, 1
  %152 = or i32 %47, %40
  %153 = xor i32 %124, %152
  %154 = shl i32 %153, 1
  %155 = add i32 %28, 1
  %156 = or i32 %79, %24
  %157 = shl i32 %156, 1
  %158 = or i32 %86, %61
  %159 = or i32 %37, %89
  %160 = and i32 %60, %2
  %161 = xor i32 %48, -1
  %162 = or i32 %46, %161
  %163 = xor i32 %28, %87
  %164 = xor i32 %57, %11
  %165 = or i32 %47, %79
  %166 = and i32 %47, %87
  %167 = or i32 %84, %1
  %168 = or i32 %24, %89
  %169 = and i32 %50, %43
  %170 = xor i32 %87, %2
  %171 = xor i32 %28, %30
  %172 = and i32 %94, %80
  %173 = or i32 %33, %70
  %174 = and i32 %114, %0
  %175 = or i32 %8, %40
  %176 = xor i32 %96, %0
  %177 = or i32 %11, %43
  %178 = or i32 %32, %40
  %179 = or i32 %97, %40
  %180 = or i32 %33, %55
  %181 = and i32 %43, %36
  %182 = xor i32 %91, %1
  %183 = shl i32 %182, 1
  %184 = and i32 %67, %1
  %185 = and i32 %87, %2
  %186 = and i32 %37, %36
  %187 = and i32 %61, %2
  %188 = xor i32 %152, -1
  %189 = or i32 %124, %188
  %190 = and i32 %53, %2
  %191 = or i32 %11, %94
  %192 = and i32 %37, %80
  %193 = and i32 %12, %40
  %194 = mul i32 %193, -23
  %195 = and i32 %25, %40
  %196 = and i32 %12, %0
  %197 = mul i32 %196, -7
  %198 = and i32 %25, %0
  %199 = and i32 %97, %40
  %200 = mul i32 %136, -12
  %201 = and i32 %97, %0
  %202 = mul i32 %201, 6
  %203 = add i32 %187, %0
  %204 = add i32 %203, %198
  %205 = add i32 %204, %186
  %206 = add i32 %205, %174
  %207 = add i32 %206, %48
  %208 = add i32 %207, %95
  %209 = add i32 %208, %81
  %210 = add i32 %209, %77
  %211 = add i32 %210, %74
  %212 = add i32 %211, %59
  %213 = add i32 %212, %56
  %214 = sub i32 %33, %199
  %215 = sub i32 %214, %195
  %216 = add i32 %215, %149
  %217 = add i32 %216, %139
  %218 = mul i32 %217, 3
  %219 = sub i32 %168, %190
  %220 = add i32 %219, %102
  %221 = mul i32 %220, 5
  %222 = add i32 %213, %23
  %223 = shl i32 %222, 1
  %224 = add i32 %36, %40
  %225 = add i32 %224, %105
  %226 = add i32 %225, 1
  %227 = sub i32 %226, %50
  %228 = sub i32 %227, %60
  %229 = sub i32 %228, %2
  %230 = add i32 %229, %51
  %231 = sub i32 %230, %3
  %232 = add i32 %231, %52
  %233 = add i32 %232, %62
  %234 = sub i32 %233, %78
  %235 = sub i32 %234, %84
  %236 = add i32 %235, %86
  %237 = sub i32 %236, %90
  %238 = sub i32 %237, %93
  %239 = add i32 %238, %97
  %240 = add i32 %239, %100
  %241 = add i32 %240, %113
  %242 = add i32 %241, %94
  %243 = sub i32 %242, %119
  %244 = add i32 %243, %135
  %245 = add i32 %244, %12
  %246 = add i32 %245, %25
  %247 = sub i32 %246, %8
  %248 = add i32 %247, %155
  %249 = sub i32 %248, %37
  %250 = add i32 %249, %160
  %251 = add i32 %250, %170
  %252 = add i32 %251, %185
  %253 = add i32 %252, %114
  %254 = sub i32 %253, %29
  %255 = sub i32 %254, %31
  %256 = sub i32 %255, %44
  %257 = sub i32 %256, %54
  %258 = sub i32 %257, %66
  %259 = add i32 %258, %68
  %260 = sub i32 %259, %69
  %261 = add i32 %260, %41
  %262 = add i32 %261, %72
  %263 = add i32 %262, %73
  %264 = sub i32 %263, %85
  %265 = sub i32 %264, %88
  %266 = add i32 %265, %92
  %267 = sub i32 %266, %98
  %268 = sub i32 %267, %99
  %269 = sub i32 %268, %101
  %270 = add i32 %269, %103
  %271 = sub i32 %270, %104
  %272 = sub i32 %271, %106
  %273 = sub i32 %272, %107
  %274 = add i32 %273, %108
  %275 = add i32 %274, %109
  %276 = add i32 %275, %110
  %277 = sub i32 %276, %111
  %278 = sub i32 %277, %112
  %279 = sub i32 %278, %115
  %280 = add i32 %279, %116
  %281 = sub i32 %280, %120
  %282 = sub i32 %281, %121
  %283 = add i32 %282, %122
  %284 = add i32 %283, %123
  %285 = sub i32 %284, %129
  %286 = sub i32 %285, %130
  %287 = add i32 %286, %131
  %288 = add i32 %287, %133
  %289 = add i32 %288, %134
  %290 = sub i32 %289, %140
  %291 = sub i32 %290, %141
  %292 = sub i32 %291, %142
  %293 = sub i32 %292, %143
  %294 = add i32 %293, %144
  %295 = add i32 %294, %145
  %296 = add i32 %295, %148
  %297 = sub i32 %296, %157
  %298 = add i32 %297, %158
  %299 = add i32 %298, %159
  %300 = add i32 %299, %163
  %301 = add i32 %300, %164
  %302 = sub i32 %301, %165
  %303 = add i32 %302, %166
  %304 = sub i32 %303, %167
  %305 = add i32 %304, %169
  %306 = sub i32 %305, %171
  %307 = add i32 %306, %172
  %308 = sub i32 %307, %175
  %309 = add i32 %308, %176
  %310 = add i32 %309, %177
  %311 = sub i32 %310, %70
  %312 = add i32 %311, %178
  %313 = add i32 %312, %179
  %314 = sub i32 %313, %152
  %315 = add i32 %314, %181
  %316 = add i32 %315, %184
  %317 = add i32 %316, %191
  %318 = add i32 %317, %192
  %319 = add i32 %318, %20
  %320 = sub i32 %319, %22
  %321 = add i32 %320, %17
  %322 = sub i32 %321, %27
  %323 = add i32 %322, %35
  %324 = sub i32 %323, %39
  %325 = sub i32 %324, %42
  %326 = sub i32 %325, %49
  %327 = sub i32 %326, %65
  %328 = add i32 %327, %71
  %329 = sub i32 %328, %76
  %330 = sub i32 %329, %83
  %331 = sub i32 %330, %118
  %332 = add i32 %331, %128
  %333 = sub i32 %332, %132
  %334 = sub i32 %333, %147
  %335 = sub i32 %334, %151
  %336 = add i32 %335, %162
  %337 = sub i32 %336, %173
  %338 = add i32 %337, %180
  %339 = sub i32 %338, %183
  %340 = sub i32 %339, %189
  %341 = add i32 %340, %194
  %342 = add i32 %341, %197
  %343 = add i32 %342, %200
  %344 = add i32 %343, %202
  %345 = sub i32 %344, %18
  %346 = sub i32 %345, %154
  %347 = add i32 %346, %221
  %348 = add i32 %347, %218
  %349 = add i32 %348, %223
  %350 = icmp eq i32 %16, %349
  %351 = select i1 %350, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)
  %352 = tail call i32 @puts(i8* nonnull dereferenceable(1) %351)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #1 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %6) #5
  %7 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %7) #5
  %8 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %8) #5
  %9 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %9) #5
  %10 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %10) #5
  %11 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3, i32* nonnull %4, i32* nonnull %5)
  %12 = load i32, i32* %1, align 4, !tbaa !2
  %13 = load i32, i32* %2, align 4, !tbaa !2
  %14 = load i32, i32* %3, align 4, !tbaa !2
  %15 = load i32, i32* %4, align 4, !tbaa !2
  %16 = load i32, i32* %5, align 4, !tbaa !2
  call void @crackme(i32 %12, i32 %13, i32 %14, i32 %15, i32 %16)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %10) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %9) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %8) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %7) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %6) #5
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare dso_local i32 @__isoc99_scanf(i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #4

attributes #0 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Ubuntu clang version 10.0.1-++20200708122807+ef32c611aa2-1~exp1~20200707223407.61 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
