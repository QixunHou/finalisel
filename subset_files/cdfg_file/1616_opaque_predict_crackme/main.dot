digraph "DFG for'main' function" {
	Node0x1df7968[shape=record, label="  %1 = alloca i32, align 4"];
	Node0x1df79e8[shape=record, label="  %2 = alloca i32, align 4"];
	Node0x1df7a78[shape=record, label="  %3 = bitcast i32* %1 to i8*"];
	Node0x1df7ed8[shape=record, label="  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %3) #5"];
	Node0x1df7fb8[shape=record, label="  %4 = bitcast i32* %2 to i8*"];
	Node0x1df80d8[shape=record, label="  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %4) #5"];
	Node0x1df8310[shape=record, label="  %5 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2)"];
	Node0x1df83c8[shape=record, label="  %6 = load i32, i32* %1, align 4, !tbaa !2"];
	Node0x1df9338[shape=record, label="  %7 = load i32, i32* %2, align 4, !tbaa !2"];
	Node0x1df99c0[shape=record, label="  %8 = sub i32 0, %6"];
	Node0x1df9a30[shape=record, label="  %9 = xor i32 %6, -1"];
	Node0x1df9aa0[shape=record, label="  %10 = or i32 %7, %9"];
	Node0x1df9b10[shape=record, label="  %11 = and i32 %7, %9"];
	Node0x1df9b80[shape=record, label="  %12 = shl i32 %7, 1"];
	Node0x1df9bf0[shape=record, label="  %13 = or i32 %7, %6"];
	Node0x1df9c60[shape=record, label="  %14 = xor i32 %13, -1"];
	Node0x1df9cd0[shape=record, label="  %15 = add i32 %11, %14"];
	Node0x1df9d40[shape=record, label="  %16 = mul i32 %15, 3"];
	Node0x1df9db0[shape=record, label="  %17 = shl i32 %6, 1"];
	Node0x1df9e20[shape=record, label="  %18 = add i32 %6, 4"];
	Node0x1df9e90[shape=record, label="  %19 = add i32 %18, %7"];
	Node0x1df9f00[shape=record, label="  %20 = add i32 %19, %17"];
	Node0x1df9f70[shape=record, label="  %21 = add i32 %20, %10"];
	Node0x1df9fe0[shape=record, label="  %22 = add i32 %21, %11"];
	Node0x1dfa050[shape=record, label="  %23 = sub i32 %22, %12"];
	Node0x1dfa0c0[shape=record, label="  %24 = add i32 %23, %16"];
	Node0x1dfa130[shape=record, label="  %25 = icmp eq i32 %24, %8"];
	Node0x1d989d8[shape=record, label="  %26 = select i1 %25, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0x1dfa1c0[shape=record, label="  %27 = call i32 @puts(i8* nonnull dereferenceable(1) %26) #5"];
	Node0x1dfa418[shape=record, label="  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %4) #5"];
	Node0x1dfa578[shape=record, label="  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %3) #5"];
	Node0x1dfa638[shape=record, label="  ret i32 0"];
	Node0x1df7968 -> Node0x1df79e8;
	Node0x1df79e8 -> Node0x1df7a78;
	Node0x1df7a78 -> Node0x1df7ed8;
	Node0x1df7ed8 -> Node0x1df7fb8;
	Node0x1df7fb8 -> Node0x1df80d8;
	Node0x1df80d8 -> Node0x1df8310;
	Node0x1df8310 -> Node0x1df83c8;
	Node0x1df83c8 -> Node0x1df9338;
	Node0x1df9338 -> Node0x1df99c0;
	Node0x1df99c0 -> Node0x1df9a30;
	Node0x1df9a30 -> Node0x1df9aa0;
	Node0x1df9aa0 -> Node0x1df9b10;
	Node0x1df9b10 -> Node0x1df9b80;
	Node0x1df9b80 -> Node0x1df9bf0;
	Node0x1df9bf0 -> Node0x1df9c60;
	Node0x1df9c60 -> Node0x1df9cd0;
	Node0x1df9cd0 -> Node0x1df9d40;
	Node0x1df9d40 -> Node0x1df9db0;
	Node0x1df9db0 -> Node0x1df9e20;
	Node0x1df9e20 -> Node0x1df9e90;
	Node0x1df9e90 -> Node0x1df9f00;
	Node0x1df9f00 -> Node0x1df9f70;
	Node0x1df9f70 -> Node0x1df9fe0;
	Node0x1df9fe0 -> Node0x1dfa050;
	Node0x1dfa050 -> Node0x1dfa0c0;
	Node0x1dfa0c0 -> Node0x1dfa130;
	Node0x1dfa130 -> Node0x1d989d8;
	Node0x1d989d8 -> Node0x1dfa1c0;
	Node0x1dfa1c0 -> Node0x1dfa418;
	Node0x1dfa418 -> Node0x1dfa578;
	Node0x1dfa578 -> Node0x1dfa638;
edge [color=red]
	Node0x1df7968 -> Node0x1df7a78;
	Node0x1df7a78 -> Node0x1df7ed8;
	Node0x1df79e8 -> Node0x1df7fb8;
	Node0x1df7fb8 -> Node0x1df80d8;
	Node0x1df7968 -> Node0x1df8310;
	Node0x1df79e8 -> Node0x1df8310;
	Node0x1df7968 -> Node0x1df83c8;
	Node0x1df79e8 -> Node0x1df9338;
	Node0x1df83c8 -> Node0x1df99c0;
	Node0x1df83c8 -> Node0x1df9a30;
	Node0x1df9338 -> Node0x1df9aa0;
	Node0x1df9a30 -> Node0x1df9aa0;
	Node0x1df9338 -> Node0x1df9b10;
	Node0x1df9a30 -> Node0x1df9b10;
	Node0x1df9338 -> Node0x1df9b80;
	Node0x1df9338 -> Node0x1df9bf0;
	Node0x1df83c8 -> Node0x1df9bf0;
	Node0x1df9bf0 -> Node0x1df9c60;
	Node0x1df9b10 -> Node0x1df9cd0;
	Node0x1df9c60 -> Node0x1df9cd0;
	Node0x1df9cd0 -> Node0x1df9d40;
	Node0x1df83c8 -> Node0x1df9db0;
	Node0x1df83c8 -> Node0x1df9e20;
	Node0x1df9e20 -> Node0x1df9e90;
	Node0x1df9338 -> Node0x1df9e90;
	Node0x1df9e90 -> Node0x1df9f00;
	Node0x1df9db0 -> Node0x1df9f00;
	Node0x1df9f00 -> Node0x1df9f70;
	Node0x1df9aa0 -> Node0x1df9f70;
	Node0x1df9f70 -> Node0x1df9fe0;
	Node0x1df9b10 -> Node0x1df9fe0;
	Node0x1df9fe0 -> Node0x1dfa050;
	Node0x1df9b80 -> Node0x1dfa050;
	Node0x1dfa050 -> Node0x1dfa0c0;
	Node0x1df9d40 -> Node0x1dfa0c0;
	Node0x1dfa0c0 -> Node0x1dfa130;
	Node0x1df99c0 -> Node0x1dfa130;
	Node0x1dfa130 -> Node0x1d989d8;
	Node0x1d989d8 -> Node0x1dfa1c0;
	Node0x1df7fb8 -> Node0x1dfa418;
	Node0x1df7a78 -> Node0x1dfa578;
}
