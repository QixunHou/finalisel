digraph "DFG for'crackme' function" {
	Node0x1df6a60[shape=record, label="  %3 = sub i32 0, %0"];
	Node0x1df6b00[shape=record, label="  %4 = xor i32 %0, -1"];
	Node0x1df6bc0[shape=record, label="  %5 = or i32 %4, %1"];
	Node0x1df6c30[shape=record, label="  %6 = and i32 %4, %1"];
	Node0x1df6ca0[shape=record, label="  %7 = shl i32 %1, 1"];
	Node0x1df6d10[shape=record, label="  %8 = or i32 %1, %0"];
	Node0x1df6d80[shape=record, label="  %9 = xor i32 %8, -1"];
	Node0x1df6df0[shape=record, label="  %10 = add i32 %6, %9"];
	Node0x1df6e90[shape=record, label="  %11 = mul i32 %10, 3"];
	Node0x1df6f00[shape=record, label="  %12 = shl i32 %0, 1"];
	Node0x1df6f70[shape=record, label="  %13 = add i32 %0, %1"];
	Node0x1df7010[shape=record, label="  %14 = add i32 %13, 4"];
	Node0x1df7080[shape=record, label="  %15 = add i32 %14, %5"];
	Node0x1df70f0[shape=record, label="  %16 = add i32 %15, %6"];
	Node0x1df7160[shape=record, label="  %17 = sub i32 %16, %7"];
	Node0x1df71d0[shape=record, label="  %18 = add i32 %17, %11"];
	Node0x1df7240[shape=record, label="  %19 = add i32 %18, %12"];
	Node0x1df72b0[shape=record, label="  %20 = icmp eq i32 %19, %3"];
	Node0x1d97268[shape=record, label="  %21 = select i1 %20, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0x1df7750[shape=record, label="  %22 = tail call i32 @puts(i8* nonnull dereferenceable(1) %21)"];
	Node0x1df77a0[shape=record, label="  ret void"];
	Node0x1df6a60 -> Node0x1df6b00;
	Node0x1df6b00 -> Node0x1df6bc0;
	Node0x1df6bc0 -> Node0x1df6c30;
	Node0x1df6c30 -> Node0x1df6ca0;
	Node0x1df6ca0 -> Node0x1df6d10;
	Node0x1df6d10 -> Node0x1df6d80;
	Node0x1df6d80 -> Node0x1df6df0;
	Node0x1df6df0 -> Node0x1df6e90;
	Node0x1df6e90 -> Node0x1df6f00;
	Node0x1df6f00 -> Node0x1df6f70;
	Node0x1df6f70 -> Node0x1df7010;
	Node0x1df7010 -> Node0x1df7080;
	Node0x1df7080 -> Node0x1df70f0;
	Node0x1df70f0 -> Node0x1df7160;
	Node0x1df7160 -> Node0x1df71d0;
	Node0x1df71d0 -> Node0x1df7240;
	Node0x1df7240 -> Node0x1df72b0;
	Node0x1df72b0 -> Node0x1d97268;
	Node0x1d97268 -> Node0x1df7750;
	Node0x1df7750 -> Node0x1df77a0;
edge [color=red]
	Node0x1df6b00 -> Node0x1df6bc0;
	Node0x1df6b00 -> Node0x1df6c30;
	Node0x1df6d10 -> Node0x1df6d80;
	Node0x1df6c30 -> Node0x1df6df0;
	Node0x1df6d80 -> Node0x1df6df0;
	Node0x1df6df0 -> Node0x1df6e90;
	Node0x1df6f70 -> Node0x1df7010;
	Node0x1df7010 -> Node0x1df7080;
	Node0x1df6bc0 -> Node0x1df7080;
	Node0x1df7080 -> Node0x1df70f0;
	Node0x1df6c30 -> Node0x1df70f0;
	Node0x1df70f0 -> Node0x1df7160;
	Node0x1df6ca0 -> Node0x1df7160;
	Node0x1df7160 -> Node0x1df71d0;
	Node0x1df6e90 -> Node0x1df71d0;
	Node0x1df71d0 -> Node0x1df7240;
	Node0x1df6f00 -> Node0x1df7240;
	Node0x1df7240 -> Node0x1df72b0;
	Node0x1df6a60 -> Node0x1df72b0;
	Node0x1df72b0 -> Node0x1d97268;
	Node0x1d97268 -> Node0x1df7750;
}
