; ModuleID = '../.././c_source_file/0526_path_condition_crackme.c'
source_filename = "../.././c_source_file/0526_path_condition_crackme.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str.2 = private unnamed_addr constant [18 x i8] c"%d %d %d %d %d %d\00", align 1
@str = private unnamed_addr constant [4 x i8] c"bad\00", align 1
@str.3 = private unnamed_addr constant [5 x i8] c"good\00", align 1

; Function Attrs: nofree nounwind uwtable
define dso_local void @crackme(i32 %0, i32 %1, i32 %2, i32 %3, i32 %4, i32 %5) local_unnamed_addr #0 {
  %7 = or i32 %2, %1
  %8 = or i32 %7, %0
  %9 = or i32 %1, %0
  %10 = xor i32 %2, %1
  %11 = xor i32 %10, -1
  %12 = and i32 %9, %11
  %13 = add i32 %8, %12
  %14 = xor i32 %5, -1
  %15 = and i32 %14, %3
  %16 = xor i32 %15, -1
  %17 = add i32 %15, 1
  %18 = sub i32 %4, %13
  %19 = add i32 %18, %17
  %20 = xor i32 %1, -1
  %21 = and i32 %20, %2
  %22 = and i32 %21, %0
  %23 = or i32 %20, %2
  %24 = xor i32 %23, %0
  %25 = or i32 %22, %24
  %26 = xor i32 %2, -1
  %27 = or i32 %26, %1
  %28 = xor i32 %9, -1
  %29 = or i32 %11, %28
  %30 = and i32 %1, %0
  %31 = xor i32 %30, -1
  %32 = shl i32 %31, 1
  %33 = and i32 %2, %0
  %34 = xor i32 %33, -1
  %35 = and i32 %34, %20
  %36 = and i32 %2, %1
  %37 = or i32 %36, %0
  %38 = or i32 %20, %0
  %39 = xor i32 %38, -1
  %40 = or i32 %33, %39
  %41 = shl i32 %40, 1
  %42 = xor i32 %1, %0
  %43 = or i32 %42, %2
  %44 = and i32 %36, %0
  %45 = xor i32 %0, -1
  %46 = xor i32 %7, %45
  %47 = xor i32 %46, %44
  %48 = xor i32 %7, %30
  %49 = or i32 %2, %0
  %50 = and i32 %49, %42
  %51 = and i32 %49, %1
  %52 = and i32 %10, %31
  %53 = add i32 %33, 1
  %54 = xor i32 %2, %0
  %55 = and i32 %54, %38
  %56 = and i32 %34, %1
  %57 = xor i32 %54, -1
  %58 = or i32 %57, %20
  %59 = shl i32 %58, 1
  %60 = or i32 %26, %0
  %61 = xor i32 %60, %1
  %62 = xor i32 %60, -1
  %63 = or i32 %42, %62
  %64 = or i32 %11, %39
  %65 = and i32 %20, %0
  %66 = shl i32 %65, 1
  %67 = and i32 %54, %1
  %68 = and i32 %26, %1
  %69 = or i32 %68, %65
  %70 = or i32 %54, %39
  %71 = and i32 %10, %0
  %72 = xor i32 %42, -1
  %73 = and i32 %72, %2
  %74 = or i32 %26, %28
  %75 = or i32 %72, %2
  %76 = xor i32 %27, -1
  %77 = or i32 %76, %0
  %78 = and i32 %10, %38
  %79 = and i32 %21, %45
  %80 = or i32 %10, %45
  %81 = xor i32 %79, %80
  %82 = xor i32 %7, -1
  %83 = xor i32 %82, %0
  %84 = shl i32 %83, 1
  %85 = and i32 %26, %0
  %86 = xor i32 %85, -1
  %87 = and i32 %86, %20
  %88 = or i32 %42, %57
  %89 = shl i32 %88, 1
  %90 = and i32 %60, %42
  %91 = or i32 %27, %0
  %92 = shl i32 %91, 1
  %93 = xor i32 %65, -1
  %94 = and i32 %34, %72
  %95 = and i32 %42, %2
  %96 = add i32 %60, 1
  %97 = or i32 %10, %30
  %98 = and i32 %38, %11
  %99 = or i32 %62, %72
  %100 = or i32 %54, %72
  %101 = xor i32 %36, %86
  %102 = or i32 %30, %62
  %103 = xor i32 %68, -1
  %104 = xor i32 %33, %103
  %105 = xor i32 %33, %38
  %106 = xor i32 %49, -1
  %107 = or i32 %30, %106
  %108 = or i32 %33, %42
  %109 = shl i32 %108, 1
  %110 = and i32 %42, %26
  %111 = and i32 %11, %45
  %112 = or i32 %30, %26
  %113 = and i32 %31, %2
  %114 = and i32 %57, %31
  %115 = shl i32 %114, 1
  %116 = or i32 %10, %65
  %117 = and i32 %57, %72
  %118 = or i32 %39, %2
  %119 = or i32 %85, %20
  %120 = and i32 %7, %45
  %121 = xor i32 %34, %1
  %122 = xor i32 %65, %2
  %123 = or i32 %82, %45
  %124 = xor i32 %44, -1
  %125 = xor i32 %120, %124
  %126 = or i32 %33, %1
  %127 = xor i32 %11, %0
  %128 = and i32 %26, %72
  %129 = and i32 %10, %45
  %130 = or i32 %44, %129
  %131 = and i32 %23, %0
  %132 = xor i32 %131, 2147483647
  %133 = xor i32 %132, %79
  %134 = or i32 %62, %20
  %135 = xor i32 %106, %1
  %136 = or i32 %65, %57
  %137 = and i32 %36, %45
  %138 = and i32 %7, %0
  %139 = xor i32 %138, -1
  %140 = xor i32 %137, %139
  %141 = xor i32 %10, %45
  %142 = or i32 %44, %141
  %143 = or i32 %137, %71
  %144 = xor i32 %39, %2
  %145 = xor i32 %60, %30
  %146 = add i32 %10, 1
  %147 = or i32 %33, %20
  %148 = or i32 %30, %76
  %149 = or i32 %11, %45
  %150 = and i32 %57, %1
  %151 = xor i32 %33, %1
  %152 = shl i32 %151, 1
  %153 = or i32 %103, %45
  %154 = or i32 %65, %2
  %155 = and i32 %86, %72
  %156 = or i32 %82, %0
  %157 = or i32 %42, %26
  %158 = and i32 %82, %45
  %159 = mul i32 %158, 14
  %160 = and i32 %68, %45
  %161 = and i32 %82, %0
  %162 = and i32 %68, %0
  %163 = shl i32 %162, 2
  %164 = and i32 %76, %45
  %165 = and i32 %76, %0
  %166 = shl i32 %165, 3
  %167 = xor i32 %4, -1
  %168 = and i32 %5, %3
  %169 = and i32 %168, %4
  %170 = or i32 %5, %3
  %171 = xor i32 %170, %4
  %172 = xor i32 %171, %169
  %173 = and i32 %14, %4
  %174 = xor i32 %4, %3
  %175 = xor i32 %174, -1
  %176 = or i32 %173, %175
  %177 = and i32 %5, %4
  %178 = xor i32 %177, -1
  %179 = xor i32 %3, -1
  %180 = and i32 %179, %4
  %181 = or i32 %15, %180
  %182 = or i32 %14, %3
  %183 = and i32 %182, %4
  %184 = or i32 %170, %167
  %185 = and i32 %170, %167
  %186 = xor i32 %5, %4
  %187 = and i32 %186, %175
  %188 = and i32 %174, %5
  %189 = or i32 %4, %3
  %190 = xor i32 %189, %5
  %191 = xor i32 %5, %3
  %192 = xor i32 %191, -1
  %193 = or i32 %192, %4
  %194 = add i32 %5, 1
  %195 = or i32 %15, %167
  %196 = and i32 %4, %3
  %197 = xor i32 %196, -1
  %198 = and i32 %186, %197
  %199 = xor i32 %168, %4
  %200 = xor i32 %186, -1
  %201 = and i32 %200, %3
  %202 = or i32 %200, %175
  %203 = and i32 %179, %5
  %204 = and i32 %203, %4
  %205 = or i32 %179, %5
  %206 = and i32 %205, %167
  %207 = xor i32 %206, 2147483647
  %208 = xor i32 %207, %204
  %209 = shl i32 %208, 1
  %210 = or i32 %177, %15
  %211 = xor i32 %168, -1
  %212 = xor i32 %173, %211
  %213 = xor i32 %182, %196
  %214 = xor i32 %180, 2147483647
  %215 = and i32 %214, %200
  %216 = shl i32 %215, 1
  %217 = xor i32 %191, %167
  %218 = xor i32 %217, %204
  %219 = xor i32 %182, -1
  %220 = add i32 %182, 1
  %221 = or i32 %200, %3
  %222 = or i32 %15, %4
  %223 = or i32 %170, %4
  %224 = or i32 %191, %167
  %225 = xor i32 %189, 2147483647
  %226 = or i32 %225, %14
  %227 = shl i32 %226, 1
  %228 = or i32 %14, %175
  %229 = or i32 %179, %4
  %230 = xor i32 %177, %229
  %231 = xor i32 %170, %196
  %232 = shl i32 %231, 1
  %233 = or i32 %5, %4
  %234 = and i32 %233, %174
  %235 = xor i32 %180, %5
  %236 = shl i32 %235, 2
  %237 = and i32 %14, %175
  %238 = or i32 %191, %4
  %239 = and i32 %14, %197
  %240 = xor i32 %185, -1
  %241 = xor i32 %169, %240
  %242 = and i32 %168, %167
  %243 = and i32 %170, %4
  %244 = xor i32 %243, -1
  %245 = xor i32 %242, %244
  %246 = xor i32 %177, %3
  %247 = or i32 %174, %200
  %248 = and i32 %191, %167
  %249 = and i32 %189, %5
  %250 = or i32 %14, %4
  %251 = and i32 %233, %175
  %252 = and i32 %191, %4
  %253 = shl i32 %252, 1
  %254 = xor i32 %238, -1
  %255 = or i32 %204, %254
  %256 = xor i32 %229, -1
  %257 = or i32 %256, %5
  %258 = or i32 %16, %4
  %259 = and i32 %203, %167
  %260 = xor i32 %224, -1
  %261 = or i32 %259, %260
  %262 = and i32 %178, %175
  %263 = xor i32 %250, -1
  %264 = or i32 %263, %3
  %265 = or i32 %173, %219
  %266 = and i32 %178, %3
  %267 = and i32 %186, %179
  %268 = or i32 %180, %5
  %269 = and i32 %191, %229
  %270 = or i32 %186, %3
  %271 = xor i32 %233, -1
  %272 = or i32 %196, %271
  %273 = or i32 %186, %179
  %274 = or i32 %204, %206
  %275 = xor i32 %219, %4
  %276 = xor i32 %205, %4
  %277 = or i32 %204, %276
  %278 = xor i32 %16, %4
  %279 = xor i32 %170, -1
  %280 = and i32 %279, %167
  %281 = and i32 %15, %167
  %282 = and i32 %279, %4
  %283 = and i32 %15, %4
  %284 = mul i32 %283, 7
  %285 = and i32 %219, %167
  %286 = shl i32 %242, 2
  %287 = and i32 %219, %4
  %288 = add i32 %7, %144
  %289 = add i32 %288, %44
  %290 = add i32 %289, %149
  %291 = add i32 %290, %78
  %292 = add i32 %291, %64
  %293 = add i32 %292, %143
  %294 = add i32 %293, %81
  %295 = add i32 %294, %15
  %296 = add i32 %295, %133
  %297 = add i32 %296, %269
  %298 = add i32 %297, %248
  %299 = add i32 %298, %199
  %300 = add i32 %299, %274
  %301 = add i32 %300, %277
  %302 = shl i32 %301, 1
  %303 = add i32 %63, %164
  %304 = add i32 %303, %287
  %305 = sub i32 %304, %183
  %306 = sub i32 %305, %245
  %307 = mul i32 %306, 3
  %308 = sub i32 %90, %52
  %309 = add i32 %308, %280
  %310 = sub i32 %309, %285
  %311 = sub i32 %310, %222
  %312 = mul i32 %311, 5
  %313 = add i32 %161, %154
  %314 = add i32 %313, %160
  %315 = add i32 %314, %198
  %316 = shl i32 %315, 2
  %317 = add i32 %169, %282
  %318 = add i32 %317, %281
  %319 = mul i32 %318, 11
  %320 = add i32 %2, -1
  %321 = add i32 %320, %93
  %322 = add i32 %321, %42
  %323 = sub i32 %322, %30
  %324 = sub i32 %323, %27
  %325 = sub i32 %324, %32
  %326 = sub i32 %325, %43
  %327 = add i32 %326, %53
  %328 = sub i32 %327, %66
  %329 = add i32 %328, %68
  %330 = sub i32 %329, %73
  %331 = sub i32 %330, %74
  %332 = add i32 %331, %75
  %333 = add i32 %332, %95
  %334 = add i32 %333, %96
  %335 = add i32 %334, %110
  %336 = sub i32 %335, %112
  %337 = sub i32 %336, %113
  %338 = sub i32 %337, %118
  %339 = add i32 %338, %122
  %340 = sub i32 %339, %128
  %341 = sub i32 %340, %54
  %342 = add i32 %341, %146
  %343 = add i32 %342, %106
  %344 = sub i32 %343, %60
  %345 = sub i32 %344, %157
  %346 = sub i32 %345, %29
  %347 = sub i32 %346, %35
  %348 = add i32 %347, %37
  %349 = sub i32 %348, %48
  %350 = sub i32 %349, %50
  %351 = sub i32 %350, %51
  %352 = add i32 %351, %55
  %353 = add i32 %352, %56
  %354 = sub i32 %353, %61
  %355 = add i32 %354, %67
  %356 = sub i32 %355, %69
  %357 = add i32 %356, %70
  %358 = add i32 %357, %71
  %359 = sub i32 %358, %77
  %360 = sub i32 %359, %87
  %361 = add i32 %360, %94
  %362 = add i32 %361, %97
  %363 = sub i32 %362, %80
  %364 = add i32 %363, %98
  %365 = sub i32 %364, %99
  %366 = sub i32 %365, %100
  %367 = sub i32 %366, %101
  %368 = sub i32 %367, %102
  %369 = add i32 %368, %104
  %370 = add i32 %369, %105
  %371 = add i32 %370, %107
  %372 = add i32 %371, %111
  %373 = add i32 %372, %116
  %374 = sub i32 %373, %117
  %375 = sub i32 %374, %119
  %376 = sub i32 %375, %120
  %377 = add i32 %376, %121
  %378 = sub i32 %377, %123
  %379 = sub i32 %378, %126
  %380 = add i32 %379, %127
  %381 = sub i32 %380, %134
  %382 = sub i32 %381, %135
  %383 = add i32 %382, %136
  %384 = sub i32 %383, %145
  %385 = sub i32 %384, %147
  %386 = add i32 %385, %148
  %387 = add i32 %386, %150
  %388 = sub i32 %387, %153
  %389 = add i32 %388, %155
  %390 = sub i32 %389, %156
  %391 = add i32 %390, %137
  %392 = sub i32 %391, %25
  %393 = sub i32 %392, %41
  %394 = add i32 %393, %47
  %395 = sub i32 %394, %59
  %396 = sub i32 %395, %84
  %397 = sub i32 %396, %89
  %398 = sub i32 %397, %92
  %399 = sub i32 %398, %109
  %400 = sub i32 %399, %115
  %401 = add i32 %400, %125
  %402 = add i32 %401, %130
  %403 = sub i32 %402, %140
  %404 = add i32 %403, %142
  %405 = sub i32 %404, %152
  %406 = add i32 %405, %159
  %407 = sub i32 %406, %163
  %408 = add i32 %407, %166
  %409 = add i32 %408, %194
  %410 = add i32 %409, %178
  %411 = sub i32 %410, %188
  %412 = sub i32 %411, %190
  %413 = add i32 %412, %220
  %414 = sub i32 %413, %228
  %415 = sub i32 %414, %237
  %416 = add i32 %415, %239
  %417 = sub i32 %416, %249
  %418 = add i32 %417, %250
  %419 = add i32 %418, %257
  %420 = add i32 %419, %268
  %421 = sub i32 %420, %173
  %422 = add i32 %421, %176
  %423 = sub i32 %422, %181
  %424 = add i32 %423, %184
  %425 = sub i32 %424, %185
  %426 = add i32 %425, %187
  %427 = sub i32 %426, %193
  %428 = add i32 %427, %195
  %429 = sub i32 %428, %201
  %430 = sub i32 %429, %202
  %431 = add i32 %430, %210
  %432 = sub i32 %431, %212
  %433 = sub i32 %432, %213
  %434 = add i32 %433, %221
  %435 = add i32 %434, %223
  %436 = sub i32 %435, %224
  %437 = add i32 %436, %230
  %438 = sub i32 %437, %234
  %439 = sub i32 %438, %236
  %440 = add i32 %439, %238
  %441 = sub i32 %440, %246
  %442 = add i32 %441, %247
  %443 = sub i32 %442, %251
  %444 = sub i32 %443, %258
  %445 = sub i32 %444, %262
  %446 = add i32 %445, %264
  %447 = add i32 %446, %265
  %448 = add i32 %447, %266
  %449 = sub i32 %448, %267
  %450 = sub i32 %449, %270
  %451 = sub i32 %450, %272
  %452 = sub i32 %451, %273
  %453 = add i32 %452, %275
  %454 = add i32 %453, %278
  %455 = add i32 %454, %172
  %456 = sub i32 %455, %216
  %457 = sub i32 %456, %218
  %458 = sub i32 %457, %227
  %459 = sub i32 %458, %232
  %460 = add i32 %459, %241
  %461 = sub i32 %460, %253
  %462 = sub i32 %461, %255
  %463 = add i32 %462, %261
  %464 = add i32 %463, %284
  %465 = sub i32 %464, %286
  %466 = sub i32 %465, %209
  %467 = add i32 %466, %319
  %468 = add i32 %467, %316
  %469 = add i32 %468, %312
  %470 = add i32 %469, %307
  %471 = add i32 %470, %302
  %472 = icmp eq i32 %19, %471
  %473 = select i1 %472, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)
  %474 = tail call i32 @puts(i8* nonnull dereferenceable(1) %473)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #1 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %7) #5
  %8 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %8) #5
  %9 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %9) #5
  %10 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %10) #5
  %11 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %11) #5
  %12 = bitcast i32* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %12) #5
  %13 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3, i32* nonnull %4, i32* nonnull %5, i32* nonnull %6)
  %14 = load i32, i32* %1, align 4, !tbaa !2
  %15 = load i32, i32* %2, align 4, !tbaa !2
  %16 = load i32, i32* %3, align 4, !tbaa !2
  %17 = load i32, i32* %4, align 4, !tbaa !2
  %18 = load i32, i32* %5, align 4, !tbaa !2
  %19 = load i32, i32* %6, align 4, !tbaa !2
  call void @crackme(i32 %14, i32 %15, i32 %16, i32 %17, i32 %18, i32 %19)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %12) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %11) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %10) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %9) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %8) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %7) #5
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare dso_local i32 @__isoc99_scanf(i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #4

attributes #0 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Ubuntu clang version 10.0.1-++20200708122807+ef32c611aa2-1~exp1~20200707223407.61 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
