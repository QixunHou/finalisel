digraph "DFG for'crackme' function" {
	Node0x1164af0[shape=record, label="  %3 = xor i32 %1, -1"];
	Node0x1164b60[shape=record, label="  %4 = and i32 %1, %0"];
	Node0x1164c20[shape=record, label="  %5 = or i32 %1, %0"];
	Node0x1164c90[shape=record, label="  %6 = shl i32 %0, 1"];
	Node0x1164d30[shape=record, label="  %7 = xor i32 %6, -2"];
	Node0x1164da0[shape=record, label="  %8 = and i32 %3, %0"];
	Node0x1164e10[shape=record, label="  %9 = or i32 %3, %0"];
	Node0x1164e80[shape=record, label="  %10 = xor i32 %5, -1"];
	Node0x1164f20[shape=record, label="  %11 = mul i32 %10, 3"];
	Node0x1164f90[shape=record, label="  %12 = xor i32 %9, -1"];
	Node0x1165030[shape=record, label="  %13 = shl i32 %0, 2"];
	Node0x11650a0[shape=record, label="  %14 = sub i32 3, %0"];
	Node0x1165110[shape=record, label="  %15 = add i32 %14, %4"];
	Node0x1165180[shape=record, label="  %16 = add i32 %15, %5"];
	Node0x11651f0[shape=record, label="  %17 = add i32 %16, %7"];
	Node0x1165260[shape=record, label="  %18 = add i32 %17, %8"];
	Node0x11652d0[shape=record, label="  %19 = sub i32 %18, %9"];
	Node0x1165340[shape=record, label="  %20 = add i32 %19, %12"];
	Node0x11653b0[shape=record, label="  %21 = add i32 %20, %11"];
	Node0x1165420[shape=record, label="  %22 = add i32 %21, %13"];
	Node0x1165490[shape=record, label="  %23 = icmp eq i32 %22, -1"];
	Node0x1105268[shape=record, label="  %24 = select i1 %23, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0x1165930[shape=record, label="  %25 = tail call i32 @puts(i8* nonnull dereferenceable(1) %24)"];
	Node0x1165980[shape=record, label="  ret void"];
	Node0x1164af0 -> Node0x1164b60;
	Node0x1164b60 -> Node0x1164c20;
	Node0x1164c20 -> Node0x1164c90;
	Node0x1164c90 -> Node0x1164d30;
	Node0x1164d30 -> Node0x1164da0;
	Node0x1164da0 -> Node0x1164e10;
	Node0x1164e10 -> Node0x1164e80;
	Node0x1164e80 -> Node0x1164f20;
	Node0x1164f20 -> Node0x1164f90;
	Node0x1164f90 -> Node0x1165030;
	Node0x1165030 -> Node0x11650a0;
	Node0x11650a0 -> Node0x1165110;
	Node0x1165110 -> Node0x1165180;
	Node0x1165180 -> Node0x11651f0;
	Node0x11651f0 -> Node0x1165260;
	Node0x1165260 -> Node0x11652d0;
	Node0x11652d0 -> Node0x1165340;
	Node0x1165340 -> Node0x11653b0;
	Node0x11653b0 -> Node0x1165420;
	Node0x1165420 -> Node0x1165490;
	Node0x1165490 -> Node0x1105268;
	Node0x1105268 -> Node0x1165930;
	Node0x1165930 -> Node0x1165980;
edge [color=red]
	Node0x1164c90 -> Node0x1164d30;
	Node0x1164af0 -> Node0x1164da0;
	Node0x1164af0 -> Node0x1164e10;
	Node0x1164c20 -> Node0x1164e80;
	Node0x1164e80 -> Node0x1164f20;
	Node0x1164e10 -> Node0x1164f90;
	Node0x11650a0 -> Node0x1165110;
	Node0x1164b60 -> Node0x1165110;
	Node0x1165110 -> Node0x1165180;
	Node0x1164c20 -> Node0x1165180;
	Node0x1165180 -> Node0x11651f0;
	Node0x1164d30 -> Node0x11651f0;
	Node0x11651f0 -> Node0x1165260;
	Node0x1164da0 -> Node0x1165260;
	Node0x1165260 -> Node0x11652d0;
	Node0x1164e10 -> Node0x11652d0;
	Node0x11652d0 -> Node0x1165340;
	Node0x1164f90 -> Node0x1165340;
	Node0x1165340 -> Node0x11653b0;
	Node0x1164f20 -> Node0x11653b0;
	Node0x11653b0 -> Node0x1165420;
	Node0x1165030 -> Node0x1165420;
	Node0x1165420 -> Node0x1165490;
	Node0x1165490 -> Node0x1105268;
	Node0x1105268 -> Node0x1165930;
}
