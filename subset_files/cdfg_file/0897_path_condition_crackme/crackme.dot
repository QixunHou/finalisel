digraph "DFG for'crackme' function" {
	Node0xab1b50[shape=record, label="  %3 = xor i32 %1, -1"];
	Node0xab1bf0[shape=record, label="  %4 = add i32 %1, 1"];
	Node0xab1cb0[shape=record, label="  %5 = or i32 %3, %0"];
	Node0xab1d20[shape=record, label="  %6 = and i32 %3, %0"];
	Node0xab1d90[shape=record, label="  %7 = and i32 %1, %0"];
	Node0xab1e00[shape=record, label="  %8 = or i32 %1, %0"];
	Node0xab1e70[shape=record, label="  %9 = xor i32 %1, %0"];
	Node0xab1ee0[shape=record, label="  %10 = xor i32 %8, -1"];
	Node0xab1f50[shape=record, label="  %11 = mul i32 %10, 5"];
	Node0xab1fc0[shape=record, label="  %12 = xor i32 %5, -1"];
	Node0xab2060[shape=record, label="  %13 = mul i32 %12, 3"];
	Node0xab20d0[shape=record, label="  %14 = shl i32 %6, 1"];
	Node0xab2170[shape=record, label="  %15 = shl i32 %7, 2"];
	Node0xab21e0[shape=record, label="  %16 = sub i32 5, %5"];
	Node0xab2250[shape=record, label="  %17 = add i32 %16, %6"];
	Node0xab22c0[shape=record, label="  %18 = add i32 %17, %7"];
	Node0xab2330[shape=record, label="  %19 = add i32 %18, %8"];
	Node0xab23a0[shape=record, label="  %20 = add i32 %19, %9"];
	Node0xab2410[shape=record, label="  %21 = add i32 %20, %11"];
	Node0xab2480[shape=record, label="  %22 = add i32 %21, %13"];
	Node0xab24f0[shape=record, label="  %23 = add i32 %22, %14"];
	Node0xab2560[shape=record, label="  %24 = add i32 %23, %15"];
	Node0xab25d0[shape=record, label="  %25 = icmp eq i32 %4, %24"];
	Node0xa52268[shape=record, label="  %26 = select i1 %25, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0xab2a70[shape=record, label="  %27 = tail call i32 @puts(i8* nonnull dereferenceable(1) %26)"];
	Node0xab2ac0[shape=record, label="  ret void"];
	Node0xab1b50 -> Node0xab1bf0;
	Node0xab1bf0 -> Node0xab1cb0;
	Node0xab1cb0 -> Node0xab1d20;
	Node0xab1d20 -> Node0xab1d90;
	Node0xab1d90 -> Node0xab1e00;
	Node0xab1e00 -> Node0xab1e70;
	Node0xab1e70 -> Node0xab1ee0;
	Node0xab1ee0 -> Node0xab1f50;
	Node0xab1f50 -> Node0xab1fc0;
	Node0xab1fc0 -> Node0xab2060;
	Node0xab2060 -> Node0xab20d0;
	Node0xab20d0 -> Node0xab2170;
	Node0xab2170 -> Node0xab21e0;
	Node0xab21e0 -> Node0xab2250;
	Node0xab2250 -> Node0xab22c0;
	Node0xab22c0 -> Node0xab2330;
	Node0xab2330 -> Node0xab23a0;
	Node0xab23a0 -> Node0xab2410;
	Node0xab2410 -> Node0xab2480;
	Node0xab2480 -> Node0xab24f0;
	Node0xab24f0 -> Node0xab2560;
	Node0xab2560 -> Node0xab25d0;
	Node0xab25d0 -> Node0xa52268;
	Node0xa52268 -> Node0xab2a70;
	Node0xab2a70 -> Node0xab2ac0;
edge [color=red]
	Node0xab1b50 -> Node0xab1cb0;
	Node0xab1b50 -> Node0xab1d20;
	Node0xab1e00 -> Node0xab1ee0;
	Node0xab1ee0 -> Node0xab1f50;
	Node0xab1cb0 -> Node0xab1fc0;
	Node0xab1fc0 -> Node0xab2060;
	Node0xab1d20 -> Node0xab20d0;
	Node0xab1d90 -> Node0xab2170;
	Node0xab1cb0 -> Node0xab21e0;
	Node0xab21e0 -> Node0xab2250;
	Node0xab1d20 -> Node0xab2250;
	Node0xab2250 -> Node0xab22c0;
	Node0xab1d90 -> Node0xab22c0;
	Node0xab22c0 -> Node0xab2330;
	Node0xab1e00 -> Node0xab2330;
	Node0xab2330 -> Node0xab23a0;
	Node0xab1e70 -> Node0xab23a0;
	Node0xab23a0 -> Node0xab2410;
	Node0xab1f50 -> Node0xab2410;
	Node0xab2410 -> Node0xab2480;
	Node0xab2060 -> Node0xab2480;
	Node0xab2480 -> Node0xab24f0;
	Node0xab20d0 -> Node0xab24f0;
	Node0xab24f0 -> Node0xab2560;
	Node0xab2170 -> Node0xab2560;
	Node0xab1bf0 -> Node0xab25d0;
	Node0xab2560 -> Node0xab25d0;
	Node0xab25d0 -> Node0xa52268;
	Node0xa52268 -> Node0xab2a70;
}
