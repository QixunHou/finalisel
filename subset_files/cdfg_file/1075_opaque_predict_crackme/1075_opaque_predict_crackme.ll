; ModuleID = '../.././c_source_file/1075_opaque_predict_crackme.c'
source_filename = "../.././c_source_file/1075_opaque_predict_crackme.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str.2 = private unnamed_addr constant [15 x i8] c"%d %d %d %d %d\00", align 1
@str = private unnamed_addr constant [4 x i8] c"bad\00", align 1
@str.3 = private unnamed_addr constant [5 x i8] c"good\00", align 1

; Function Attrs: nofree nounwind uwtable
define dso_local void @crackme(i32 %0, i32 %1, i32 %2, i32 %3, i32 %4) local_unnamed_addr #0 {
  %6 = or i32 %4, %3
  %7 = and i32 %4, %3
  %8 = xor i32 %7, -1
  %9 = xor i32 %2, -1
  %10 = and i32 %9, %0
  %11 = xor i32 %10, -1
  %12 = xor i32 %11, %1
  %13 = add i32 %6, %12
  %14 = sub i32 %8, %13
  %15 = xor i32 %4, -1
  %16 = add i32 %4, 1
  %17 = xor i32 %15, %3
  %18 = shl i32 %6, 1
  %19 = xor i32 %18, -2
  %20 = and i32 %15, %3
  %21 = xor i32 %1, -1
  %22 = and i32 %21, %2
  %23 = and i32 %22, %0
  %24 = xor i32 %0, -1
  %25 = or i32 %21, %2
  %26 = and i32 %25, %24
  %27 = or i32 %23, %26
  %28 = and i32 %1, %0
  %29 = or i32 %9, %1
  %30 = xor i32 %29, %28
  %31 = or i32 %21, %0
  %32 = xor i32 %31, -1
  %33 = xor i32 %32, %2
  %34 = or i32 %2, %0
  %35 = xor i32 %34, %1
  %36 = or i32 %9, %0
  %37 = xor i32 %36, -1
  %38 = add i32 %36, 1
  %39 = xor i32 %2, %1
  %40 = or i32 %39, %0
  %41 = xor i32 %23, %40
  %42 = and i32 %39, %0
  %43 = and i32 %21, %0
  %44 = xor i32 %43, -1
  %45 = and i32 %39, %44
  %46 = xor i32 %1, %0
  %47 = xor i32 %2, %0
  %48 = xor i32 %47, -1
  %49 = or i32 %46, %48
  %50 = shl i32 %49, 1
  %51 = and i32 %9, %1
  %52 = xor i32 %51, -1
  %53 = shl i32 %52, 1
  %54 = and i32 %36, %1
  %55 = or i32 %2, %1
  %56 = xor i32 %55, -1
  %57 = or i32 %56, %0
  %58 = xor i32 %46, -1
  %59 = and i32 %34, %58
  %60 = and i32 %22, %24
  %61 = and i32 %25, %0
  %62 = or i32 %60, %61
  %63 = and i32 %2, %1
  %64 = xor i32 %63, -1
  %65 = or i32 %64, %24
  %66 = shl i32 %65, 2
  %67 = or i32 %64, %0
  %68 = and i32 %36, %58
  %69 = or i32 %46, %2
  %70 = and i32 %46, %2
  %71 = and i32 %2, %0
  %72 = and i32 %44, %2
  %73 = or i32 %47, %32
  %74 = or i32 %43, %9
  %75 = or i32 %1, %0
  %76 = xor i32 %75, -1
  %77 = or i32 %47, %76
  %78 = xor i32 %34, -1
  %79 = add i32 %34, 1
  %80 = xor i32 %39, -1
  %81 = or i32 %80, %32
  %82 = shl i32 %81, 1
  %83 = xor i32 %34, %28
  %84 = shl i32 %83, 1
  %85 = add i32 %43, 1
  %86 = or i32 %43, %2
  %87 = and i32 %55, %24
  %88 = or i32 %47, %58
  %89 = xor i32 %36, %28
  %90 = shl i32 %89, 2
  %91 = and i32 %11, %21
  %92 = or i32 %43, %80
  %93 = xor i32 %63, %0
  %94 = or i32 %28, %48
  %95 = xor i32 %55, %0
  %96 = or i32 %46, %9
  %97 = and i32 %47, %58
  %98 = and i32 %63, %0
  %99 = or i32 %98, %95
  %100 = xor i32 %98, -1
  %101 = xor i32 %87, %100
  %102 = or i32 %46, %78
  %103 = or i32 %56, %24
  %104 = and i32 %31, %2
  %105 = xor i32 %28, %2
  %106 = shl i32 %105, 1
  %107 = and i32 %63, %24
  %108 = and i32 %55, %0
  %109 = xor i32 %107, -1
  %110 = xor i32 %108, %109
  %111 = and i32 %11, %58
  %112 = and i32 %47, %44
  %113 = xor i32 %39, %0
  %114 = add i32 %75, 1
  %115 = or i32 %28, %37
  %116 = or i32 %37, %21
  %117 = or i32 %71, %21
  %118 = and i32 %58, %2
  %119 = and i32 %46, %48
  %120 = or i32 %10, %63
  %121 = or i32 %78, %1
  %122 = or i32 %39, %43
  %123 = or i32 %98, %87
  %124 = or i32 %47, %43
  %125 = or i32 %48, %32
  %126 = or i32 %55, %0
  %127 = or i32 %28, %9
  %128 = xor i32 %71, %31
  %129 = add i32 %63, 1
  %130 = or i32 %23, %113
  %131 = or i32 %47, %21
  %132 = and i32 %29, %24
  %133 = shl i32 %9, 1
  %134 = and i32 %48, %1
  %135 = xor i32 %29, -1
  %136 = add i32 %29, 1
  %137 = xor i32 %98, %113
  %138 = and i32 %46, %9
  %139 = and i32 %47, %1
  %140 = xor i32 %56, %0
  %141 = or i32 %10, %58
  %142 = shl i32 %141, 1
  %143 = xor i32 %10, %1
  %144 = shl i32 %24, 1
  %145 = or i32 %48, %21
  %146 = or i32 %52, %24
  %147 = and i32 %31, %80
  %148 = and i32 %11, %1
  %149 = and i32 %36, %46
  %150 = and i32 %75, %80
  %151 = shl i32 %150, 1
  %152 = and i32 %48, %58
  %153 = or i32 %52, %0
  %154 = and i32 %31, %48
  %155 = xor i32 %10, %64
  %156 = and i32 %39, %24
  %157 = or i32 %63, %24
  %158 = xor i32 %28, -1
  %159 = and i32 %48, %158
  %160 = xor i32 %42, %109
  %161 = or i32 %32, %2
  %162 = or i32 %10, %1
  %163 = and i32 %39, %75
  %164 = and i32 %80, %24
  %165 = shl i32 %164, 1
  %166 = or i32 %39, %24
  %167 = xor i32 %29, %0
  %168 = and i32 %48, %21
  %169 = xor i32 %80, %0
  %170 = or i32 %51, %24
  %171 = xor i32 %95, %100
  %172 = xor i32 %10, %29
  %173 = or i32 %80, %76
  %174 = and i32 %158, %2
  %175 = or i32 %71, %56
  %176 = or i32 %29, %0
  %177 = add i32 %28, 1
  %178 = xor i32 %23, -1
  %179 = xor i32 %26, %178
  %180 = xor i32 %43, %52
  %181 = xor i32 %52, %0
  %182 = xor i32 %71, -1
  %183 = add i32 %71, 1
  %184 = xor i32 %60, %166
  %185 = or i32 %39, %32
  %186 = or i32 %63, %0
  %187 = or i32 %9, %76
  %188 = and i32 %9, %44
  %189 = xor i32 %113, -1
  %190 = or i32 %98, %189
  %191 = and i32 %182, %58
  %192 = shl i32 %75, 1
  %193 = and i32 %64, %0
  %194 = or i32 %47, %28
  %195 = or i32 %78, %21
  %196 = shl i32 %195, 1
  %197 = xor i32 %166, -1
  %198 = or i32 %60, %197
  %199 = and i32 %64, %24
  %200 = xor i32 %43, %64
  %201 = shl i32 %200, 1
  %202 = and i32 %31, %9
  %203 = or i32 %58, %2
  %204 = or i32 %80, %24
  %205 = or i32 %55, %24
  %206 = or i32 %39, %28
  %207 = shl i32 %206, 1
  %208 = or i32 %51, %0
  %209 = and i32 %47, %21
  %210 = or i32 %76, %2
  %211 = xor i32 %78, %1
  %212 = or i32 %135, %24
  %213 = or i32 %28, %80
  %214 = xor i32 %75, %2
  %215 = or i32 %107, %42
  %216 = or i32 %28, %135
  %217 = shl i32 %216, 1
  %218 = or i32 %9, %32
  %219 = or i32 %71, %58
  %220 = xor i32 %36, %1
  %221 = or i32 %71, %1
  %222 = or i32 %37, %58
  %223 = and i32 %46, %11
  %224 = xor i32 %156, %100
  %225 = and i32 %75, %48
  %226 = or i32 %28, %78
  %227 = shl i32 %226, 1
  %228 = and i32 %182, %21
  %229 = or i32 %51, %43
  %230 = or i32 %135, %0
  %231 = xor i32 %37, %1
  %232 = xor i32 %55, %28
  %233 = and i32 %52, %24
  %234 = or i32 %107, %108
  %235 = and i32 %75, %2
  %236 = or i32 %71, %76
  %237 = xor i32 %25, %0
  %238 = xor i32 %237, %178
  %239 = and i32 %80, %158
  %240 = or i32 %23, %237
  %241 = xor i32 %76, %2
  %242 = xor i32 %40, -1
  %243 = or i32 %23, %242
  %244 = or i32 %71, %32
  %245 = xor i32 %71, %1
  %246 = or i32 %80, %0
  %247 = or i32 %46, %37
  %248 = or i32 %39, %76
  %249 = and i32 %9, %58
  %250 = and i32 %39, %158
  %251 = or i32 %9, %58
  %252 = and i32 %56, %24
  %253 = and i32 %51, %24
  %254 = mul i32 %253, 20
  %255 = and i32 %56, %0
  %256 = mul i32 %255, 15
  %257 = and i32 %51, %0
  %258 = and i32 %135, %24
  %259 = mul i32 %258, 7
  %260 = and i32 %135, %0
  %261 = mul i32 %260, 29
  %262 = add i32 %214, %2
  %263 = add i32 %262, %210
  %264 = add i32 %263, %127
  %265 = add i32 %264, %252
  %266 = add i32 %265, %239
  %267 = add i32 %266, %212
  %268 = add i32 %267, %211
  %269 = add i32 %268, %199
  %270 = add i32 %269, %180
  %271 = add i32 %270, %173
  %272 = add i32 %271, %163
  %273 = add i32 %272, %154
  %274 = add i32 %273, %152
  %275 = add i32 %274, %148
  %276 = add i32 %275, %147
  %277 = add i32 %276, %126
  %278 = add i32 %277, %116
  %279 = add i32 %278, %103
  %280 = add i32 %279, %68
  %281 = add i32 %280, %16
  %282 = add i32 %281, %41
  %283 = add i32 %282, %234
  %284 = shl i32 %283, 1
  %285 = add i32 %257, %0
  %286 = sub i32 %42, %285
  %287 = add i32 %286, %20
  %288 = sub i32 %287, %238
  %289 = mul i32 %288, 5
  %290 = add i32 %159, %3
  %291 = add i32 %290, %223
  %292 = sub i32 %45, %291
  %293 = mul i32 %292, 3
  %294 = sub i32 %107, %98
  %295 = mul i32 %294, 6
  %296 = add i32 %143, %241
  %297 = shl i32 %296, 2
  %298 = sub i32 2, %144
  %299 = add i32 %298, %1
  %300 = add i32 %299, %85
  %301 = add i32 %300, %114
  %302 = add i32 %301, %32
  %303 = add i32 %302, %177
  %304 = add i32 %303, 1
  %305 = sub i32 %304, %33
  %306 = add i32 %305, %38
  %307 = sub i32 %306, %69
  %308 = sub i32 %307, %70
  %309 = sub i32 %308, %71
  %310 = add i32 %309, %72
  %311 = add i32 %310, %74
  %312 = add i32 %311, %79
  %313 = add i32 %312, %86
  %314 = sub i32 %313, %96
  %315 = sub i32 %314, %104
  %316 = add i32 %315, %80
  %317 = add i32 %316, %118
  %318 = add i32 %317, %63
  %319 = add i32 %318, %56
  %320 = add i32 %319, %129
  %321 = sub i32 %320, %133
  %322 = add i32 %321, %136
  %323 = add i32 %322, %138
  %324 = sub i32 %323, %161
  %325 = add i32 %324, %29
  %326 = sub i32 %325, %174
  %327 = add i32 %326, %183
  %328 = add i32 %327, %187
  %329 = add i32 %328, %188
  %330 = sub i32 %329, %192
  %331 = add i32 %330, %202
  %332 = sub i32 %331, %203
  %333 = sub i32 %332, %218
  %334 = sub i32 %333, %235
  %335 = add i32 %334, %249
  %336 = add i32 %335, %251
  %337 = sub i32 %336, %30
  %338 = add i32 %337, %35
  %339 = sub i32 %338, %53
  %340 = add i32 %339, %54
  %341 = add i32 %340, %57
  %342 = sub i32 %341, %59
  %343 = add i32 %342, %67
  %344 = sub i32 %343, %73
  %345 = sub i32 %344, %77
  %346 = add i32 %345, %87
  %347 = add i32 %346, %88
  %348 = add i32 %347, %91
  %349 = add i32 %348, %92
  %350 = add i32 %349, %93
  %351 = sub i32 %350, %94
  %352 = add i32 %351, %95
  %353 = add i32 %352, %97
  %354 = add i32 %353, %102
  %355 = sub i32 %354, %106
  %356 = add i32 %355, %111
  %357 = add i32 %356, %112
  %358 = add i32 %357, %113
  %359 = sub i32 %358, %115
  %360 = sub i32 %359, %117
  %361 = add i32 %360, %119
  %362 = add i32 %361, %120
  %363 = add i32 %362, %121
  %364 = add i32 %363, %122
  %365 = add i32 %364, %124
  %366 = sub i32 %365, %125
  %367 = add i32 %366, %128
  %368 = add i32 %367, %131
  %369 = sub i32 %368, %132
  %370 = add i32 %369, %134
  %371 = add i32 %370, %139
  %372 = add i32 %371, %140
  %373 = add i32 %372, %145
  %374 = sub i32 %373, %146
  %375 = sub i32 %374, %149
  %376 = sub i32 %375, %153
  %377 = sub i32 %376, %155
  %378 = add i32 %377, %156
  %379 = sub i32 %378, %157
  %380 = sub i32 %379, %40
  %381 = add i32 %380, %162
  %382 = add i32 %381, %166
  %383 = add i32 %382, %167
  %384 = sub i32 %383, %168
  %385 = sub i32 %384, %108
  %386 = add i32 %385, %169
  %387 = sub i32 %386, %170
  %388 = add i32 %387, %172
  %389 = sub i32 %388, %175
  %390 = sub i32 %389, %176
  %391 = sub i32 %390, %181
  %392 = sub i32 %391, %185
  %393 = sub i32 %392, %186
  %394 = add i32 %393, %191
  %395 = sub i32 %394, %193
  %396 = sub i32 %395, %194
  %397 = sub i32 %396, %204
  %398 = sub i32 %397, %205
  %399 = add i32 %398, %208
  %400 = sub i32 %399, %209
  %401 = sub i32 %400, %213
  %402 = add i32 %401, %219
  %403 = sub i32 %402, %220
  %404 = sub i32 %403, %221
  %405 = add i32 %404, %222
  %406 = add i32 %405, %225
  %407 = sub i32 %406, %228
  %408 = sub i32 %407, %229
  %409 = add i32 %408, %230
  %410 = add i32 %409, %231
  %411 = sub i32 %410, %232
  %412 = add i32 %411, %233
  %413 = sub i32 %412, %236
  %414 = sub i32 %413, %244
  %415 = sub i32 %414, %245
  %416 = add i32 %415, %246
  %417 = sub i32 %416, %247
  %418 = add i32 %417, %248
  %419 = sub i32 %418, %250
  %420 = add i32 %419, %17
  %421 = add i32 %420, %7
  %422 = sub i32 %421, %27
  %423 = sub i32 %422, %50
  %424 = sub i32 %423, %62
  %425 = sub i32 %424, %66
  %426 = sub i32 %425, %82
  %427 = sub i32 %426, %84
  %428 = sub i32 %427, %90
  %429 = sub i32 %428, %99
  %430 = add i32 %429, %101
  %431 = sub i32 %430, %110
  %432 = add i32 %431, %123
  %433 = sub i32 %432, %130
  %434 = add i32 %433, %137
  %435 = sub i32 %434, %142
  %436 = sub i32 %435, %151
  %437 = add i32 %436, %160
  %438 = sub i32 %437, %165
  %439 = sub i32 %438, %171
  %440 = sub i32 %439, %179
  %441 = sub i32 %440, %184
  %442 = add i32 %441, %190
  %443 = sub i32 %442, %196
  %444 = add i32 %443, %198
  %445 = sub i32 %444, %201
  %446 = sub i32 %445, %207
  %447 = add i32 %446, %215
  %448 = sub i32 %447, %217
  %449 = add i32 %448, %224
  %450 = sub i32 %449, %227
  %451 = sub i32 %450, %240
  %452 = sub i32 %451, %243
  %453 = add i32 %452, %254
  %454 = add i32 %453, %256
  %455 = add i32 %454, %259
  %456 = add i32 %455, %261
  %457 = add i32 %456, %295
  %458 = add i32 %457, %297
  %459 = add i32 %458, %19
  %460 = add i32 %459, %293
  %461 = add i32 %460, %289
  %462 = add i32 %461, %284
  %463 = icmp eq i32 %14, %462
  %464 = select i1 %463, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)
  %465 = tail call i32 @puts(i8* nonnull dereferenceable(1) %464)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #1 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %6) #5
  %7 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %7) #5
  %8 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %8) #5
  %9 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %9) #5
  %10 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %10) #5
  %11 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3, i32* nonnull %4, i32* nonnull %5)
  %12 = load i32, i32* %1, align 4, !tbaa !2
  %13 = load i32, i32* %2, align 4, !tbaa !2
  %14 = load i32, i32* %3, align 4, !tbaa !2
  %15 = load i32, i32* %4, align 4, !tbaa !2
  %16 = load i32, i32* %5, align 4, !tbaa !2
  call void @crackme(i32 %12, i32 %13, i32 %14, i32 %15, i32 %16)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %10) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %9) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %8) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %7) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %6) #5
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare dso_local i32 @__isoc99_scanf(i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #4

attributes #0 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Ubuntu clang version 10.0.1-++20200708122807+ef32c611aa2-1~exp1~20200707223407.61 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
