; ModuleID = '../.././c_source_file/0471_path_condition_crackme.c'
source_filename = "../.././c_source_file/0471_path_condition_crackme.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str.2 = private unnamed_addr constant [15 x i8] c"%d %d %d %d %d\00", align 1
@str = private unnamed_addr constant [4 x i8] c"bad\00", align 1
@str.3 = private unnamed_addr constant [5 x i8] c"good\00", align 1

; Function Attrs: nofree nounwind uwtable
define dso_local void @crackme(i32 %0, i32 %1, i32 %2, i32 %3, i32 %4) local_unnamed_addr #0 {
  %6 = add i32 %4, 1
  %7 = and i32 %2, %1
  %8 = and i32 %7, %0
  %9 = xor i32 %2, %1
  %10 = xor i32 %9, %0
  %11 = xor i32 %10, -1
  %12 = or i32 %8, %11
  %13 = sub i32 %6, %12
  %14 = and i32 %4, %3
  %15 = add i32 %14, 1
  %16 = xor i32 %3, -1
  %17 = or i32 %16, %4
  %18 = xor i32 %16, %4
  %19 = or i32 %4, %3
  %20 = shl i32 %19, 1
  %21 = xor i32 %20, -2
  %22 = and i32 %16, %4
  %23 = xor i32 %1, -1
  %24 = xor i32 %2, -1
  %25 = or i32 %24, %0
  %26 = and i32 %25, %23
  %27 = or i32 %1, %0
  %28 = xor i32 %27, %2
  %29 = shl i32 %28, 1
  %30 = xor i32 %1, %0
  %31 = xor i32 %30, -1
  %32 = xor i32 %2, %0
  %33 = xor i32 %32, -1
  %34 = and i32 %33, %31
  %35 = shl i32 %34, 1
  %36 = and i32 %23, %0
  %37 = xor i32 %9, -1
  %38 = or i32 %36, %37
  %39 = and i32 %2, %0
  %40 = or i32 %23, %0
  %41 = xor i32 %39, %40
  %42 = or i32 %32, %1
  %43 = xor i32 %27, -1
  %44 = or i32 %33, %43
  %45 = xor i32 %36, -1
  %46 = and i32 %45, %2
  %47 = and i32 %24, %0
  %48 = xor i32 %47, -1
  %49 = and i32 %48, %31
  %50 = xor i32 %25, -1
  %51 = or i32 %50, %1
  %52 = or i32 %24, %31
  %53 = shl i32 %52, 1
  %54 = and i32 %40, %33
  %55 = and i32 %1, %0
  %56 = or i32 %2, %0
  %57 = xor i32 %56, %55
  %58 = or i32 %2, %1
  %59 = xor i32 %58, %0
  %60 = or i32 %8, %59
  %61 = xor i32 %55, -1
  %62 = and i32 %33, %61
  %63 = and i32 %40, %37
  %64 = and i32 %32, %45
  %65 = xor i32 %0, -1
  %66 = and i32 %58, %65
  %67 = or i32 %8, %66
  %68 = xor i32 %39, -1
  %69 = and i32 %68, %23
  %70 = shl i32 %69, 1
  %71 = or i32 %33, %31
  %72 = xor i32 %68, %1
  %73 = or i32 %9, %55
  %74 = or i32 %36, %33
  %75 = xor i32 %40, -1
  %76 = or i32 %9, %75
  %77 = and i32 %9, %40
  %78 = xor i32 %48, %1
  %79 = and i32 %40, %24
  %80 = and i32 %58, %0
  %81 = xor i32 %61, %2
  %82 = or i32 %24, %1
  %83 = xor i32 %82, -1
  %84 = xor i32 %83, %0
  %85 = and i32 %24, %1
  %86 = xor i32 %85, %0
  %87 = and i32 %9, %0
  %88 = or i32 %7, %0
  %89 = or i32 %32, %30
  %90 = and i32 %7, %65
  %91 = xor i32 %80, 2147483647
  %92 = xor i32 %91, %90
  %93 = shl i32 %92, 1
  %94 = or i32 %55, %33
  %95 = or i32 %39, %30
  %96 = or i32 %85, %0
  %97 = xor i32 %58, -1
  %98 = or i32 %39, %97
  %99 = and i32 %37, %65
  %100 = and i32 %24, %31
  %101 = or i32 %24, %75
  %102 = and i32 %33, %1
  %103 = shl i32 %102, 1
  %104 = xor i32 %56, -1
  %105 = or i32 %55, %104
  %106 = or i32 %75, %2
  %107 = and i32 %32, %1
  %108 = or i32 %104, %23
  %109 = and i32 %33, %45
  %110 = or i32 %85, %36
  %111 = or i32 %32, %55
  %112 = shl i32 %111, 1
  %113 = or i32 %47, %23
  %114 = and i32 %23, %2
  %115 = and i32 %114, %0
  %116 = xor i32 %115, %11
  %117 = or i32 %39, %1
  %118 = and i32 %32, %23
  %119 = xor i32 %58, %55
  %120 = or i32 %23, %2
  %121 = xor i32 %120, %0
  %122 = xor i32 %121, -1
  %123 = xor i32 %115, %122
  %124 = or i32 %115, %10
  %125 = or i32 %37, %43
  %126 = xor i32 %85, -1
  %127 = and i32 %126, %65
  %128 = or i32 %39, %75
  %129 = or i32 %47, %1
  %130 = shl i32 %129, 1
  %131 = and i32 %82, %65
  %132 = add i32 %82, 1
  %133 = xor i32 %7, %0
  %134 = or i32 %50, %23
  %135 = shl i32 %134, 1
  %136 = or i32 %97, %65
  %137 = xor i32 %87, -1
  %138 = xor i32 %90, %137
  %139 = or i32 %55, %83
  %140 = and i32 %56, %23
  %141 = add i32 %9, 1
  %142 = and i32 %25, %1
  %143 = shl i32 %142, 1
  %144 = xor i32 %25, %1
  %145 = and i32 %56, %31
  %146 = or i32 %85, %65
  %147 = shl i32 %146, 1
  %148 = and i32 %56, %30
  %149 = and i32 %32, %61
  %150 = xor i32 %39, %126
  %151 = xor i32 %7, -1
  %152 = xor i32 %36, %151
  %153 = xor i32 %56, %1
  %154 = or i32 %104, %1
  %155 = xor i32 %39, %58
  %156 = shl i32 %155, 1
  %157 = xor i32 %82, %0
  %158 = and i32 %25, %30
  %159 = or i32 %97, %0
  %160 = and i32 %68, %31
  %161 = and i32 %37, %61
  %162 = and i32 %114, %65
  %163 = and i32 %120, %0
  %164 = xor i32 %163, -1
  %165 = xor i32 %162, %164
  %166 = xor i32 %45, %2
  %167 = or i32 %83, %65
  %168 = xor i32 %55, %2
  %169 = shl i32 %47, 1
  %170 = or i32 %126, %65
  %171 = xor i32 %151, %0
  %172 = and i32 %24, %45
  %173 = or i32 %30, %33
  %174 = or i32 %9, %65
  %175 = xor i32 %174, -1
  %176 = or i32 %162, %175
  %177 = or i32 %9, %36
  %178 = and i32 %61, %2
  %179 = xor i32 %104, %1
  %180 = shl i32 %179, 1
  %181 = and i32 %151, %0
  %182 = or i32 %30, %104
  %183 = and i32 %9, %65
  %184 = xor i32 %8, -1
  %185 = xor i32 %183, %184
  %186 = or i32 %33, %1
  %187 = or i32 %36, %24
  %188 = or i32 %39, %31
  %189 = or i32 %55, %2
  %190 = xor i32 %162, %174
  %191 = or i32 %9, %0
  %192 = xor i32 %115, %191
  %193 = or i32 %151, %65
  %194 = or i32 %115, %121
  %195 = shl i32 %194, 1
  %196 = or i32 %47, %31
  %197 = xor i32 %36, %126
  %198 = and i32 %30, %68
  %199 = and i32 %27, %37
  %200 = xor i32 %47, %82
  %201 = xor i32 %43, %2
  %202 = or i32 %30, %24
  %203 = xor i32 %126, %0
  %204 = shl i32 %203, 2
  %205 = or i32 %7, %36
  %206 = xor i32 %25, %55
  %207 = xor i32 %36, %2
  %208 = xor i32 %39, %27
  %209 = or i32 %90, %87
  %210 = and i32 %32, %27
  %211 = shl i32 %210, 1
  %212 = xor i32 %39, %1
  %213 = or i32 %162, %163
  %214 = and i32 %30, %33
  %215 = shl i32 %214, 1
  %216 = and i32 %82, %0
  %217 = or i32 %30, %50
  %218 = and i32 %27, %33
  %219 = or i32 %33, %23
  %220 = and i32 %120, %65
  %221 = or i32 %115, %220
  %222 = or i32 %47, %7
  %223 = and i32 %32, %31
  %224 = xor i32 %37, %0
  %225 = and i32 %151, %65
  %226 = or i32 %82, %65
  %227 = or i32 %7, %65
  %228 = and i32 %30, %48
  %229 = or i32 %8, %183
  %230 = xor i32 %40, %2
  %231 = or i32 %151, %0
  %232 = and i32 %27, %24
  %233 = xor i32 %59, %184
  %234 = or i32 %32, %43
  %235 = or i32 %55, %50
  %236 = shl i32 %235, 2
  %237 = or i32 %58, %65
  %238 = or i32 %82, %0
  %239 = xor i32 %191, 2147483647
  %240 = or i32 %239, %115
  %241 = and i32 %48, %23
  %242 = and i32 %32, %40
  %243 = and i32 %27, %2
  %244 = or i32 %55, %97
  %245 = or i32 %39, %23
  %246 = and i32 %126, %0
  %247 = and i32 %9, %27
  %248 = or i32 %90, %80
  %249 = or i32 %47, %30
  %250 = or i32 %36, %2
  %251 = shl i32 %250, 1
  %252 = and i32 %48, %1
  %253 = shl i32 %252, 1
  %254 = or i32 %37, %75
  %255 = xor i32 %220, 2147483647
  %256 = xor i32 %255, %115
  %257 = shl i32 %256, 1
  %258 = or i32 %55, %37
  %259 = xor i32 %50, %1
  %260 = xor i32 %75, %2
  %261 = shl i32 %260, 1
  %262 = or i32 %32, %23
  %263 = xor i32 %8, %10
  %264 = and i32 %97, %65
  %265 = mul i32 %264, -11
  %266 = and i32 %85, %65
  %267 = mul i32 %266, -22
  %268 = and i32 %97, %0
  %269 = shl i32 %268, 1
  %270 = and i32 %85, %0
  %271 = mul i32 %270, 7
  %272 = and i32 %83, %65
  %273 = mul i32 %90, 9
  %274 = and i32 %83, %0
  %275 = sub i32 %227, %272
  %276 = add i32 %275, %86
  %277 = sub i32 %276, %62
  %278 = sub i32 %277, %116
  %279 = mul i32 %278, 3
  %280 = add i32 %125, %274
  %281 = sub i32 %22, %280
  %282 = mul i32 %281, 5
  %283 = add i32 %58, %187
  %284 = add i32 %283, %177
  %285 = shl i32 %284, 2
  %286 = add i32 %201, -1
  %287 = add i32 %286, %151
  %288 = add i32 %287, %189
  %289 = add i32 %288, %56
  %290 = add i32 %289, %79
  %291 = add i32 %290, %33
  %292 = add i32 %291, %3
  %293 = add i32 %292, %226
  %294 = add i32 %293, %223
  %295 = add i32 %294, %216
  %296 = add i32 %295, %206
  %297 = add i32 %296, %200
  %298 = add i32 %297, %196
  %299 = add i32 %298, %158
  %300 = add i32 %299, %77
  %301 = add i32 %300, %64
  %302 = add i32 %301, %51
  %303 = add i32 %302, %49
  %304 = add i32 %303, %38
  %305 = add i32 %304, %15
  %306 = add i32 %305, %240
  %307 = shl i32 %306, 1
  %308 = add i32 %0, %1
  %309 = add i32 %308, 5
  %310 = sub i32 %309, %36
  %311 = add i32 %310, %45
  %312 = add i32 %311, %61
  %313 = add i32 %312, %31
  %314 = sub i32 %313, %46
  %315 = sub i32 %314, %39
  %316 = add i32 %315, %81
  %317 = add i32 %316, %100
  %318 = add i32 %317, %101
  %319 = sub i32 %318, %106
  %320 = add i32 %319, %132
  %321 = add i32 %320, %141
  %322 = add i32 %321, %104
  %323 = add i32 %322, %166
  %324 = sub i32 %323, %168
  %325 = add i32 %324, %172
  %326 = sub i32 %325, %9
  %327 = add i32 %326, %178
  %328 = add i32 %327, %82
  %329 = sub i32 %328, %202
  %330 = add i32 %329, %207
  %331 = add i32 %330, %48
  %332 = sub i32 %331, %230
  %333 = sub i32 %332, %232
  %334 = sub i32 %333, %7
  %335 = sub i32 %334, %243
  %336 = sub i32 %335, %4
  %337 = sub i32 %336, %26
  %338 = sub i32 %337, %29
  %339 = sub i32 %338, %41
  %340 = sub i32 %339, %42
  %341 = add i32 %340, %44
  %342 = sub i32 %341, %53
  %343 = add i32 %342, %54
  %344 = add i32 %343, %57
  %345 = sub i32 %344, %63
  %346 = sub i32 %345, %71
  %347 = add i32 %346, %72
  %348 = sub i32 %347, %73
  %349 = add i32 %348, %74
  %350 = add i32 %349, %76
  %351 = sub i32 %350, %78
  %352 = sub i32 %351, %80
  %353 = add i32 %352, %84
  %354 = sub i32 %353, %87
  %355 = sub i32 %354, %88
  %356 = add i32 %355, %89
  %357 = sub i32 %356, %94
  %358 = sub i32 %357, %95
  %359 = add i32 %358, %96
  %360 = add i32 %359, %98
  %361 = add i32 %360, %99
  %362 = add i32 %361, %105
  %363 = sub i32 %362, %107
  %364 = add i32 %363, %108
  %365 = add i32 %364, %109
  %366 = add i32 %365, %110
  %367 = sub i32 %366, %113
  %368 = sub i32 %367, %117
  %369 = sub i32 %368, %118
  %370 = sub i32 %369, %119
  %371 = add i32 %370, %127
  %372 = sub i32 %371, %128
  %373 = add i32 %372, %131
  %374 = add i32 %373, %133
  %375 = add i32 %374, %136
  %376 = sub i32 %375, %139
  %377 = add i32 %376, %140
  %378 = sub i32 %377, %144
  %379 = sub i32 %378, %145
  %380 = sub i32 %379, %148
  %381 = add i32 %380, %149
  %382 = add i32 %381, %150
  %383 = add i32 %382, %152
  %384 = add i32 %383, %153
  %385 = add i32 %384, %154
  %386 = add i32 %385, %157
  %387 = sub i32 %386, %159
  %388 = add i32 %387, %160
  %389 = add i32 %388, %161
  %390 = sub i32 %389, %167
  %391 = sub i32 %390, %169
  %392 = sub i32 %391, %170
  %393 = add i32 %392, %171
  %394 = add i32 %393, %173
  %395 = sub i32 %394, %181
  %396 = sub i32 %395, %182
  %397 = add i32 %396, %186
  %398 = sub i32 %397, %183
  %399 = add i32 %398, %188
  %400 = add i32 %399, %193
  %401 = add i32 %400, %197
  %402 = add i32 %401, %198
  %403 = sub i32 %402, %199
  %404 = add i32 %403, %174
  %405 = sub i32 %404, %205
  %406 = add i32 %405, %208
  %407 = sub i32 %406, %212
  %408 = add i32 %407, %217
  %409 = add i32 %408, %218
  %410 = sub i32 %409, %219
  %411 = sub i32 %410, %222
  %412 = sub i32 %411, %224
  %413 = add i32 %412, %225
  %414 = add i32 %413, %228
  %415 = sub i32 %414, %231
  %416 = add i32 %415, %234
  %417 = sub i32 %416, %237
  %418 = add i32 %417, %238
  %419 = sub i32 %418, %241
  %420 = add i32 %419, %242
  %421 = add i32 %420, %191
  %422 = sub i32 %421, %59
  %423 = sub i32 %422, %244
  %424 = sub i32 %423, %245
  %425 = sub i32 %424, %246
  %426 = sub i32 %425, %247
  %427 = sub i32 %426, %249
  %428 = sub i32 %427, %251
  %429 = add i32 %428, %254
  %430 = sub i32 %429, %258
  %431 = sub i32 %430, %259
  %432 = sub i32 %431, %261
  %433 = sub i32 %432, %262
  %434 = sub i32 %433, %17
  %435 = add i32 %434, %18
  %436 = sub i32 %435, %35
  %437 = add i32 %436, %60
  %438 = add i32 %437, %67
  %439 = sub i32 %438, %70
  %440 = sub i32 %439, %103
  %441 = sub i32 %440, %112
  %442 = sub i32 %441, %123
  %443 = add i32 %442, %124
  %444 = sub i32 %443, %130
  %445 = sub i32 %444, %135
  %446 = add i32 %445, %138
  %447 = sub i32 %446, %143
  %448 = sub i32 %447, %147
  %449 = sub i32 %448, %156
  %450 = add i32 %449, %165
  %451 = add i32 %450, %176
  %452 = sub i32 %451, %180
  %453 = sub i32 %452, %185
  %454 = sub i32 %453, %190
  %455 = add i32 %454, %192
  %456 = sub i32 %455, %204
  %457 = add i32 %456, %209
  %458 = sub i32 %457, %211
  %459 = sub i32 %458, %213
  %460 = sub i32 %459, %215
  %461 = sub i32 %460, %221
  %462 = add i32 %461, %229
  %463 = sub i32 %462, %233
  %464 = sub i32 %463, %236
  %465 = sub i32 %464, %248
  %466 = sub i32 %465, %253
  %467 = sub i32 %466, %263
  %468 = add i32 %467, %265
  %469 = add i32 %468, %267
  %470 = sub i32 %469, %269
  %471 = add i32 %470, %271
  %472 = add i32 %471, %273
  %473 = sub i32 %472, %195
  %474 = add i32 %473, %21
  %475 = sub i32 %474, %93
  %476 = sub i32 %475, %257
  %477 = add i32 %476, %285
  %478 = add i32 %477, %282
  %479 = add i32 %478, %279
  %480 = add i32 %479, %307
  %481 = icmp eq i32 %13, %480
  %482 = select i1 %481, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)
  %483 = tail call i32 @puts(i8* nonnull dereferenceable(1) %482)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #1 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %6) #5
  %7 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %7) #5
  %8 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %8) #5
  %9 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %9) #5
  %10 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %10) #5
  %11 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3, i32* nonnull %4, i32* nonnull %5)
  %12 = load i32, i32* %1, align 4, !tbaa !2
  %13 = load i32, i32* %2, align 4, !tbaa !2
  %14 = load i32, i32* %3, align 4, !tbaa !2
  %15 = load i32, i32* %4, align 4, !tbaa !2
  %16 = load i32, i32* %5, align 4, !tbaa !2
  call void @crackme(i32 %12, i32 %13, i32 %14, i32 %15, i32 %16)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %10) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %9) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %8) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %7) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %6) #5
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare dso_local i32 @__isoc99_scanf(i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #4

attributes #0 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Ubuntu clang version 10.0.1-++20200708122807+ef32c611aa2-1~exp1~20200707223407.61 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
