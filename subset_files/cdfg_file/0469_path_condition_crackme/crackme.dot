digraph "DFG for'crackme' function" {
	Node0xb9b8b0[shape=record, label="  %3 = xor i32 %0, -1"];
	Node0xb9b920[shape=record, label="  %4 = xor i32 %1, -1"];
	Node0xb9b9e0[shape=record, label="  %5 = or i32 %4, %0"];
	Node0xb9ba50[shape=record, label="  %6 = or i32 %1, %0"];
	Node0xb9bac0[shape=record, label="  %7 = shl i32 %5, 1"];
	Node0xb9bb60[shape=record, label="  %8 = xor i32 %7, -2"];
	Node0xb9bbd0[shape=record, label="  %9 = sub i32 %5, %6"];
	Node0xb9bc40[shape=record, label="  %10 = add i32 %9, %8"];
	Node0xb9bcb0[shape=record, label="  %11 = icmp eq i32 %10, %3"];
	Node0xb3c388[shape=record, label="  %12 = select i1 %11, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0xb9c150[shape=record, label="  %13 = tail call i32 @puts(i8* nonnull dereferenceable(1) %12)"];
	Node0xb9c1a0[shape=record, label="  ret void"];
	Node0xb9b8b0 -> Node0xb9b920;
	Node0xb9b920 -> Node0xb9b9e0;
	Node0xb9b9e0 -> Node0xb9ba50;
	Node0xb9ba50 -> Node0xb9bac0;
	Node0xb9bac0 -> Node0xb9bb60;
	Node0xb9bb60 -> Node0xb9bbd0;
	Node0xb9bbd0 -> Node0xb9bc40;
	Node0xb9bc40 -> Node0xb9bcb0;
	Node0xb9bcb0 -> Node0xb3c388;
	Node0xb3c388 -> Node0xb9c150;
	Node0xb9c150 -> Node0xb9c1a0;
edge [color=red]
	Node0xb9b920 -> Node0xb9b9e0;
	Node0xb9b9e0 -> Node0xb9bac0;
	Node0xb9bac0 -> Node0xb9bb60;
	Node0xb9b9e0 -> Node0xb9bbd0;
	Node0xb9ba50 -> Node0xb9bbd0;
	Node0xb9bbd0 -> Node0xb9bc40;
	Node0xb9bb60 -> Node0xb9bc40;
	Node0xb9bc40 -> Node0xb9bcb0;
	Node0xb9b8b0 -> Node0xb9bcb0;
	Node0xb9bcb0 -> Node0xb3c388;
	Node0xb3c388 -> Node0xb9c150;
}
