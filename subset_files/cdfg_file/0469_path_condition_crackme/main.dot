digraph "DFG for'main' function" {
	Node0xb9c368[shape=record, label="  %1 = alloca i32, align 4"];
	Node0xb9c3e8[shape=record, label="  %2 = alloca i32, align 4"];
	Node0xb9c478[shape=record, label="  %3 = bitcast i32* %1 to i8*"];
	Node0xb9c8d8[shape=record, label="  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %3) #5"];
	Node0xb9c9b8[shape=record, label="  %4 = bitcast i32* %2 to i8*"];
	Node0xb9cad8[shape=record, label="  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %4) #5"];
	Node0xb9cd10[shape=record, label="  %5 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2)"];
	Node0xb9cdc8[shape=record, label="  %6 = load i32, i32* %1, align 4, !tbaa !2"];
	Node0xb9dd38[shape=record, label="  %7 = load i32, i32* %2, align 4, !tbaa !2"];
	Node0xb9e3c0[shape=record, label="  %8 = xor i32 %6, -1"];
	Node0xb9e430[shape=record, label="  %9 = xor i32 %7, -1"];
	Node0xb9e4a0[shape=record, label="  %10 = or i32 %6, %9"];
	Node0xb9e510[shape=record, label="  %11 = or i32 %7, %6"];
	Node0xb9e580[shape=record, label="  %12 = shl i32 %10, 1"];
	Node0xb9e5f0[shape=record, label="  %13 = xor i32 %12, -2"];
	Node0xb9e660[shape=record, label="  %14 = sub i32 %10, %11"];
	Node0xb9e6d0[shape=record, label="  %15 = add i32 %14, %13"];
	Node0xb9e740[shape=record, label="  %16 = icmp eq i32 %15, %8"];
	Node0xb3d9d8[shape=record, label="  %17 = select i1 %16, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0xb9e7d0[shape=record, label="  %18 = call i32 @puts(i8* nonnull dereferenceable(1) %17) #5"];
	Node0xb9ea28[shape=record, label="  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %4) #5"];
	Node0xb9eb88[shape=record, label="  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %3) #5"];
	Node0xb9ec48[shape=record, label="  ret i32 0"];
	Node0xb9c368 -> Node0xb9c3e8;
	Node0xb9c3e8 -> Node0xb9c478;
	Node0xb9c478 -> Node0xb9c8d8;
	Node0xb9c8d8 -> Node0xb9c9b8;
	Node0xb9c9b8 -> Node0xb9cad8;
	Node0xb9cad8 -> Node0xb9cd10;
	Node0xb9cd10 -> Node0xb9cdc8;
	Node0xb9cdc8 -> Node0xb9dd38;
	Node0xb9dd38 -> Node0xb9e3c0;
	Node0xb9e3c0 -> Node0xb9e430;
	Node0xb9e430 -> Node0xb9e4a0;
	Node0xb9e4a0 -> Node0xb9e510;
	Node0xb9e510 -> Node0xb9e580;
	Node0xb9e580 -> Node0xb9e5f0;
	Node0xb9e5f0 -> Node0xb9e660;
	Node0xb9e660 -> Node0xb9e6d0;
	Node0xb9e6d0 -> Node0xb9e740;
	Node0xb9e740 -> Node0xb3d9d8;
	Node0xb3d9d8 -> Node0xb9e7d0;
	Node0xb9e7d0 -> Node0xb9ea28;
	Node0xb9ea28 -> Node0xb9eb88;
	Node0xb9eb88 -> Node0xb9ec48;
edge [color=red]
	Node0xb9c368 -> Node0xb9c478;
	Node0xb9c478 -> Node0xb9c8d8;
	Node0xb9c3e8 -> Node0xb9c9b8;
	Node0xb9c9b8 -> Node0xb9cad8;
	Node0xb9c368 -> Node0xb9cd10;
	Node0xb9c3e8 -> Node0xb9cd10;
	Node0xb9c368 -> Node0xb9cdc8;
	Node0xb9c3e8 -> Node0xb9dd38;
	Node0xb9cdc8 -> Node0xb9e3c0;
	Node0xb9dd38 -> Node0xb9e430;
	Node0xb9cdc8 -> Node0xb9e4a0;
	Node0xb9e430 -> Node0xb9e4a0;
	Node0xb9dd38 -> Node0xb9e510;
	Node0xb9cdc8 -> Node0xb9e510;
	Node0xb9e4a0 -> Node0xb9e580;
	Node0xb9e580 -> Node0xb9e5f0;
	Node0xb9e4a0 -> Node0xb9e660;
	Node0xb9e510 -> Node0xb9e660;
	Node0xb9e660 -> Node0xb9e6d0;
	Node0xb9e5f0 -> Node0xb9e6d0;
	Node0xb9e6d0 -> Node0xb9e740;
	Node0xb9e3c0 -> Node0xb9e740;
	Node0xb9e740 -> Node0xb3d9d8;
	Node0xb3d9d8 -> Node0xb9e7d0;
	Node0xb9c9b8 -> Node0xb9ea28;
	Node0xb9c478 -> Node0xb9eb88;
}
