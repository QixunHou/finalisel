; ModuleID = '../.././c_source_file/0581_path_condition_crackme.c'
source_filename = "../.././c_source_file/0581_path_condition_crackme.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str.2 = private unnamed_addr constant [9 x i8] c"%d %d %d\00", align 1
@str = private unnamed_addr constant [4 x i8] c"bad\00", align 1
@str.3 = private unnamed_addr constant [5 x i8] c"good\00", align 1

; Function Attrs: nofree nounwind uwtable
define dso_local void @crackme(i32 %0, i32 %1, i32 %2) local_unnamed_addr #0 {
  %4 = xor i32 %1, -1
  %5 = and i32 %4, %2
  %6 = and i32 %5, %0
  %7 = or i32 %4, %2
  %8 = xor i32 %0, -1
  %9 = xor i32 %7, %8
  %10 = xor i32 %9, %6
  %11 = xor i32 %2, -1
  %12 = and i32 %11, %1
  %13 = or i32 %12, %0
  %14 = mul i32 %13, 5
  %15 = sub i32 %14, %10
  %16 = xor i32 %2, %1
  %17 = or i32 %16, %0
  %18 = xor i32 %17, 2147483647
  %19 = or i32 %18, %6
  %20 = or i32 %11, %0
  %21 = xor i32 %20, -1
  %22 = xor i32 %1, %0
  %23 = or i32 %22, %21
  %24 = and i32 %2, %0
  %25 = or i32 %24, %22
  %26 = or i32 %4, %0
  %27 = xor i32 %26, -1
  %28 = or i32 %16, %27
  %29 = or i32 %21, %4
  %30 = xor i32 %16, -1
  %31 = or i32 %30, %0
  %32 = shl i32 %31, 1
  %33 = xor i32 %12, -1
  %34 = and i32 %33, %8
  %35 = and i32 %4, %0
  %36 = xor i32 %35, %33
  %37 = and i32 %30, %0
  %38 = shl i32 %37, 1
  %39 = or i32 %2, %1
  %40 = xor i32 %24, %39
  %41 = or i32 %2, %0
  %42 = xor i32 %41, -1
  %43 = or i32 %42, %1
  %44 = or i32 %24, %4
  %45 = or i32 %1, %0
  %46 = and i32 %7, %8
  %47 = or i32 %6, %46
  %48 = xor i32 %35, -1
  %49 = xor i32 %48, %2
  %50 = and i32 %5, %8
  %51 = and i32 %7, %0
  %52 = or i32 %50, %51
  %53 = or i32 %11, %1
  %54 = and i32 %53, %8
  %55 = xor i32 %45, -1
  %56 = xor i32 %2, %0
  %57 = or i32 %56, %55
  %58 = and i32 %2, %1
  %59 = and i32 %58, %0
  %60 = and i32 %16, %8
  %61 = or i32 %59, %60
  %62 = and i32 %30, %8
  %63 = shl i32 %62, 1
  %64 = and i32 %11, %0
  %65 = xor i32 %58, -1
  %66 = xor i32 %64, %65
  %67 = and i32 %26, %30
  %68 = xor i32 %22, -1
  %69 = or i32 %56, %68
  %70 = or i32 %21, %68
  %71 = shl i32 %70, 1
  %72 = or i32 %64, %4
  %73 = and i32 %45, %30
  %74 = xor i32 %42, %1
  %75 = xor i32 %56, -1
  %76 = and i32 %75, %4
  %77 = xor i32 %24, -1
  %78 = xor i32 %77, %1
  %79 = xor i32 %39, %0
  %80 = or i32 %59, %79
  %81 = xor i32 %20, %1
  %82 = xor i32 %64, -1
  %83 = and i32 %82, %1
  %84 = and i32 %41, %68
  %85 = xor i32 %16, %0
  %86 = or i32 %6, %85
  %87 = shl i32 %86, 2
  %88 = and i32 %82, %4
  %89 = xor i32 %82, %1
  %90 = or i32 %55, %2
  %91 = or i32 %22, %11
  %92 = and i32 %16, %45
  %93 = xor i32 %85, -1
  %94 = or i32 %59, %93
  %95 = shl i32 %55, 1
  %96 = and i32 %22, %77
  %97 = xor i32 %30, %0
  %98 = and i32 %58, %8
  %99 = and i32 %39, %0
  %100 = or i32 %98, %99
  %101 = and i32 %22, %82
  %102 = and i32 %56, %45
  %103 = and i32 %65, %8
  %104 = shl i32 %103, 1
  %105 = and i32 %75, %1
  %106 = xor i32 %53, -1
  %107 = add i32 %53, 1
  %108 = and i32 %16, %48
  %109 = shl i32 %20, 1
  %110 = add i32 %26, 1
  %111 = and i32 %1, %0
  %112 = xor i32 %111, -1
  %113 = and i32 %16, %112
  %114 = xor i32 %59, -1
  %115 = xor i32 %79, %114
  %116 = or i32 %75, %4
  %117 = and i32 %26, %11
  %118 = or i32 %39, %0
  %119 = or i32 %16, %8
  %120 = xor i32 %50, %119
  %121 = or i32 %24, %27
  %122 = or i32 %56, %27
  %123 = and i32 %48, %2
  %124 = or i32 %22, %75
  %125 = and i32 %82, %68
  %126 = xor i32 %24, %33
  %127 = and i32 %41, %1
  %128 = and i32 %39, %8
  %129 = xor i32 %128, %114
  %130 = and i32 %33, %0
  %131 = shl i32 %130, 1
  %132 = xor i32 %6, %93
  %133 = xor i32 %24, %1
  %134 = or i32 %111, %30
  %135 = xor i32 %39, -1
  %136 = or i32 %24, %135
  %137 = or i32 %24, %55
  %138 = or i32 %111, %2
  %139 = xor i32 %12, %0
  %140 = xor i32 %21, %1
  %141 = xor i32 %41, %1
  %142 = or i32 %35, %11
  %143 = or i32 %11, %55
  %144 = or i32 %106, %0
  %145 = or i32 %16, %55
  %146 = xor i32 %64, %1
  %147 = or i32 %64, %106
  %148 = or i32 %56, %22
  %149 = and i32 %41, %22
  %150 = shl i32 %149, 1
  %151 = or i32 %35, %75
  %152 = xor i32 %27, %2
  %153 = and i32 %22, %75
  %154 = xor i32 %6, %17
  %155 = xor i32 %53, %0
  %156 = shl i32 %155, 1
  %157 = or i32 %64, %1
  %158 = and i32 %65, %0
  %159 = or i32 %58, %35
  %160 = shl i32 %159, 1
  %161 = xor i32 %111, %2
  %162 = or i32 %111, %75
  %163 = and i32 %77, %68
  %164 = or i32 %135, %0
  %165 = shl i32 %164, 2
  %166 = or i32 %111, %21
  %167 = or i32 %11, %27
  %168 = shl i32 %167, 1
  %169 = or i32 %12, %35
  %170 = and i32 %41, %4
  %171 = or i32 %75, %27
  %172 = or i32 %16, %111
  %173 = or i32 %75, %1
  %174 = xor i32 %26, %2
  %175 = xor i32 %99, -1
  %176 = xor i32 %98, %175
  %177 = xor i32 %51, 2147483647
  %178 = xor i32 %177, %50
  %179 = shl i32 %178, 1
  %180 = xor i32 %64, %53
  %181 = or i32 %59, %128
  %182 = and i32 %22, %2
  %183 = and i32 %56, %26
  %184 = or i32 %33, %0
  %185 = or i32 %27, %2
  %186 = and i32 %11, %112
  %187 = and i32 %75, %112
  %188 = or i32 %65, %8
  %189 = xor i32 %106, %0
  %190 = or i32 %35, %2
  %191 = and i32 %20, %22
  %192 = shl i32 %191, 1
  %193 = add i32 %56, 1
  %194 = or i32 %35, %30
  %195 = or i32 %21, %1
  %196 = or i32 %111, %11
  %197 = add i32 %22, 1
  %198 = and i32 %56, %48
  %199 = or i32 %42, %4
  %200 = xor i32 %24, %26
  %201 = or i32 %64, %58
  %202 = and i32 %20, %4
  %203 = xor i32 %24, %45
  %204 = xor i32 %33, %0
  %205 = or i32 %22, %42
  %206 = xor i32 %39, %111
  %207 = shl i32 %206, 1
  %208 = or i32 %64, %22
  %209 = and i32 %68, %2
  %210 = or i32 %65, %0
  %211 = shl i32 %210, 1
  %212 = or i32 %75, %68
  %213 = or i32 %111, %42
  %214 = xor i32 %45, %2
  %215 = or i32 %30, %55
  %216 = or i32 %135, %8
  %217 = and i32 %30, %48
  %218 = or i32 %58, %8
  %219 = and i32 %56, %1
  %220 = or i32 %42, %68
  %221 = and i32 %45, %11
  %222 = or i32 %68, %2
  %223 = and i32 %16, %0
  %224 = or i32 %30, %8
  %225 = shl i32 %224, 1
  %226 = or i32 %56, %35
  %227 = and i32 %75, %48
  %228 = or i32 %24, %68
  %229 = or i32 %16, %35
  %230 = or i32 %56, %4
  %231 = shl i32 %230, 1
  %232 = shl i32 %42, 1
  %233 = or i32 %53, %8
  %234 = xor i32 %112, %2
  %235 = and i32 %45, %75
  %236 = and i32 %11, %68
  %237 = and i32 %75, %68
  %238 = and i32 %26, %2
  %239 = xor i32 %135, %0
  %240 = and i32 %77, %1
  %241 = xor i32 %55, %2
  %242 = xor i32 %41, %111
  %243 = and i32 %135, %8
  %244 = and i32 %12, %8
  %245 = mul i32 %244, 6
  %246 = and i32 %135, %0
  %247 = shl i32 %246, 1
  %248 = and i32 %12, %0
  %249 = and i32 %106, %8
  %250 = and i32 %106, %0
  %251 = mul i32 %250, -7
  %252 = add i32 %90, %117
  %253 = add i32 %252, %173
  %254 = sub i32 %253, %184
  %255 = sub i32 %254, %172
  %256 = mul i32 %255, 3
  %257 = sub i32 %34, %59
  %258 = add i32 %257, %25
  %259 = add i32 %258, %94
  %260 = mul i32 %259, 5
  %261 = add i32 %249, %248
  %262 = mul i32 %261, -9
  %263 = add i32 %98, %243
  %264 = mul i32 %263, -23
  %265 = add i32 %72, %12
  %266 = shl i32 %265, 2
  %267 = add i32 %238, -1
  %268 = add i32 %267, %41
  %269 = add i32 %268, %240
  %270 = add i32 %269, %229
  %271 = add i32 %270, %227
  %272 = add i32 %271, %219
  %273 = add i32 %272, %204
  %274 = add i32 %273, %199
  %275 = add i32 %274, %158
  %276 = add i32 %275, %134
  %277 = add i32 %276, %125
  %278 = add i32 %277, %124
  %279 = add i32 %278, %105
  %280 = add i32 %279, %85
  %281 = add i32 %280, %181
  %282 = add i32 %281, %47
  %283 = add i32 %282, %19
  %284 = shl i32 %283, 1
  %285 = sub i32 -5, %35
  %286 = sub i32 %285, %45
  %287 = sub i32 %286, %22
  %288 = add i32 %287, %110
  %289 = add i32 %288, %26
  %290 = add i32 %289, %197
  %291 = add i32 %290, %16
  %292 = sub i32 %291, %49
  %293 = add i32 %292, %91
  %294 = sub i32 %293, %95
  %295 = add i32 %294, %21
  %296 = add i32 %295, %107
  %297 = sub i32 %296, %123
  %298 = sub i32 %297, %39
  %299 = add i32 %298, %82
  %300 = add i32 %299, %138
  %301 = sub i32 %300, %142
  %302 = sub i32 %301, %143
  %303 = sub i32 %302, %152
  %304 = sub i32 %303, %161
  %305 = add i32 %304, %174
  %306 = sub i32 %305, %182
  %307 = sub i32 %306, %185
  %308 = add i32 %307, %186
  %309 = sub i32 %308, %190
  %310 = add i32 %309, %193
  %311 = sub i32 %310, %196
  %312 = add i32 %311, %209
  %313 = sub i32 %312, %214
  %314 = sub i32 %313, %221
  %315 = add i32 %314, %222
  %316 = sub i32 %315, %56
  %317 = add i32 %316, %234
  %318 = add i32 %317, %33
  %319 = sub i32 %318, %236
  %320 = add i32 %319, %241
  %321 = add i32 %320, %23
  %322 = sub i32 %321, %28
  %323 = sub i32 %322, %29
  %324 = add i32 %323, %36
  %325 = sub i32 %324, %40
  %326 = add i32 %325, %43
  %327 = sub i32 %326, %44
  %328 = add i32 %327, %54
  %329 = add i32 %328, %57
  %330 = add i32 %329, %66
  %331 = add i32 %330, %67
  %332 = add i32 %331, %69
  %333 = sub i32 %332, %17
  %334 = add i32 %333, %73
  %335 = sub i32 %334, %74
  %336 = sub i32 %335, %76
  %337 = sub i32 %336, %78
  %338 = add i32 %337, %81
  %339 = sub i32 %338, %83
  %340 = sub i32 %339, %84
  %341 = add i32 %340, %79
  %342 = add i32 %341, %88
  %343 = sub i32 %342, %89
  %344 = add i32 %343, %92
  %345 = add i32 %344, %60
  %346 = sub i32 %345, %96
  %347 = sub i32 %346, %97
  %348 = add i32 %347, %101
  %349 = add i32 %348, %102
  %350 = add i32 %349, %108
  %351 = sub i32 %350, %109
  %352 = sub i32 %351, %113
  %353 = sub i32 %352, %116
  %354 = add i32 %353, %118
  %355 = add i32 %354, %121
  %356 = sub i32 %355, %122
  %357 = add i32 %356, %126
  %358 = add i32 %357, %127
  %359 = sub i32 %358, %128
  %360 = sub i32 %359, %133
  %361 = add i32 %360, %136
  %362 = add i32 %361, %137
  %363 = sub i32 %362, %139
  %364 = sub i32 %363, %140
  %365 = sub i32 %364, %141
  %366 = sub i32 %365, %144
  %367 = add i32 %366, %145
  %368 = sub i32 %367, %146
  %369 = add i32 %368, %147
  %370 = add i32 %369, %148
  %371 = add i32 %370, %151
  %372 = sub i32 %371, %153
  %373 = sub i32 %372, %157
  %374 = add i32 %373, %162
  %375 = add i32 %374, %163
  %376 = sub i32 %375, %166
  %377 = sub i32 %376, %168
  %378 = add i32 %377, %169
  %379 = sub i32 %378, %170
  %380 = add i32 %379, %171
  %381 = sub i32 %380, %180
  %382 = sub i32 %381, %183
  %383 = add i32 %382, %187
  %384 = add i32 %383, %188
  %385 = add i32 %384, %189
  %386 = sub i32 %385, %194
  %387 = sub i32 %386, %195
  %388 = sub i32 %387, %198
  %389 = sub i32 %388, %200
  %390 = add i32 %389, %201
  %391 = add i32 %390, %202
  %392 = add i32 %391, %203
  %393 = sub i32 %392, %205
  %394 = add i32 %393, %208
  %395 = sub i32 %394, %212
  %396 = sub i32 %395, %213
  %397 = add i32 %396, %215
  %398 = sub i32 %397, %216
  %399 = sub i32 %398, %217
  %400 = sub i32 %399, %218
  %401 = sub i32 %400, %220
  %402 = sub i32 %401, %223
  %403 = add i32 %402, %226
  %404 = add i32 %403, %228
  %405 = sub i32 %404, %232
  %406 = add i32 %405, %233
  %407 = sub i32 %406, %235
  %408 = add i32 %407, %237
  %409 = add i32 %408, %239
  %410 = add i32 %409, %242
  %411 = sub i32 %410, %32
  %412 = sub i32 %411, %38
  %413 = add i32 %412, %52
  %414 = sub i32 %413, %61
  %415 = sub i32 %414, %63
  %416 = sub i32 %415, %71
  %417 = add i32 %416, %80
  %418 = sub i32 %417, %100
  %419 = sub i32 %418, %104
  %420 = add i32 %419, %115
  %421 = add i32 %420, %120
  %422 = add i32 %421, %129
  %423 = sub i32 %422, %131
  %424 = sub i32 %423, %132
  %425 = sub i32 %424, %150
  %426 = add i32 %425, %154
  %427 = sub i32 %426, %156
  %428 = sub i32 %427, %160
  %429 = sub i32 %428, %165
  %430 = sub i32 %429, %176
  %431 = sub i32 %430, %192
  %432 = sub i32 %431, %207
  %433 = sub i32 %432, %211
  %434 = sub i32 %433, %225
  %435 = sub i32 %434, %231
  %436 = add i32 %435, %245
  %437 = sub i32 %436, %247
  %438 = add i32 %437, %251
  %439 = sub i32 %438, %87
  %440 = add i32 %439, %262
  %441 = add i32 %440, %264
  %442 = add i32 %441, %266
  %443 = sub i32 %442, %179
  %444 = add i32 %443, %256
  %445 = add i32 %444, %260
  %446 = add i32 %445, %284
  %447 = icmp eq i32 %15, %446
  %448 = select i1 %447, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)
  %449 = tail call i32 @puts(i8* nonnull dereferenceable(1) %448)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #1 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %4) #5
  %5 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %5) #5
  %6 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %6) #5
  %7 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3)
  %8 = load i32, i32* %1, align 4, !tbaa !2
  %9 = load i32, i32* %2, align 4, !tbaa !2
  %10 = load i32, i32* %3, align 4, !tbaa !2
  call void @crackme(i32 %8, i32 %9, i32 %10)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %6) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %5) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %4) #5
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare dso_local i32 @__isoc99_scanf(i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #4

attributes #0 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Ubuntu clang version 10.0.1-++20200708122807+ef32c611aa2-1~exp1~20200707223407.61 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
