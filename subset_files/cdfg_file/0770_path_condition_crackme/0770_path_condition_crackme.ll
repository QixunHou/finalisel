; ModuleID = '../.././c_source_file/0770_path_condition_crackme.c'
source_filename = "../.././c_source_file/0770_path_condition_crackme.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str.2 = private unnamed_addr constant [18 x i8] c"%d %d %d %d %d %d\00", align 1
@str = private unnamed_addr constant [4 x i8] c"bad\00", align 1
@str.3 = private unnamed_addr constant [5 x i8] c"good\00", align 1

; Function Attrs: nofree nounwind uwtable
define dso_local void @crackme(i32 %0, i32 %1, i32 %2, i32 %3, i32 %4, i32 %5) local_unnamed_addr #0 {
  %7 = xor i32 %1, -1
  %8 = and i32 %7, %0
  %9 = xor i32 %8, -1
  %10 = add i32 %8, 1
  %11 = and i32 %2, %0
  %12 = xor i32 %11, -1
  %13 = and i32 %12, %1
  %14 = shl i32 %13, 2
  %15 = add i32 %10, %14
  %16 = xor i32 %4, %3
  %17 = xor i32 %16, -1
  %18 = or i32 %17, %5
  %19 = sub i32 %15, %18
  %20 = or i32 %2, %1
  %21 = or i32 %20, %0
  %22 = xor i32 %2, -1
  %23 = or i32 %22, %0
  %24 = xor i32 %23, -1
  %25 = xor i32 %24, %1
  %26 = shl i32 %25, 1
  %27 = xor i32 %2, %0
  %28 = and i32 %2, %1
  %29 = or i32 %28, %8
  %30 = xor i32 %1, %0
  %31 = xor i32 %30, -1
  %32 = and i32 %22, %31
  %33 = shl i32 %32, 1
  %34 = and i32 %27, %31
  %35 = xor i32 %28, -1
  %36 = xor i32 %35, %0
  %37 = or i32 %8, %22
  %38 = and i32 %27, %9
  %39 = or i32 %22, %1
  %40 = and i32 %28, %0
  %41 = xor i32 %0, -1
  %42 = xor i32 %2, %1
  %43 = and i32 %42, %41
  %44 = or i32 %40, %43
  %45 = and i32 %7, %2
  %46 = and i32 %45, %41
  %47 = or i32 %42, %41
  %48 = xor i32 %46, %47
  %49 = and i32 %12, %7
  %50 = or i32 %1, %0
  %51 = xor i32 %50, -1
  %52 = xor i32 %51, %2
  %53 = or i32 %7, %0
  %54 = and i32 %53, %2
  %55 = and i32 %22, %0
  %56 = xor i32 %55, -1
  %57 = add i32 %55, 1
  %58 = and i32 %1, %0
  %59 = or i32 %58, %2
  %60 = xor i32 %27, -1
  %61 = and i32 %30, %60
  %62 = xor i32 %42, -1
  %63 = or i32 %62, %51
  %64 = or i32 %2, %0
  %65 = xor i32 %64, -1
  %66 = or i32 %65, %7
  %67 = or i32 %58, %60
  %68 = xor i32 %39, -1
  %69 = or i32 %55, %68
  %70 = xor i32 %11, %20
  %71 = and i32 %27, %1
  %72 = xor i32 %20, -1
  %73 = xor i32 %72, %0
  %74 = xor i32 %64, %1
  %75 = or i32 %42, %0
  %76 = xor i32 %65, %1
  %77 = and i32 %28, %41
  %78 = and i32 %20, %0
  %79 = xor i32 %78, -1
  %80 = xor i32 %77, %79
  %81 = xor i32 %11, %53
  %82 = and i32 %56, %31
  %83 = and i32 %20, %41
  %84 = or i32 %40, %83
  %85 = xor i32 %53, -1
  %86 = or i32 %85, %2
  %87 = and i32 %64, %7
  %88 = or i32 %11, %7
  %89 = or i32 %62, %85
  %90 = and i32 %62, %9
  %91 = and i32 %62, %41
  %92 = or i32 %58, %24
  %93 = or i32 %62, %41
  %94 = and i32 %53, %62
  %95 = or i32 %27, %51
  %96 = xor i32 %58, -1
  %97 = and i32 %60, %96
  %98 = or i32 %20, %41
  %99 = or i32 %42, %58
  %100 = and i32 %50, %62
  %101 = or i32 %58, %65
  %102 = xor i32 %55, %39
  %103 = xor i32 %20, %0
  %104 = xor i32 %55, %1
  %105 = and i32 %60, %31
  %106 = or i32 %27, %31
  %107 = shl i32 %106, 1
  %108 = or i32 %30, %60
  %109 = or i32 %27, %1
  %110 = xor i32 %62, %0
  %111 = or i32 %60, %85
  %112 = xor i32 %8, %2
  %113 = and i32 %42, %50
  %114 = or i32 %28, %41
  %115 = add i32 %64, 1
  %116 = and i32 %45, %0
  %117 = or i32 %7, %2
  %118 = xor i32 %117, %0
  %119 = or i32 %116, %118
  %120 = or i32 %40, %103
  %121 = or i32 %30, %2
  %122 = shl i32 %121, 1
  %123 = xor i32 %43, -1
  %124 = xor i32 %40, %123
  %125 = or i32 %55, %31
  %126 = shl i32 %125, 1
  %127 = or i32 %30, %22
  %128 = add i32 %39, 1
  %129 = and i32 %60, %7
  %130 = add i32 %42, 1
  %131 = or i32 %30, %65
  %132 = or i32 %65, %31
  %133 = or i32 %39, %0
  %134 = or i32 %27, %7
  %135 = and i32 %22, %1
  %136 = or i32 %11, %135
  %137 = and i32 %30, %12
  %138 = xor i32 %135, -1
  %139 = and i32 %138, %41
  %140 = and i32 %60, %1
  %141 = add i32 %58, 1
  %142 = xor i32 %11, %138
  %143 = or i32 %8, %2
  %144 = and i32 %50, %2
  %145 = or i32 %35, %0
  %146 = or i32 %39, %41
  %147 = or i32 %24, %1
  %148 = or i32 %68, %0
  %149 = and i32 %117, %0
  %150 = or i32 %46, %149
  %151 = and i32 %64, %30
  %152 = and i32 %56, %7
  %153 = shl i32 %152, 1
  %154 = or i32 %60, %31
  %155 = or i32 %31, %2
  %156 = and i32 %53, %22
  %157 = xor i32 %149, -1
  %158 = xor i32 %46, %157
  %159 = or i32 %77, %78
  %160 = and i32 %64, %31
  %161 = or i32 %62, %0
  %162 = and i32 %23, %31
  %163 = xor i32 %8, %35
  %164 = and i32 %72, %41
  %165 = mul i32 %164, 13
  %166 = and i32 %135, %41
  %167 = and i32 %72, %0
  %168 = and i32 %135, %0
  %169 = mul i32 %168, 9
  %170 = and i32 %68, %41
  %171 = and i32 %68, %0
  %172 = or i32 %16, %5
  %173 = shl i32 %172, 1
  %174 = and i32 %4, %3
  %175 = xor i32 %5, %4
  %176 = xor i32 %175, -1
  %177 = or i32 %174, %176
  %178 = xor i32 %3, -1
  %179 = or i32 %178, %4
  %180 = xor i32 %179, -1
  %181 = add i32 %179, 1
  %182 = xor i32 %4, -1
  %183 = xor i32 %5, -1
  %184 = and i32 %183, %3
  %185 = xor i32 %184, -1
  %186 = and i32 %185, %182
  %187 = xor i32 %5, %3
  %188 = or i32 %187, %180
  %189 = or i32 %183, %3
  %190 = xor i32 %189, -1
  %191 = or i32 %174, %190
  %192 = and i32 %175, %3
  %193 = and i32 %175, %17
  %194 = or i32 %5, %3
  %195 = xor i32 %194, -1
  %196 = or i32 %195, %4
  %197 = and i32 %178, %5
  %198 = and i32 %197, %182
  %199 = or i32 %178, %5
  %200 = and i32 %199, %4
  %201 = or i32 %198, %200
  %202 = xor i32 %174, -1
  %203 = and i32 %187, %202
  %204 = and i32 %5, %4
  %205 = or i32 %204, %184
  %206 = and i32 %16, %176
  %207 = and i32 %182, %5
  %208 = or i32 %207, %17
  %209 = xor i32 %187, -1
  %210 = and i32 %209, %4
  %211 = and i32 %197, %4
  %212 = xor i32 %187, %4
  %213 = or i32 %211, %212
  %214 = or i32 %195, %182
  %215 = or i32 %174, %183
  %216 = and i32 %178, %4
  %217 = xor i32 %216, -1
  %218 = and i32 %183, %217
  %219 = and i32 %179, %176
  %220 = or i32 %207, %174
  %221 = and i32 %187, %179
  %222 = or i32 %187, %216
  %223 = xor i32 %204, -1
  %224 = and i32 %223, %17
  %225 = shl i32 %224, 2
  %226 = and i32 %5, %3
  %227 = and i32 %226, %4
  %228 = xor i32 %212, -1
  %229 = or i32 %227, %228
  %230 = xor i32 %199, %4
  %231 = or i32 %211, %230
  %232 = or i32 %4, %3
  %233 = and i32 %232, %5
  %234 = shl i32 %233, 1
  %235 = xor i32 %202, %5
  %236 = and i32 %217, %5
  %237 = xor i32 %179, %5
  %238 = or i32 %5, %4
  %239 = and i32 %238, %178
  %240 = or i32 %185, %182
  %241 = and i32 %187, %232
  %242 = and i32 %175, %16
  %243 = and i32 %226, %182
  %244 = and i32 %194, %4
  %245 = xor i32 %244, 2147483647
  %246 = xor i32 %245, %243
  %247 = shl i32 %246, 1
  %248 = and i32 %183, %4
  %249 = xor i32 %248, %189
  %250 = and i32 %232, %209
  %251 = xor i32 %204, %179
  %252 = xor i32 %187, 2147483647
  %253 = or i32 %252, %4
  %254 = xor i32 %253, %227
  %255 = xor i32 %238, %3
  %256 = or i32 %174, %5
  %257 = or i32 %216, %5
  %258 = add i32 %184, 1
  %259 = xor i32 %216, %185
  %260 = xor i32 %230, -1
  %261 = xor i32 %211, %260
  %262 = or i32 %184, %4
  %263 = or i32 %183, %17
  %264 = or i32 %175, %16
  %265 = or i32 %226, %4
  %266 = xor i32 %226, -1
  %267 = and i32 %266, %182
  %268 = xor i32 %190, %4
  %269 = xor i32 %255, 2147483647
  %270 = and i32 %16, %223
  %271 = and i32 %179, %5
  %272 = and i32 %185, %4
  %273 = and i32 %195, %182
  %274 = and i32 %184, %182
  %275 = and i32 %195, %4
  %276 = and i32 %184, %4
  %277 = and i32 %190, %182
  %278 = shl i32 %277, 2
  %279 = shl i32 %243, 3
  %280 = and i32 %190, %4
  %281 = shl i32 %280, 1
  %282 = shl i32 %227, 2
  %283 = add i32 %27, %156
  %284 = add i32 %283, %147
  %285 = add i32 %284, %133
  %286 = add i32 %285, %131
  %287 = add i32 %286, %104
  %288 = add i32 %287, %91
  %289 = add i32 %288, %61
  %290 = add i32 %289, %174
  %291 = add i32 %290, %16
  %292 = add i32 %291, %257
  %293 = add i32 %292, %206
  %294 = add i32 %293, %191
  %295 = add i32 %294, %269
  %296 = add i32 %295, %254
  %297 = shl i32 %296, 1
  %298 = add i32 %101, %163
  %299 = sub i32 %90, %298
  %300 = add i32 %299, %181
  %301 = add i32 %300, %263
  %302 = add i32 %301, %274
  %303 = mul i32 %302, 3
  %304 = sub i32 %170, %167
  %305 = sub i32 %304, %129
  %306 = sub i32 %305, %273
  %307 = mul i32 %306, 5
  %308 = add i32 %166, %143
  %309 = add i32 %308, %171
  %310 = add i32 %309, %71
  %311 = shl i32 %310, 2
  %312 = add i32 %275, %77
  %313 = add i32 %312, %276
  %314 = mul i32 %313, -7
  %315 = add i32 %1, %0
  %316 = add i32 %315, %2
  %317 = sub i32 %141, %316
  %318 = sub i32 %317, %37
  %319 = add i32 %318, %39
  %320 = add i32 %319, %52
  %321 = add i32 %320, %54
  %322 = add i32 %321, %57
  %323 = sub i32 %322, %59
  %324 = sub i32 %323, %86
  %325 = sub i32 %324, %112
  %326 = add i32 %325, %115
  %327 = sub i32 %326, %127
  %328 = add i32 %327, %128
  %329 = add i32 %328, %130
  %330 = sub i32 %329, %135
  %331 = sub i32 %330, %144
  %332 = add i32 %331, %28
  %333 = sub i32 %332, %55
  %334 = sub i32 %333, %155
  %335 = add i32 %334, %21
  %336 = sub i32 %335, %29
  %337 = sub i32 %336, %33
  %338 = add i32 %337, %34
  %339 = add i32 %338, %36
  %340 = add i32 %339, %38
  %341 = sub i32 %340, %49
  %342 = add i32 %341, %63
  %343 = sub i32 %342, %66
  %344 = sub i32 %343, %67
  %345 = sub i32 %344, %69
  %346 = add i32 %345, %70
  %347 = add i32 %346, %73
  %348 = add i32 %347, %74
  %349 = add i32 %348, %75
  %350 = sub i32 %349, %76
  %351 = add i32 %350, %81
  %352 = sub i32 %351, %82
  %353 = add i32 %352, %87
  %354 = add i32 %353, %88
  %355 = sub i32 %354, %89
  %356 = sub i32 %355, %83
  %357 = sub i32 %356, %92
  %358 = sub i32 %357, %93
  %359 = sub i32 %358, %94
  %360 = sub i32 %359, %95
  %361 = sub i32 %360, %97
  %362 = add i32 %361, %47
  %363 = add i32 %362, %98
  %364 = sub i32 %363, %99
  %365 = sub i32 %364, %100
  %366 = add i32 %365, %102
  %367 = add i32 %366, %103
  %368 = sub i32 %367, %105
  %369 = add i32 %368, %108
  %370 = sub i32 %369, %109
  %371 = sub i32 %370, %110
  %372 = add i32 %371, %111
  %373 = add i32 %372, %113
  %374 = sub i32 %373, %114
  %375 = sub i32 %374, %122
  %376 = sub i32 %375, %132
  %377 = add i32 %376, %134
  %378 = sub i32 %377, %136
  %379 = add i32 %378, %137
  %380 = add i32 %379, %139
  %381 = add i32 %380, %140
  %382 = sub i32 %381, %142
  %383 = add i32 %382, %145
  %384 = add i32 %383, %146
  %385 = add i32 %384, %148
  %386 = sub i32 %385, %151
  %387 = add i32 %386, %154
  %388 = sub i32 %387, %160
  %389 = add i32 %388, %161
  %390 = add i32 %389, %162
  %391 = add i32 %390, %40
  %392 = sub i32 %391, %4
  %393 = sub i32 %392, %26
  %394 = add i32 %393, %44
  %395 = sub i32 %394, %48
  %396 = add i32 %395, %80
  %397 = sub i32 %396, %84
  %398 = sub i32 %397, %107
  %399 = sub i32 %398, %119
  %400 = add i32 %399, %120
  %401 = sub i32 %400, %124
  %402 = sub i32 %401, %126
  %403 = sub i32 %402, %150
  %404 = sub i32 %403, %153
  %405 = sub i32 %404, %158
  %406 = add i32 %405, %159
  %407 = add i32 %406, %165
  %408 = add i32 %407, %169
  %409 = add i32 %408, %17
  %410 = add i32 %409, %202
  %411 = sub i32 %410, %215
  %412 = sub i32 %411, %218
  %413 = add i32 %412, %235
  %414 = add i32 %413, %236
  %415 = add i32 %414, %189
  %416 = add i32 %415, %237
  %417 = add i32 %416, %256
  %418 = add i32 %417, %258
  %419 = sub i32 %418, %271
  %420 = sub i32 %419, %173
  %421 = sub i32 %420, %177
  %422 = add i32 %421, %186
  %423 = sub i32 %422, %188
  %424 = add i32 %423, %192
  %425 = add i32 %424, %193
  %426 = sub i32 %425, %196
  %427 = sub i32 %426, %203
  %428 = sub i32 %427, %205
  %429 = add i32 %428, %208
  %430 = sub i32 %429, %210
  %431 = add i32 %430, %214
  %432 = sub i32 %431, %219
  %433 = sub i32 %432, %220
  %434 = sub i32 %433, %221
  %435 = add i32 %434, %222
  %436 = sub i32 %435, %234
  %437 = add i32 %436, %239
  %438 = sub i32 %437, %240
  %439 = add i32 %438, %241
  %440 = sub i32 %439, %242
  %441 = sub i32 %440, %249
  %442 = add i32 %441, %250
  %443 = add i32 %442, %251
  %444 = add i32 %443, %255
  %445 = add i32 %444, %259
  %446 = sub i32 %445, %262
  %447 = sub i32 %446, %264
  %448 = sub i32 %447, %265
  %449 = sub i32 %448, %267
  %450 = sub i32 %449, %268
  %451 = add i32 %450, %270
  %452 = add i32 %451, %272
  %453 = add i32 %452, %201
  %454 = sub i32 %453, %213
  %455 = sub i32 %454, %225
  %456 = add i32 %455, %229
  %457 = add i32 %456, %231
  %458 = add i32 %457, %261
  %459 = sub i32 %458, %278
  %460 = sub i32 %459, %279
  %461 = sub i32 %460, %281
  %462 = sub i32 %461, %282
  %463 = add i32 %462, %311
  %464 = sub i32 %463, %247
  %465 = add i32 %464, %314
  %466 = add i32 %465, %307
  %467 = add i32 %466, %303
  %468 = add i32 %467, %297
  %469 = icmp eq i32 %19, %468
  %470 = select i1 %469, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)
  %471 = tail call i32 @puts(i8* nonnull dereferenceable(1) %470)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #1 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %7) #5
  %8 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %8) #5
  %9 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %9) #5
  %10 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %10) #5
  %11 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %11) #5
  %12 = bitcast i32* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %12) #5
  %13 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3, i32* nonnull %4, i32* nonnull %5, i32* nonnull %6)
  %14 = load i32, i32* %1, align 4, !tbaa !2
  %15 = load i32, i32* %2, align 4, !tbaa !2
  %16 = load i32, i32* %3, align 4, !tbaa !2
  %17 = load i32, i32* %4, align 4, !tbaa !2
  %18 = load i32, i32* %5, align 4, !tbaa !2
  %19 = load i32, i32* %6, align 4, !tbaa !2
  call void @crackme(i32 %14, i32 %15, i32 %16, i32 %17, i32 %18, i32 %19)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %12) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %11) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %10) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %9) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %8) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %7) #5
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare dso_local i32 @__isoc99_scanf(i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #4

attributes #0 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Ubuntu clang version 10.0.1-++20200708122807+ef32c611aa2-1~exp1~20200707223407.61 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
