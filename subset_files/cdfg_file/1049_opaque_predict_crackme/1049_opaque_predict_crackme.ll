; ModuleID = '../.././c_source_file/1049_opaque_predict_crackme.c'
source_filename = "../.././c_source_file/1049_opaque_predict_crackme.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str.2 = private unnamed_addr constant [15 x i8] c"%d %d %d %d %d\00", align 1
@str = private unnamed_addr constant [4 x i8] c"bad\00", align 1
@str.3 = private unnamed_addr constant [5 x i8] c"good\00", align 1

; Function Attrs: nofree nounwind uwtable
define dso_local void @crackme(i32 %0, i32 %1, i32 %2, i32 %3, i32 %4) local_unnamed_addr #0 {
  %6 = xor i32 %4, %3
  %7 = or i32 %2, %0
  %8 = xor i32 %7, -1
  %9 = or i32 %8, %1
  %10 = shl i32 %9, 1
  %11 = add i32 %6, %10
  %12 = sub i32 0, %11
  %13 = and i32 %4, %3
  %14 = xor i32 %13, -1
  %15 = xor i32 %4, -1
  %16 = and i32 %15, %3
  %17 = shl i32 %6, 1
  %18 = xor i32 %17, -2
  %19 = or i32 %4, %3
  %20 = shl i32 %19, 2
  %21 = xor i32 %20, -4
  %22 = xor i32 %3, 1073741823
  %23 = and i32 %22, %4
  %24 = shl i32 %23, 2
  %25 = and i32 %2, %0
  %26 = xor i32 %2, -1
  %27 = and i32 %26, %1
  %28 = or i32 %25, %27
  %29 = xor i32 %2, %0
  %30 = or i32 %29, %1
  %31 = xor i32 %1, %0
  %32 = xor i32 %31, -1
  %33 = and i32 %29, %32
  %34 = xor i32 %27, %0
  %35 = and i32 %26, %0
  %36 = xor i32 %35, -1
  %37 = xor i32 %36, %1
  %38 = and i32 %1, %0
  %39 = xor i32 %38, -1
  %40 = xor i32 %29, -1
  %41 = and i32 %40, %39
  %42 = and i32 %26, %39
  %43 = xor i32 %2, %1
  %44 = xor i32 %43, -1
  %45 = xor i32 %1, -1
  %46 = or i32 %45, %0
  %47 = xor i32 %46, -1
  %48 = or i32 %43, %47
  %49 = shl i32 %48, 1
  %50 = or i32 %25, %47
  %51 = and i32 %29, %1
  %52 = and i32 %2, %1
  %53 = xor i32 %52, -1
  %54 = xor i32 %35, %53
  %55 = or i32 %27, %0
  %56 = shl i32 %55, 1
  %57 = or i32 %44, %47
  %58 = or i32 %53, %0
  %59 = or i32 %25, %32
  %60 = xor i32 %38, %2
  %61 = shl i32 %60, 1
  %62 = and i32 %45, %0
  %63 = or i32 %62, %44
  %64 = or i32 %43, %38
  %65 = xor i32 %8, %1
  %66 = and i32 %52, %0
  %67 = or i32 %2, %1
  %68 = xor i32 %67, %0
  %69 = or i32 %66, %68
  %70 = or i32 %38, %8
  %71 = xor i32 %25, -1
  %72 = add i32 %25, 1
  %73 = xor i32 %43, %0
  %74 = xor i32 %66, %73
  %75 = and i32 %45, %2
  %76 = and i32 %75, %0
  %77 = or i32 %45, %2
  %78 = xor i32 %77, %0
  %79 = xor i32 %76, -1
  %80 = xor i32 %78, %79
  %81 = or i32 %40, %32
  %82 = xor i32 %66, -1
  %83 = xor i32 %68, %82
  %84 = or i32 %31, %26
  %85 = or i32 %35, %1
  %86 = or i32 %1, %0
  %87 = and i32 %43, %86
  %88 = xor i32 %62, -1
  %89 = and i32 %29, %88
  %90 = and i32 %29, %45
  %91 = add i32 %2, 1
  %92 = and i32 %86, %40
  %93 = and i32 %29, %86
  %94 = xor i32 %0, -1
  %95 = and i32 %52, %94
  %96 = and i32 %43, %0
  %97 = or i32 %95, %96
  %98 = or i32 %43, %62
  %99 = xor i32 %67, %38
  %100 = and i32 %39, %2
  %101 = or i32 %31, %40
  %102 = and i32 %86, %26
  %103 = xor i32 %52, %0
  %104 = and i32 %71, %1
  %105 = xor i32 %27, -1
  %106 = or i32 %105, %94
  %107 = or i32 %43, %94
  %108 = shl i32 %107, 1
  %109 = and i32 %31, %40
  %110 = and i32 %7, %45
  %111 = xor i32 %67, -1
  %112 = or i32 %25, %111
  %113 = and i32 %75, %94
  %114 = xor i32 %113, %107
  %115 = and i32 %86, %2
  %116 = xor i32 %53, %0
  %117 = xor i32 %86, -1
  %118 = or i32 %26, %117
  %119 = or i32 %117, %2
  %120 = xor i32 %39, %2
  %121 = shl i32 %120, 1
  %122 = or i32 %26, %1
  %123 = or i32 %122, %0
  %124 = xor i32 %7, %1
  %125 = and i32 %46, %26
  %126 = or i32 %27, %94
  %127 = or i32 %26, %0
  %128 = xor i32 %127, -1
  %129 = or i32 %128, %1
  %130 = or i32 %31, %2
  %131 = xor i32 %86, %2
  %132 = and i32 %29, %46
  %133 = and i32 %127, %1
  %134 = and i32 %105, %0
  %135 = and i32 %127, %32
  %136 = shl i32 %135, 1
  %137 = and i32 %7, %32
  %138 = xor i32 %111, %0
  %139 = or i32 %76, %78
  %140 = or i32 %35, %31
  %141 = and i32 %122, %0
  %142 = and i32 %86, %44
  %143 = or i32 %38, %44
  %144 = or i32 %35, %52
  %145 = shl i32 %144, 1
  %146 = shl i32 %127, 1
  %147 = or i32 %47, %2
  %148 = or i32 %52, %0
  %149 = or i32 %29, %47
  %150 = and i32 %67, %0
  %151 = or i32 %95, %150
  %152 = or i32 %122, %94
  %153 = xor i32 %73, -1
  %154 = xor i32 %76, %153
  %155 = and i32 %67, %94
  %156 = or i32 %44, %94
  %157 = and i32 %46, %40
  %158 = shl i32 %157, 1
  %159 = xor i32 %25, %105
  %160 = xor i32 %96, -1
  %161 = xor i32 %95, %160
  %162 = and i32 %31, %26
  %163 = xor i32 %122, -1
  %164 = or i32 %35, %163
  %165 = or i32 %53, %94
  %166 = or i32 %52, %94
  %167 = and i32 %43, %39
  %168 = and i32 %46, %2
  %169 = xor i32 %117, %2
  %170 = and i32 %43, %46
  %171 = and i32 %32, %2
  %172 = shl i32 %171, 1
  %173 = or i32 %25, %45
  %174 = or i32 %40, %45
  %175 = xor i32 %163, %0
  %176 = and i32 %53, %94
  %177 = or i32 %40, %117
  %178 = xor i32 %62, %2
  %179 = add i32 %46, 1
  %180 = xor i32 %62, %53
  %181 = shl i32 %180, 1
  %182 = or i32 %8, %32
  %183 = add i32 %35, 1
  %184 = or i32 %43, %0
  %185 = xor i32 %76, %184
  %186 = shl i32 %185, 1
  %187 = and i32 %36, %45
  %188 = xor i32 %128, %1
  %189 = xor i32 %25, %46
  %190 = xor i32 %25, %86
  %191 = or i32 %26, %32
  %192 = xor i32 %71, %1
  %193 = xor i32 %35, %1
  %194 = shl i32 %32, 1
  %195 = xor i32 %155, %82
  %196 = xor i32 %107, -1
  %197 = or i32 %113, %196
  %198 = or i32 %31, %8
  %199 = and i32 %26, %32
  %200 = or i32 %66, %153
  %201 = add i32 %27, 1
  %202 = or i32 %35, %45
  %203 = and i32 %40, %32
  %204 = and i32 %44, %94
  %205 = and i32 %31, %2
  %206 = or i32 %62, %40
  %207 = or i32 %44, %0
  %208 = shl i32 %207, 1
  %209 = and i32 %26, %88
  %210 = or i32 %29, %62
  %211 = or i32 %35, %32
  %212 = or i32 %29, %45
  %213 = or i32 %163, %94
  %214 = and i32 %31, %36
  %215 = xor i32 %62, %105
  %216 = and i32 %43, %94
  %217 = or i32 %66, %216
  %218 = and i32 %71, %45
  %219 = or i32 %27, %62
  %220 = and i32 %36, %32
  %221 = or i32 %25, %31
  %222 = and i32 %77, %94
  %223 = xor i32 %222, %79
  %224 = or i32 %29, %117
  %225 = or i32 %43, %117
  %226 = or i32 %44, %117
  %227 = xor i32 %122, %0
  %228 = or i32 %38, %163
  %229 = and i32 %44, %0
  %230 = and i32 %71, %32
  %231 = and i32 %7, %31
  %232 = or i32 %38, %128
  %233 = shl i32 %232, 1
  %234 = shl i32 %53, 1
  %235 = xor i32 %47, %2
  %236 = add i32 %0, 1
  %237 = or i32 %62, %2
  %238 = or i32 %67, %0
  %239 = and i32 %29, %39
  %240 = xor i32 %44, %0
  %241 = xor i32 %127, %38
  %242 = shl i32 %241, 1
  %243 = or i32 %76, %222
  %244 = and i32 %77, %0
  %245 = xor i32 %244, -1
  %246 = xor i32 %113, %245
  %247 = xor i32 %127, %1
  %248 = and i32 %127, %45
  %249 = or i32 %52, %62
  %250 = or i32 %40, %1
  %251 = xor i32 %25, %67
  %252 = or i32 %29, %31
  %253 = xor i32 %216, 2147483647
  %254 = xor i32 %253, %66
  %255 = and i32 %29, %31
  %256 = and i32 %105, %94
  %257 = xor i32 %46, %2
  %258 = or i32 %40, %47
  %259 = and i32 %111, %94
  %260 = and i32 %111, %0
  %261 = mul i32 %260, 11
  %262 = and i32 %27, %0
  %263 = mul i32 %262, 10
  %264 = and i32 %163, %94
  %265 = shl i32 %264, 1
  %266 = and i32 %163, %0
  %267 = shl i32 %266, 2
  %268 = mul i32 %66, -6
  %269 = add i32 %235, %39
  %270 = add i32 %269, %205
  %271 = add i32 %270, %147
  %272 = add i32 %271, %255
  %273 = add i32 %272, %226
  %274 = add i32 %273, %225
  %275 = add i32 %274, %221
  %276 = add i32 %275, %214
  %277 = add i32 %276, %213
  %278 = add i32 %277, %210
  %279 = add i32 %278, %152
  %280 = add i32 %279, %143
  %281 = add i32 %280, %129
  %282 = add i32 %281, %93
  %283 = add i32 %282, %64
  %284 = add i32 %283, %217
  %285 = add i32 %284, %200
  %286 = add i32 %285, %254
  %287 = shl i32 %286, 1
  %288 = add i32 %140, %247
  %289 = sub i32 %126, %288
  %290 = add i32 %289, %28
  %291 = sub i32 %290, %16
  %292 = sub i32 %291, %13
  %293 = mul i32 %292, 5
  %294 = sub i32 %259, %95
  %295 = mul i32 %294, 7
  %296 = add i32 %130, %150
  %297 = add i32 %296, %243
  %298 = mul i32 %297, 3
  %299 = sub i32 %236, %1
  %300 = add i32 %299, %91
  %301 = add i32 %300, %46
  %302 = add i32 %301, %179
  %303 = sub i32 %302, %2
  %304 = sub i32 %303, %31
  %305 = add i32 %304, %3
  %306 = add i32 %305, %42
  %307 = add i32 %306, %44
  %308 = add i32 %307, %72
  %309 = sub i32 %308, %84
  %310 = sub i32 %309, %100
  %311 = sub i32 %310, %102
  %312 = add i32 %311, %115
  %313 = add i32 %312, %118
  %314 = add i32 %313, %27
  %315 = add i32 %314, %119
  %316 = sub i32 %315, %125
  %317 = sub i32 %316, %131
  %318 = sub i32 %317, %162
  %319 = sub i32 %318, %168
  %320 = add i32 %319, %169
  %321 = add i32 %320, %178
  %322 = add i32 %321, %35
  %323 = add i32 %322, %183
  %324 = sub i32 %323, %191
  %325 = sub i32 %324, %194
  %326 = add i32 %325, %199
  %327 = add i32 %326, %201
  %328 = sub i32 %327, %209
  %329 = add i32 %328, %163
  %330 = sub i32 %329, %29
  %331 = sub i32 %330, %122
  %332 = sub i32 %331, %237
  %333 = add i32 %332, %25
  %334 = add i32 %333, %257
  %335 = add i32 %334, %4
  %336 = add i32 %335, %30
  %337 = add i32 %336, %33
  %338 = add i32 %337, %34
  %339 = add i32 %338, %37
  %340 = add i32 %339, %41
  %341 = sub i32 %340, %50
  %342 = sub i32 %341, %51
  %343 = sub i32 %342, %54
  %344 = sub i32 %343, %57
  %345 = sub i32 %344, %58
  %346 = add i32 %345, %59
  %347 = sub i32 %346, %61
  %348 = sub i32 %347, %63
  %349 = add i32 %348, %65
  %350 = sub i32 %349, %70
  %351 = sub i32 %350, %81
  %352 = sub i32 %351, %85
  %353 = sub i32 %352, %87
  %354 = add i32 %353, %89
  %355 = add i32 %354, %90
  %356 = add i32 %355, %92
  %357 = sub i32 %356, %98
  %358 = sub i32 %357, %99
  %359 = sub i32 %358, %101
  %360 = sub i32 %359, %103
  %361 = sub i32 %360, %104
  %362 = add i32 %361, %106
  %363 = add i32 %362, %109
  %364 = sub i32 %363, %110
  %365 = add i32 %364, %112
  %366 = sub i32 %365, %116
  %367 = sub i32 %366, %121
  %368 = add i32 %367, %123
  %369 = add i32 %368, %124
  %370 = sub i32 %369, %132
  %371 = sub i32 %370, %133
  %372 = sub i32 %371, %134
  %373 = sub i32 %372, %137
  %374 = add i32 %373, %138
  %375 = add i32 %374, %141
  %376 = sub i32 %375, %142
  %377 = sub i32 %376, %146
  %378 = sub i32 %377, %148
  %379 = add i32 %378, %149
  %380 = sub i32 %379, %96
  %381 = add i32 %380, %155
  %382 = add i32 %381, %156
  %383 = sub i32 %382, %159
  %384 = add i32 %383, %164
  %385 = sub i32 %384, %165
  %386 = sub i32 %385, %166
  %387 = add i32 %386, %167
  %388 = sub i32 %387, %170
  %389 = sub i32 %388, %172
  %390 = add i32 %389, %173
  %391 = sub i32 %390, %174
  %392 = sub i32 %391, %175
  %393 = sub i32 %392, %176
  %394 = sub i32 %393, %177
  %395 = add i32 %394, %182
  %396 = sub i32 %395, %187
  %397 = add i32 %396, %188
  %398 = add i32 %397, %189
  %399 = add i32 %398, %190
  %400 = sub i32 %399, %192
  %401 = add i32 %400, %193
  %402 = sub i32 %401, %198
  %403 = sub i32 %402, %202
  %404 = add i32 %403, %203
  %405 = sub i32 %404, %204
  %406 = add i32 %405, %206
  %407 = sub i32 %406, %211
  %408 = add i32 %407, %212
  %409 = sub i32 %408, %215
  %410 = sub i32 %409, %218
  %411 = add i32 %410, %219
  %412 = add i32 %411, %220
  %413 = sub i32 %412, %224
  %414 = sub i32 %413, %227
  %415 = sub i32 %414, %228
  %416 = sub i32 %415, %229
  %417 = add i32 %416, %230
  %418 = add i32 %417, %231
  %419 = sub i32 %418, %234
  %420 = add i32 %419, %68
  %421 = sub i32 %420, %238
  %422 = add i32 %421, %239
  %423 = add i32 %422, %240
  %424 = sub i32 %423, %73
  %425 = add i32 %424, %184
  %426 = add i32 %425, %248
  %427 = add i32 %426, %249
  %428 = sub i32 %427, %250
  %429 = sub i32 %428, %251
  %430 = sub i32 %429, %252
  %431 = add i32 %430, %256
  %432 = add i32 %431, %258
  %433 = add i32 %432, %14
  %434 = add i32 %433, %16
  %435 = sub i32 %434, %49
  %436 = sub i32 %435, %56
  %437 = add i32 %436, %69
  %438 = sub i32 %437, %74
  %439 = add i32 %438, %80
  %440 = sub i32 %439, %83
  %441 = add i32 %440, %97
  %442 = sub i32 %441, %108
  %443 = add i32 %442, %114
  %444 = sub i32 %443, %136
  %445 = sub i32 %444, %139
  %446 = sub i32 %445, %145
  %447 = sub i32 %446, %151
  %448 = sub i32 %447, %154
  %449 = sub i32 %448, %158
  %450 = add i32 %449, %161
  %451 = sub i32 %450, %181
  %452 = add i32 %451, %195
  %453 = sub i32 %452, %197
  %454 = sub i32 %453, %208
  %455 = add i32 %454, %223
  %456 = sub i32 %455, %233
  %457 = sub i32 %456, %242
  %458 = sub i32 %457, %246
  %459 = add i32 %458, %261
  %460 = add i32 %459, %263
  %461 = sub i32 %460, %265
  %462 = sub i32 %461, %267
  %463 = add i32 %462, %268
  %464 = sub i32 %463, %24
  %465 = sub i32 %464, %186
  %466 = add i32 %465, %295
  %467 = add i32 %466, %18
  %468 = sub i32 %467, %21
  %469 = add i32 %468, %298
  %470 = add i32 %469, %293
  %471 = add i32 %470, %287
  %472 = icmp eq i32 %471, %12
  %473 = select i1 %472, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)
  %474 = tail call i32 @puts(i8* nonnull dereferenceable(1) %473)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #1 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %6) #5
  %7 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %7) #5
  %8 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %8) #5
  %9 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %9) #5
  %10 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %10) #5
  %11 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3, i32* nonnull %4, i32* nonnull %5)
  %12 = load i32, i32* %1, align 4, !tbaa !2
  %13 = load i32, i32* %2, align 4, !tbaa !2
  %14 = load i32, i32* %3, align 4, !tbaa !2
  %15 = load i32, i32* %4, align 4, !tbaa !2
  %16 = load i32, i32* %5, align 4, !tbaa !2
  call void @crackme(i32 %12, i32 %13, i32 %14, i32 %15, i32 %16)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %10) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %9) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %8) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %7) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %6) #5
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare dso_local i32 @__isoc99_scanf(i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #4

attributes #0 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Ubuntu clang version 10.0.1-++20200708122807+ef32c611aa2-1~exp1~20200707223407.61 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
