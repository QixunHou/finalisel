; ModuleID = '../.././c_source_file/0144_path_condition_crackme.c'
source_filename = "../.././c_source_file/0144_path_condition_crackme.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str.2 = private unnamed_addr constant [18 x i8] c"%d %d %d %d %d %d\00", align 1
@str = private unnamed_addr constant [4 x i8] c"bad\00", align 1
@str.3 = private unnamed_addr constant [5 x i8] c"good\00", align 1

; Function Attrs: nofree nounwind uwtable
define dso_local void @crackme(i32 %0, i32 %1, i32 %2, i32 %3, i32 %4, i32 %5) local_unnamed_addr #0 {
  %7 = xor i32 %1, -1
  %8 = and i32 %7, %2
  %9 = and i32 %8, %0
  %10 = xor i32 %0, -1
  %11 = or i32 %7, %2
  %12 = and i32 %11, %10
  %13 = xor i32 %9, -1
  %14 = xor i32 %12, %13
  %15 = or i32 %2, %0
  %16 = and i32 %15, %7
  %17 = sub i32 %14, %16
  %18 = xor i32 %3, -1
  %19 = or i32 %18, %4
  %20 = xor i32 %5, %3
  %21 = and i32 %20, %19
  %22 = add i32 %17, %21
  %23 = and i32 %5, %3
  %24 = or i32 %23, %4
  %25 = add i32 %22, %24
  %26 = or i32 %1, %0
  %27 = xor i32 %2, %1
  %28 = and i32 %27, %26
  %29 = xor i32 %26, -1
  %30 = xor i32 %27, -1
  %31 = or i32 %30, %29
  %32 = xor i32 %2, -1
  %33 = and i32 %32, %1
  %34 = xor i32 %33, -1
  %35 = xor i32 %34, %0
  %36 = and i32 %30, %0
  %37 = shl i32 %36, 1
  %38 = and i32 %1, %0
  %39 = xor i32 %38, -1
  %40 = add i32 %38, 1
  %41 = or i32 %2, %1
  %42 = xor i32 %41, %38
  %43 = xor i32 %33, %0
  %44 = and i32 %7, %0
  %45 = xor i32 %44, -1
  %46 = xor i32 %2, %0
  %47 = and i32 %46, %45
  %48 = shl i32 %33, 1
  %49 = xor i32 %41, -1
  %50 = or i32 %38, %49
  %51 = xor i32 %15, -1
  %52 = or i32 %51, %7
  %53 = and i32 %2, %1
  %54 = and i32 %53, %0
  %55 = xor i32 %41, %0
  %56 = or i32 %54, %55
  %57 = and i32 %2, %0
  %58 = or i32 %57, %1
  %59 = shl i32 %58, 1
  %60 = xor i32 %57, %34
  %61 = or i32 %7, %0
  %62 = xor i32 %61, -1
  %63 = or i32 %30, %62
  %64 = or i32 %27, %0
  %65 = xor i32 %1, %0
  %66 = xor i32 %46, -1
  %67 = and i32 %65, %66
  %68 = or i32 %66, %1
  %69 = add i32 %44, 1
  %70 = xor i32 %65, -1
  %71 = and i32 %15, %70
  %72 = and i32 %41, %10
  %73 = or i32 %54, %72
  %74 = or i32 %27, %38
  %75 = xor i32 %26, %2
  %76 = and i32 %32, %0
  %77 = xor i32 %76, -1
  %78 = xor i32 %77, %1
  %79 = or i32 %65, %51
  %80 = xor i32 %11, %0
  %81 = or i32 %9, %80
  %82 = or i32 %76, %65
  %83 = or i32 %34, %0
  %84 = and i32 %77, %7
  %85 = xor i32 %80, %13
  %86 = or i32 %62, %2
  %87 = or i32 %76, %1
  %88 = or i32 %32, %0
  %89 = xor i32 %88, %38
  %90 = or i32 %32, %1
  %91 = xor i32 %90, -1
  %92 = shl i32 %91, 1
  %93 = and i32 %90, %0
  %94 = shl i32 %93, 1
  %95 = or i32 %46, %65
  %96 = xor i32 %88, -1
  %97 = or i32 %38, %96
  %98 = shl i32 %53, 1
  %99 = or i32 %38, %2
  %100 = and i32 %46, %39
  %101 = or i32 %46, %38
  %102 = shl i32 %101, 1
  %103 = xor i32 %57, %26
  %104 = xor i32 %53, -1
  %105 = or i32 %104, %10
  %106 = and i32 %66, %7
  %107 = xor i32 %53, %0
  %108 = and i32 %104, %10
  %109 = xor i32 %88, %1
  %110 = add i32 %46, 1
  %111 = and i32 %30, %39
  %112 = shl i32 %111, 2
  %113 = and i32 %66, %45
  %114 = and i32 %61, %66
  %115 = shl i32 %114, 1
  %116 = or i32 %70, %2
  %117 = xor i32 %90, %38
  %118 = or i32 %9, %12
  %119 = xor i32 %15, %38
  %120 = and i32 %66, %1
  %121 = or i32 %104, %0
  %122 = and i32 %46, %1
  %123 = or i32 %41, %0
  %124 = or i32 %57, %62
  %125 = and i32 %15, %1
  %126 = and i32 %27, %39
  %127 = add i32 %53, 1
  %128 = and i32 %65, %77
  %129 = shl i32 %128, 1
  %130 = xor i32 %44, %104
  %131 = or i32 %30, %10
  %132 = and i32 %77, %1
  %133 = and i32 %53, %10
  %134 = and i32 %27, %0
  %135 = xor i32 %133, -1
  %136 = xor i32 %134, %135
  %137 = or i32 %91, %0
  %138 = or i32 %57, %70
  %139 = shl i32 %138, 1
  %140 = xor i32 %38, %2
  %141 = or i32 %46, %29
  %142 = or i32 %44, %2
  %143 = shl i32 %142, 1
  %144 = or i32 %65, %96
  %145 = xor i32 %57, -1
  %146 = xor i32 %145, %1
  %147 = xor i32 %51, %1
  %148 = and i32 %32, %70
  %149 = or i32 %66, %62
  %150 = or i32 %29, %2
  %151 = or i32 %27, %44
  %152 = and i32 %104, %0
  %153 = or i32 %53, %10
  %154 = xor i32 %44, %2
  %155 = xor i32 %91, %0
  %156 = and i32 %27, %10
  %157 = or i32 %54, %156
  %158 = or i32 %30, %0
  %159 = xor i32 %104, %0
  %160 = and i32 %8, %10
  %161 = and i32 %11, %0
  %162 = xor i32 %161, -1
  %163 = xor i32 %160, %162
  %164 = xor i32 %27, %10
  %165 = or i32 %54, %164
  %166 = and i32 %26, %30
  %167 = or i32 %90, %10
  %168 = or i32 %38, %51
  %169 = or i32 %34, %10
  %170 = and i32 %65, %32
  %171 = and i32 %66, %70
  %172 = and i32 %46, %7
  %173 = and i32 %26, %2
  %174 = xor i32 %156, -1
  %175 = xor i32 %54, %174
  %176 = xor i32 %44, %34
  %177 = and i32 %41, %0
  %178 = xor i32 %177, %135
  %179 = and i32 %145, %1
  %180 = or i32 %160, %161
  %181 = or i32 %96, %7
  %182 = add i32 %33, 1
  %183 = and i32 %49, %10
  %184 = mul i32 %183, 10
  %185 = and i32 %33, %0
  %186 = shl i32 %185, 4
  %187 = and i32 %91, %10
  %188 = shl i32 %187, 2
  %189 = mul i32 %133, 12
  %190 = and i32 %91, %0
  %191 = mul i32 %54, 27
  %192 = or i32 %5, %3
  %193 = xor i32 %192, -1
  %194 = or i32 %193, %4
  %195 = xor i32 %5, -1
  %196 = or i32 %195, %4
  %197 = xor i32 %196, -1
  %198 = xor i32 %4, %3
  %199 = xor i32 %198, -1
  %200 = or i32 %197, %199
  %201 = xor i32 %4, -1
  %202 = and i32 %192, %201
  %203 = or i32 %5, %4
  %204 = xor i32 %203, -1
  %205 = xor i32 %5, %4
  %206 = xor i32 %205, -1
  %207 = and i32 %206, %18
  %208 = and i32 %195, %4
  %209 = xor i32 %208, -1
  %210 = and i32 %198, %209
  %211 = xor i32 %23, -1
  %212 = add i32 %23, 1
  %213 = and i32 %18, %5
  %214 = and i32 %213, %4
  %215 = or i32 %18, %5
  %216 = xor i32 %215, -1
  %217 = or i32 %216, %4
  %218 = xor i32 %214, %217
  %219 = and i32 %195, %3
  %220 = xor i32 %219, -1
  %221 = and i32 %220, %4
  %222 = and i32 %4, %3
  %223 = or i32 %222, %5
  %224 = shl i32 %223, 1
  %225 = and i32 %199, %5
  %226 = xor i32 %215, %4
  %227 = or i32 %214, %226
  %228 = or i32 %204, %18
  %229 = shl i32 %228, 1
  %230 = xor i32 %222, -1
  %231 = and i32 %20, %230
  %232 = or i32 %195, %3
  %233 = or i32 %232, %4
  %234 = xor i32 %20, -1
  %235 = add i32 %20, 1
  %236 = or i32 %20, %4
  %237 = and i32 %211, %201
  %238 = xor i32 %19, -1
  %239 = or i32 %195, %238
  %240 = shl i32 %239, 1
  %241 = and i32 %18, %4
  %242 = or i32 %241, %195
  %243 = or i32 %4, %3
  %244 = xor i32 %243, -1
  %245 = or i32 %205, %244
  %246 = or i32 %198, %197
  %247 = add i32 %19, 1
  %248 = or i32 %20, %238
  %249 = xor i32 %219, %4
  %250 = or i32 %234, %4
  %251 = and i32 %243, %5
  %252 = and i32 %206, %230
  %253 = and i32 %220, %201
  %254 = and i32 %5, %4
  %255 = xor i32 %254, -1
  %256 = xor i32 %255, %3
  %257 = and i32 %23, %4
  %258 = and i32 %20, %201
  %259 = xor i32 %257, -1
  %260 = xor i32 %258, %259
  %261 = xor i32 %20, %4
  %262 = xor i32 %261, -1
  %263 = or i32 %257, %262
  %264 = xor i32 %236, 2147483647
  %265 = or i32 %264, %214
  %266 = shl i32 %265, 1
  %267 = xor i32 %192, %222
  %268 = xor i32 %243, %5
  %269 = or i32 %23, %201
  %270 = shl i32 %206, 1
  %271 = or i32 %204, %199
  %272 = xor i32 %244, %5
  %273 = or i32 %20, %241
  %274 = or i32 %195, %244
  %275 = and i32 %213, %201
  %276 = and i32 %234, %4
  %277 = or i32 %275, %276
  %278 = xor i32 %241, %5
  %279 = shl i32 %278, 1
  %280 = xor i32 %254, %3
  %281 = shl i32 %280, 1
  %282 = and i32 %198, %206
  %283 = and i32 %230, %5
  %284 = xor i32 %234, %4
  %285 = or i32 %219, %241
  %286 = xor i32 %23, %4
  %287 = or i32 %254, %219
  %288 = and i32 %196, %3
  %289 = xor i32 %232, -1
  %290 = xor i32 %289, %4
  %291 = or i32 %198, %206
  %292 = xor i32 %203, %3
  %293 = xor i32 %241, -1
  %294 = and i32 %20, %293
  %295 = and i32 %232, %4
  %296 = or i32 %257, %258
  %297 = shl i32 %296, 1
  %298 = or i32 %206, %238
  %299 = shl i32 %298, 1
  %300 = xor i32 %226, -1
  %301 = xor i32 %214, %300
  %302 = xor i32 %211, %4
  %303 = or i32 %241, %206
  %304 = or i32 %206, %18
  %305 = or i32 %204, %3
  %306 = and i32 %234, %201
  %307 = xor i32 %241, %211
  %308 = and i32 %255, %3
  %309 = shl i32 %308, 1
  %310 = xor i32 %193, %4
  %311 = or i32 %205, %222
  %312 = and i32 %206, %199
  %313 = shl i32 %312, 1
  %314 = or i32 %211, %4
  %315 = or i32 %208, %199
  %316 = xor i32 %254, %19
  %317 = or i32 %192, %4
  %318 = and i32 %206, %293
  %319 = or i32 %238, %5
  %320 = and i32 %255, %18
  %321 = shl i32 %320, 1
  %322 = or i32 %205, %3
  %323 = xor i32 %220, %4
  %324 = or i32 %205, %199
  %325 = or i32 %244, %5
  %326 = and i32 %19, %234
  %327 = and i32 %215, %4
  %328 = xor i32 %327, 2147483647
  %329 = xor i32 %328, %275
  %330 = or i32 %20, %244
  %331 = and i32 %206, %3
  %332 = and i32 %243, %195
  %333 = and i32 %23, %201
  %334 = and i32 %20, %4
  %335 = xor i32 %334, 2147483647
  %336 = xor i32 %335, %333
  %337 = or i32 %254, %198
  %338 = shl i32 %337, 2
  %339 = and i32 %19, %206
  %340 = xor i32 %222, %5
  %341 = or i32 %234, %244
  %342 = or i32 %275, %327
  %343 = and i32 %198, %195
  %344 = and i32 %205, %3
  %345 = or i32 %206, %3
  %346 = and i32 %293, %5
  %347 = xor i32 %196, %222
  %348 = and i32 %19, %5
  %349 = and i32 %196, %198
  %350 = and i32 %255, %199
  %351 = and i32 %209, %199
  %352 = and i32 %195, %293
  %353 = and i32 %203, %198
  %354 = or i32 %192, %201
  %355 = xor i32 %197, %3
  %356 = and i32 %234, %230
  %357 = or i32 %20, %222
  %358 = shl i32 %357, 1
  %359 = xor i32 %214, %262
  %360 = and i32 %203, %199
  %361 = or i32 %208, %3
  %362 = shl i32 %361, 1
  %363 = xor i32 %192, %4
  %364 = xor i32 %363, %259
  %365 = or i32 %199, %5
  %366 = shl i32 %365, 1
  %367 = or i32 %211, %201
  %368 = or i32 %220, %201
  %369 = and i32 %243, %206
  %370 = and i32 %203, %18
  %371 = or i32 %254, %238
  %372 = or i32 %254, %199
  %373 = or i32 %254, %18
  %374 = or i32 %257, %202
  %375 = xor i32 %254, %243
  %376 = or i32 %220, %4
  %377 = shl i32 %376, 1
  %378 = or i32 %23, %241
  %379 = or i32 %193, %201
  %380 = xor i32 %208, %232
  %381 = or i32 %206, %199
  %382 = or i32 %241, %5
  %383 = shl i32 %382, 1
  %384 = or i32 %206, %244
  %385 = or i32 %214, %261
  %386 = and i32 %19, %195
  %387 = and i32 %243, %234
  %388 = or i32 %198, %204
  %389 = xor i32 %208, %3
  %390 = or i32 %289, %4
  %391 = and i32 %193, %201
  %392 = and i32 %219, %201
  %393 = and i32 %193, %4
  %394 = and i32 %219, %4
  %395 = shl i32 %394, 1
  %396 = and i32 %289, %201
  %397 = mul i32 %396, -18
  %398 = mul i32 %333, 9
  %399 = and i32 %289, %4
  %400 = shl i32 %257, 3
  %401 = sub i32 -2, %41
  %402 = add i32 %401, %30
  %403 = add i32 %402, %75
  %404 = add i32 %403, %181
  %405 = add i32 %404, %167
  %406 = add i32 %405, %132
  %407 = add i32 %406, %107
  %408 = add i32 %407, %105
  %409 = add i32 %408, %97
  %410 = add i32 %409, %78
  %411 = add i32 %410, %67
  %412 = add i32 %411, %244
  %413 = add i32 %412, %118
  %414 = add i32 %413, %232
  %415 = add i32 %414, %204
  %416 = add i32 %415, %387
  %417 = add i32 %416, %379
  %418 = add i32 %417, %368
  %419 = add i32 %418, %331
  %420 = add i32 %419, %316
  %421 = add i32 %420, %310
  %422 = add i32 %421, %249
  %423 = add i32 %422, %231
  %424 = add i32 %423, %329
  %425 = add i32 %424, %336
  %426 = shl i32 %425, 1
  %427 = add i32 %89, %152
  %428 = sub i32 %427, %50
  %429 = add i32 %428, %274
  %430 = add i32 %429, %375
  %431 = mul i32 %430, 3
  %432 = add i32 %165, %130
  %433 = sub i32 %246, %432
  %434 = sub i32 %433, %284
  %435 = mul i32 %434, 5
  %436 = or i32 %393, %392
  %437 = add i32 %436, %391
  %438 = mul i32 %437, -17
  %439 = add i32 %399, %190
  %440 = mul i32 %439, 7
  %441 = sub i32 -5, %1
  %442 = add i32 %441, %40
  %443 = add i32 %442, %69
  %444 = sub i32 %443, %15
  %445 = sub i32 %444, %86
  %446 = add i32 %445, %99
  %447 = sub i32 %446, %57
  %448 = add i32 %447, %110
  %449 = sub i32 %448, %116
  %450 = add i32 %449, %127
  %451 = sub i32 %450, %140
  %452 = add i32 %451, %148
  %453 = add i32 %452, %41
  %454 = sub i32 %453, %150
  %455 = sub i32 %454, %46
  %456 = sub i32 %455, %154
  %457 = sub i32 %456, %170
  %458 = sub i32 %457, %173
  %459 = add i32 %458, %182
  %460 = add i32 %459, %31
  %461 = add i32 %460, %28
  %462 = add i32 %461, %35
  %463 = add i32 %462, %42
  %464 = add i32 %463, %43
  %465 = sub i32 %464, %47
  %466 = sub i32 %465, %48
  %467 = add i32 %466, %52
  %468 = add i32 %467, %60
  %469 = sub i32 %468, %63
  %470 = add i32 %469, %64
  %471 = sub i32 %470, %68
  %472 = sub i32 %471, %71
  %473 = sub i32 %472, %74
  %474 = sub i32 %473, %79
  %475 = sub i32 %474, %82
  %476 = sub i32 %475, %83
  %477 = sub i32 %476, %84
  %478 = add i32 %477, %87
  %479 = sub i32 %478, %92
  %480 = add i32 %479, %55
  %481 = sub i32 %480, %95
  %482 = sub i32 %481, %98
  %483 = add i32 %482, %100
  %484 = add i32 %483, %103
  %485 = add i32 %484, %106
  %486 = sub i32 %485, %108
  %487 = sub i32 %486, %109
  %488 = sub i32 %487, %113
  %489 = add i32 %488, %117
  %490 = sub i32 %489, %119
  %491 = sub i32 %490, %120
  %492 = sub i32 %491, %121
  %493 = sub i32 %492, %122
  %494 = sub i32 %493, %123
  %495 = add i32 %494, %124
  %496 = sub i32 %495, %125
  %497 = add i32 %496, %126
  %498 = sub i32 %497, %131
  %499 = sub i32 %498, %137
  %500 = sub i32 %499, %141
  %501 = sub i32 %500, %143
  %502 = add i32 %501, %144
  %503 = add i32 %502, %146
  %504 = add i32 %503, %147
  %505 = add i32 %504, %149
  %506 = sub i32 %505, %151
  %507 = add i32 %506, %153
  %508 = add i32 %507, %155
  %509 = sub i32 %508, %158
  %510 = add i32 %509, %159
  %511 = sub i32 %510, %72
  %512 = sub i32 %511, %166
  %513 = sub i32 %512, %168
  %514 = sub i32 %513, %169
  %515 = sub i32 %514, %171
  %516 = add i32 %515, %172
  %517 = sub i32 %516, %176
  %518 = add i32 %517, %179
  %519 = add i32 %518, %201
  %520 = sub i32 %519, %37
  %521 = sub i32 %520, %56
  %522 = sub i32 %521, %59
  %523 = add i32 %522, %73
  %524 = add i32 %523, %81
  %525 = add i32 %524, %85
  %526 = sub i32 %525, %94
  %527 = sub i32 %526, %102
  %528 = sub i32 %527, %112
  %529 = sub i32 %528, %115
  %530 = sub i32 %529, %129
  %531 = add i32 %530, %136
  %532 = sub i32 %531, %139
  %533 = add i32 %532, %157
  %534 = add i32 %533, %163
  %535 = add i32 %534, %175
  %536 = sub i32 %535, %178
  %537 = add i32 %536, %180
  %538 = add i32 %537, %184
  %539 = add i32 %538, %186
  %540 = add i32 %539, %188
  %541 = add i32 %540, %189
  %542 = add i32 %541, %191
  %543 = add i32 %542, %247
  %544 = add i32 %543, %199
  %545 = add i32 %544, %212
  %546 = add i32 %545, %20
  %547 = add i32 %546, %225
  %548 = add i32 %547, %235
  %549 = sub i32 %548, %242
  %550 = add i32 %549, %251
  %551 = add i32 %550, %268
  %552 = add i32 %551, %272
  %553 = sub i32 %552, %283
  %554 = add i32 %553, %23
  %555 = sub i32 %554, %254
  %556 = add i32 %555, %319
  %557 = add i32 %556, %325
  %558 = sub i32 %557, %332
  %559 = add i32 %558, %203
  %560 = sub i32 %559, %340
  %561 = add i32 %560, %343
  %562 = sub i32 %561, %346
  %563 = sub i32 %562, %348
  %564 = add i32 %563, %352
  %565 = add i32 %564, 1
  %566 = add i32 %565, %386
  %567 = add i32 %566, %289
  %568 = add i32 %567, %194
  %569 = add i32 %568, %200
  %570 = add i32 %569, %202
  %571 = add i32 %570, %207
  %572 = sub i32 %571, %210
  %573 = add i32 %572, %221
  %574 = sub i32 %573, %224
  %575 = add i32 %574, %233
  %576 = sub i32 %575, %236
  %577 = add i32 %576, %237
  %578 = sub i32 %577, %240
  %579 = add i32 %578, %245
  %580 = add i32 %579, %248
  %581 = add i32 %580, %250
  %582 = add i32 %581, %252
  %583 = sub i32 %582, %253
  %584 = add i32 %583, %256
  %585 = sub i32 %584, %267
  %586 = add i32 %585, %269
  %587 = sub i32 %586, %270
  %588 = add i32 %587, %271
  %589 = add i32 %588, %273
  %590 = sub i32 %589, %279
  %591 = sub i32 %590, %282
  %592 = sub i32 %591, %285
  %593 = sub i32 %592, %286
  %594 = sub i32 %593, %287
  %595 = sub i32 %594, %288
  %596 = sub i32 %595, %290
  %597 = sub i32 %596, %291
  %598 = add i32 %597, %292
  %599 = sub i32 %598, %294
  %600 = add i32 %599, %295
  %601 = add i32 %600, %302
  %602 = sub i32 %601, %303
  %603 = sub i32 %602, %304
  %604 = sub i32 %603, %305
  %605 = sub i32 %604, %306
  %606 = sub i32 %605, %307
  %607 = add i32 %606, %311
  %608 = add i32 %607, %258
  %609 = add i32 %608, %314
  %610 = add i32 %609, %315
  %611 = add i32 %610, %317
  %612 = add i32 %611, %318
  %613 = sub i32 %612, %322
  %614 = sub i32 %613, %261
  %615 = add i32 %614, %323
  %616 = add i32 %615, %324
  %617 = add i32 %616, %326
  %618 = add i32 %617, %330
  %619 = add i32 %618, %339
  %620 = sub i32 %619, %341
  %621 = sub i32 %620, %344
  %622 = sub i32 %621, %345
  %623 = add i32 %622, %347
  %624 = add i32 %623, %349
  %625 = add i32 %624, %350
  %626 = sub i32 %625, %351
  %627 = add i32 %626, %353
  %628 = sub i32 %627, %354
  %629 = sub i32 %628, %355
  %630 = sub i32 %629, %356
  %631 = add i32 %630, %360
  %632 = sub i32 %631, %366
  %633 = sub i32 %632, %367
  %634 = add i32 %633, %369
  %635 = sub i32 %634, %370
  %636 = add i32 %635, %371
  %637 = add i32 %636, %372
  %638 = sub i32 %637, %373
  %639 = sub i32 %638, %378
  %640 = add i32 %639, %380
  %641 = add i32 %640, %381
  %642 = sub i32 %641, %383
  %643 = add i32 %642, %384
  %644 = sub i32 %643, %363
  %645 = sub i32 %644, %334
  %646 = add i32 %645, %388
  %647 = sub i32 %646, %389
  %648 = add i32 %647, %390
  %649 = add i32 %648, %218
  %650 = sub i32 %649, %227
  %651 = sub i32 %650, %229
  %652 = add i32 %651, %260
  %653 = add i32 %652, %263
  %654 = add i32 %653, %277
  %655 = sub i32 %654, %281
  %656 = sub i32 %655, %299
  %657 = add i32 %656, %301
  %658 = sub i32 %657, %309
  %659 = sub i32 %658, %313
  %660 = sub i32 %659, %321
  %661 = sub i32 %660, %338
  %662 = add i32 %661, %342
  %663 = sub i32 %662, %358
  %664 = sub i32 %663, %359
  %665 = sub i32 %664, %362
  %666 = sub i32 %665, %364
  %667 = add i32 %666, %374
  %668 = sub i32 %667, %377
  %669 = sub i32 %668, %385
  %670 = sub i32 %669, %395
  %671 = add i32 %670, %397
  %672 = add i32 %671, %398
  %673 = sub i32 %672, %400
  %674 = sub i32 %673, %297
  %675 = add i32 %674, %440
  %676 = sub i32 %675, %266
  %677 = add i32 %676, %438
  %678 = add i32 %677, %435
  %679 = add i32 %678, %431
  %680 = add i32 %679, %426
  %681 = icmp eq i32 %25, %680
  %682 = select i1 %681, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)
  %683 = tail call i32 @puts(i8* nonnull dereferenceable(1) %682)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #1 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %7) #5
  %8 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %8) #5
  %9 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %9) #5
  %10 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %10) #5
  %11 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %11) #5
  %12 = bitcast i32* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %12) #5
  %13 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3, i32* nonnull %4, i32* nonnull %5, i32* nonnull %6)
  %14 = load i32, i32* %1, align 4, !tbaa !2
  %15 = load i32, i32* %2, align 4, !tbaa !2
  %16 = load i32, i32* %3, align 4, !tbaa !2
  %17 = load i32, i32* %4, align 4, !tbaa !2
  %18 = load i32, i32* %5, align 4, !tbaa !2
  %19 = load i32, i32* %6, align 4, !tbaa !2
  call void @crackme(i32 %14, i32 %15, i32 %16, i32 %17, i32 %18, i32 %19)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %12) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %11) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %10) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %9) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %8) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %7) #5
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare dso_local i32 @__isoc99_scanf(i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #4

attributes #0 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Ubuntu clang version 10.0.1-++20200708122807+ef32c611aa2-1~exp1~20200707223407.61 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
