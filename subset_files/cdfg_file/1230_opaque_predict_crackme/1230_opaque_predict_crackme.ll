; ModuleID = '../.././c_source_file/1230_opaque_predict_crackme.c'
source_filename = "../.././c_source_file/1230_opaque_predict_crackme.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str.2 = private unnamed_addr constant [15 x i8] c"%d %d %d %d %d\00", align 1
@str = private unnamed_addr constant [4 x i8] c"bad\00", align 1
@str.3 = private unnamed_addr constant [5 x i8] c"good\00", align 1

; Function Attrs: nofree nounwind uwtable
define dso_local void @crackme(i32 %0, i32 %1, i32 %2, i32 %3, i32 %4) local_unnamed_addr #0 {
  %6 = xor i32 %4, %3
  %7 = xor i32 %4, -1
  %8 = add i32 %4, 1
  %9 = shl i32 %1, 1
  %10 = sub i32 1, %9
  %11 = add i32 %10, %8
  %12 = add i32 %11, %6
  %13 = and i32 %4, %3
  %14 = and i32 %7, %3
  %15 = xor i32 %3, -1
  %16 = and i32 %15, %4
  %17 = shl i32 %13, 1
  %18 = xor i32 %0, -1
  %19 = and i32 %2, %1
  %20 = and i32 %19, %18
  %21 = or i32 %2, %1
  %22 = and i32 %21, %0
  %23 = or i32 %20, %22
  %24 = xor i32 %1, %0
  %25 = xor i32 %24, -1
  %26 = xor i32 %2, -1
  %27 = and i32 %26, %1
  %28 = xor i32 %27, -1
  %29 = or i32 %28, %18
  %30 = or i32 %26, %25
  %31 = xor i32 %1, -1
  %32 = xor i32 %2, %0
  %33 = xor i32 %32, -1
  %34 = or i32 %33, %31
  %35 = xor i32 %19, -1
  %36 = and i32 %35, %0
  %37 = xor i32 %2, %1
  %38 = xor i32 %37, -1
  %39 = or i32 %38, %18
  %40 = or i32 %31, %0
  %41 = xor i32 %40, -1
  %42 = or i32 %32, %41
  %43 = or i32 %26, %0
  %44 = xor i32 %43, -1
  %45 = or i32 %44, %1
  %46 = and i32 %37, %0
  %47 = xor i32 %20, -1
  %48 = xor i32 %46, %47
  %49 = or i32 %38, %41
  %50 = and i32 %31, %0
  %51 = or i32 %50, %26
  %52 = xor i32 %37, %0
  %53 = or i32 %1, %0
  %54 = and i32 %53, %38
  %55 = or i32 %50, %2
  %56 = shl i32 %55, 1
  %57 = or i32 %26, %1
  %58 = and i32 %57, %18
  %59 = or i32 %35, %18
  %60 = and i32 %1, %0
  %61 = xor i32 %60, -1
  %62 = xor i32 %61, %2
  %63 = or i32 %28, %0
  %64 = and i32 %26, %0
  %65 = or i32 %64, %24
  %66 = xor i32 %53, -1
  %67 = or i32 %33, %66
  %68 = or i32 %35, %0
  %69 = or i32 %19, %50
  %70 = and i32 %38, %0
  %71 = xor i32 %64, -1
  %72 = xor i32 %71, %1
  %73 = and i32 %19, %0
  %74 = and i32 %21, %18
  %75 = xor i32 %73, 2147483647
  %76 = xor i32 %75, %74
  %77 = shl i32 %76, 1
  %78 = and i32 %32, %25
  %79 = or i32 %24, %33
  %80 = xor i32 %44, %1
  %81 = or i32 %37, %41
  %82 = and i32 %2, %0
  %83 = or i32 %82, %25
  %84 = add i32 %40, 1
  %85 = xor i32 %21, -1
  %86 = or i32 %82, %85
  %87 = or i32 %37, %18
  %88 = xor i32 %35, %0
  %89 = or i32 %2, %0
  %90 = xor i32 %89, -1
  %91 = xor i32 %50, -1
  %92 = and i32 %37, %91
  %93 = and i32 %43, %1
  %94 = and i32 %31, %2
  %95 = and i32 %94, %0
  %96 = or i32 %31, %2
  %97 = and i32 %96, %18
  %98 = or i32 %95, %97
  %99 = or i32 %32, %25
  %100 = xor i32 %89, %1
  %101 = or i32 %64, %31
  %102 = and i32 %26, %25
  %103 = shl i32 %102, 1
  %104 = or i32 %60, %85
  %105 = xor i32 %38, %0
  %106 = or i32 %33, %41
  %107 = or i32 %57, %0
  %108 = or i32 %32, %50
  %109 = or i32 %90, %25
  %110 = shl i32 %109, 1
  %111 = or i32 %37, %0
  %112 = xor i32 %95, %111
  %113 = or i32 %26, %41
  %114 = xor i32 %57, %0
  %115 = xor i32 %82, -1
  %116 = and i32 %24, %115
  %117 = shl i32 %116, 1
  %118 = xor i32 %57, -1
  %119 = xor i32 %118, %0
  %120 = xor i32 %21, %0
  %121 = or i32 %90, %31
  %122 = and i32 %24, %2
  %123 = and i32 %38, %61
  %124 = xor i32 %53, %2
  %125 = shl i32 %124, 1
  %126 = xor i32 %57, %60
  %127 = shl i32 %21, 1
  %128 = shl i32 %82, 1
  %129 = or i32 %118, %18
  %130 = or i32 %26, %66
  %131 = and i32 %71, %25
  %132 = xor i32 %50, %28
  %133 = or i32 %44, %25
  %134 = or i32 %64, %1
  %135 = xor i32 %21, %60
  %136 = or i32 %95, %52
  %137 = or i32 %82, %31
  %138 = and i32 %89, %25
  %139 = and i32 %33, %31
  %140 = xor i32 %43, %1
  %141 = shl i32 %140, 2
  %142 = and i32 %37, %18
  %143 = or i32 %73, %142
  %144 = and i32 %40, %38
  %145 = and i32 %89, %1
  %146 = xor i32 %111, 2147483647
  %147 = or i32 %146, %95
  %148 = shl i32 %147, 1
  %149 = xor i32 %64, %1
  %150 = shl i32 %149, 2
  %151 = or i32 %60, %38
  %152 = xor i32 %89, %60
  %153 = or i32 %66, %2
  %154 = and i32 %61, %2
  %155 = or i32 %38, %0
  %156 = and i32 %115, %1
  %157 = or i32 %20, %46
  %158 = xor i32 %95, -1
  %159 = xor i32 %52, %158
  %160 = xor i32 %66, %2
  %161 = or i32 %82, %24
  %162 = xor i32 %64, %35
  %163 = or i32 %82, %41
  %164 = xor i32 %40, %2
  %165 = and i32 %89, %31
  %166 = xor i32 %41, %2
  %167 = or i32 %85, %0
  %168 = xor i32 %64, %57
  %169 = shl i32 %168, 1
  %170 = or i32 %82, %27
  %171 = xor i32 %75, %120
  %172 = shl i32 %171, 1
  %173 = and i32 %115, %31
  %174 = or i32 %118, %0
  %175 = or i32 %37, %60
  %176 = or i32 %32, %31
  %177 = and i32 %26, %61
  %178 = or i32 %50, %33
  %179 = xor i32 %97, %158
  %180 = or i32 %21, %0
  %181 = and i32 %32, %40
  %182 = and i32 %53, %26
  %183 = or i32 %60, %118
  %184 = or i32 %50, %38
  %185 = and i32 %24, %33
  %186 = and i32 %38, %91
  %187 = xor i32 %43, %60
  %188 = xor i32 %91, %2
  %189 = and i32 %94, %18
  %190 = and i32 %96, %0
  %191 = xor i32 %190, -1
  %192 = xor i32 %189, %191
  %193 = or i32 %64, %25
  %194 = add i32 %27, 1
  %195 = xor i32 %115, %1
  %196 = and i32 %32, %91
  %197 = and i32 %28, %18
  %198 = or i32 %27, %50
  %199 = xor i32 %82, %28
  %200 = shl i32 %199, 1
  %201 = or i32 %24, %90
  %202 = shl i32 %201, 1
  %203 = and i32 %33, %61
  %204 = and i32 %53, %2
  %205 = or i32 %57, %18
  %206 = and i32 %89, %24
  %207 = and i32 %26, %91
  %208 = shl i32 %207, 1
  %209 = and i32 %25, %2
  %210 = xor i32 %85, %0
  %211 = and i32 %38, %18
  %212 = shl i32 %64, 1
  %213 = xor i32 %27, %0
  %214 = or i32 %37, %50
  %215 = or i32 %64, %118
  %216 = or i32 %82, %66
  %217 = xor i32 %82, %53
  %218 = and i32 %71, %1
  %219 = xor i32 %50, %35
  %220 = or i32 %19, %18
  %221 = or i32 %60, %33
  %222 = and i32 %37, %40
  %223 = shl i32 %222, 1
  %224 = xor i32 %28, %0
  %225 = and i32 %43, %25
  %226 = xor i32 %82, %21
  %227 = xor i32 %22, %47
  %228 = or i32 %90, %1
  %229 = and i32 %40, %2
  %230 = xor i32 %82, %40
  %231 = or i32 %21, %18
  %232 = shl i32 %231, 1
  %233 = and i32 %32, %1
  %234 = and i32 %91, %2
  %235 = shl i32 %234, 1
  %236 = or i32 %60, %2
  %237 = and i32 %32, %61
  %238 = and i32 %35, %18
  %239 = and i32 %37, %53
  %240 = and i32 %32, %24
  %241 = or i32 %41, %2
  %242 = or i32 %32, %66
  %243 = xor i32 %82, %1
  %244 = and i32 %24, %71
  %245 = xor i32 %142, -1
  %246 = xor i32 %73, %245
  %247 = or i32 %64, %19
  %248 = or i32 %32, %24
  %249 = shl i32 %248, 2
  %250 = or i32 %24, %26
  %251 = and i32 %40, %26
  %252 = xor i32 %189, %87
  %253 = and i32 %85, %18
  %254 = mul i32 %253, -6
  %255 = and i32 %27, %18
  %256 = mul i32 %255, -7
  %257 = and i32 %85, %0
  %258 = and i32 %27, %0
  %259 = mul i32 %258, 15
  %260 = and i32 %118, %18
  %261 = mul i32 %20, 19
  %262 = and i32 %118, %0
  %263 = mul i32 %262, 24
  %264 = mul i32 %73, -13
  %265 = sub i32 %166, %236
  %266 = add i32 %265, %90
  %267 = sub i32 %266, %230
  %268 = sub i32 %267, %14
  %269 = add i32 %268, %136
  %270 = mul i32 %269, 5
  %271 = sub i32 %257, %260
  %272 = mul i32 %271, 14
  %273 = add i32 %123, %79
  %274 = shl i32 %273, 2
  %275 = sub i32 %31, %23
  %276 = mul i32 %275, 3
  %277 = sub i32 -2, %50
  %278 = add i32 %277, %40
  %279 = add i32 %278, %57
  %280 = add i32 %279, %30
  %281 = add i32 %280, %3
  %282 = add i32 %281, %218
  %283 = add i32 %282, %214
  %284 = add i32 %283, %176
  %285 = add i32 %284, %173
  %286 = add i32 %285, %151
  %287 = add i32 %286, %145
  %288 = add i32 %287, %131
  %289 = add i32 %288, %99
  %290 = add i32 %289, %92
  %291 = add i32 %290, %88
  %292 = add i32 %291, %83
  %293 = add i32 %292, %80
  %294 = add i32 %293, %59
  %295 = add i32 %294, %6
  %296 = shl i32 %295, 1
  %297 = add i32 %0, 2
  %298 = add i32 %297, %2
  %299 = add i32 %298, %84
  %300 = sub i32 %299, %53
  %301 = add i32 %300, %66
  %302 = sub i32 %301, %50
  %303 = add i32 %302, %3
  %304 = add i32 %303, %35
  %305 = sub i32 %304, %51
  %306 = sub i32 %305, %62
  %307 = add i32 %306, %32
  %308 = sub i32 %307, %27
  %309 = add i32 %308, %113
  %310 = sub i32 %309, %122
  %311 = add i32 %310, %38
  %312 = add i32 %311, %130
  %313 = add i32 %312, %115
  %314 = add i32 %313, %153
  %315 = sub i32 %314, %154
  %316 = sub i32 %315, %160
  %317 = sub i32 %316, %164
  %318 = sub i32 %317, %177
  %319 = add i32 %318, %182
  %320 = add i32 %319, %85
  %321 = sub i32 %320, %188
  %322 = add i32 %321, %194
  %323 = sub i32 %322, %204
  %324 = add i32 %323, %209
  %325 = sub i32 %324, %89
  %326 = add i32 %325, %229
  %327 = sub i32 %326, %43
  %328 = sub i32 %327, %241
  %329 = sub i32 %328, %250
  %330 = sub i32 %329, %251
  %331 = add i32 %330, %4
  %332 = sub i32 %331, %29
  %333 = sub i32 %332, %34
  %334 = sub i32 %333, %36
  %335 = add i32 %334, %39
  %336 = sub i32 %335, %42
  %337 = add i32 %336, %45
  %338 = add i32 %337, %49
  %339 = add i32 %338, %52
  %340 = add i32 %339, %54
  %341 = sub i32 %340, %56
  %342 = add i32 %341, %58
  %343 = sub i32 %342, %63
  %344 = sub i32 %343, %65
  %345 = add i32 %344, %67
  %346 = sub i32 %345, %68
  %347 = sub i32 %346, %69
  %348 = add i32 %347, %70
  %349 = sub i32 %348, %72
  %350 = sub i32 %349, %78
  %351 = add i32 %350, %81
  %352 = add i32 %351, %86
  %353 = sub i32 %352, %87
  %354 = sub i32 %353, %93
  %355 = sub i32 %354, %100
  %356 = add i32 %355, %101
  %357 = sub i32 %356, %103
  %358 = sub i32 %357, %104
  %359 = sub i32 %358, %105
  %360 = sub i32 %359, %106
  %361 = sub i32 %360, %107
  %362 = sub i32 %361, %108
  %363 = sub i32 %362, %114
  %364 = sub i32 %363, %119
  %365 = sub i32 %364, %120
  %366 = sub i32 %365, %121
  %367 = sub i32 %366, %125
  %368 = sub i32 %367, %126
  %369 = sub i32 %368, %127
  %370 = sub i32 %369, %22
  %371 = sub i32 %370, %128
  %372 = add i32 %371, %129
  %373 = add i32 %372, %132
  %374 = sub i32 %373, %133
  %375 = sub i32 %374, %134
  %376 = add i32 %375, %135
  %377 = add i32 %376, %137
  %378 = add i32 %377, %138
  %379 = add i32 %378, %139
  %380 = add i32 %379, %144
  %381 = sub i32 %380, %152
  %382 = sub i32 %381, %155
  %383 = add i32 %382, %156
  %384 = sub i32 %383, %161
  %385 = add i32 %384, %162
  %386 = add i32 %385, %163
  %387 = sub i32 %386, %165
  %388 = sub i32 %387, %167
  %389 = sub i32 %388, %170
  %390 = add i32 %389, %174
  %391 = add i32 %390, %175
  %392 = sub i32 %391, %178
  %393 = add i32 %392, %180
  %394 = sub i32 %393, %181
  %395 = add i32 %394, %183
  %396 = sub i32 %395, %184
  %397 = sub i32 %396, %185
  %398 = add i32 %397, %186
  %399 = sub i32 %398, %187
  %400 = sub i32 %399, %193
  %401 = add i32 %400, %195
  %402 = add i32 %401, %196
  %403 = sub i32 %402, %197
  %404 = sub i32 %403, %198
  %405 = add i32 %404, %203
  %406 = add i32 %405, %205
  %407 = add i32 %406, %206
  %408 = sub i32 %407, %208
  %409 = sub i32 %408, %74
  %410 = add i32 %409, %111
  %411 = add i32 %410, %210
  %412 = add i32 %411, %211
  %413 = sub i32 %412, %212
  %414 = sub i32 %413, %213
  %415 = sub i32 %414, %215
  %416 = sub i32 %415, %216
  %417 = add i32 %416, %217
  %418 = add i32 %417, %219
  %419 = sub i32 %418, %220
  %420 = add i32 %419, %221
  %421 = add i32 %420, %224
  %422 = add i32 %421, %225
  %423 = add i32 %422, %226
  %424 = sub i32 %423, %228
  %425 = sub i32 %424, %233
  %426 = sub i32 %425, %235
  %427 = add i32 %426, %237
  %428 = sub i32 %427, %238
  %429 = sub i32 %428, %239
  %430 = sub i32 %429, %240
  %431 = sub i32 %430, %242
  %432 = add i32 %431, %243
  %433 = sub i32 %432, %244
  %434 = sub i32 %433, %247
  %435 = sub i32 %434, %13
  %436 = add i32 %435, %14
  %437 = sub i32 %436, %16
  %438 = sub i32 %437, %48
  %439 = add i32 %438, %98
  %440 = sub i32 %439, %110
  %441 = add i32 %440, %112
  %442 = sub i32 %441, %117
  %443 = sub i32 %442, %141
  %444 = sub i32 %443, %143
  %445 = sub i32 %444, %150
  %446 = add i32 %445, %157
  %447 = sub i32 %446, %159
  %448 = sub i32 %447, %169
  %449 = add i32 %448, %179
  %450 = add i32 %449, %192
  %451 = sub i32 %450, %200
  %452 = sub i32 %451, %202
  %453 = sub i32 %452, %223
  %454 = sub i32 %453, %227
  %455 = sub i32 %454, %232
  %456 = sub i32 %455, %246
  %457 = sub i32 %456, %249
  %458 = add i32 %457, %252
  %459 = add i32 %458, %254
  %460 = add i32 %459, %256
  %461 = add i32 %460, %259
  %462 = add i32 %461, %261
  %463 = add i32 %462, %263
  %464 = add i32 %463, %264
  %465 = sub i32 %464, %17
  %466 = add i32 %465, %272
  %467 = add i32 %466, %274
  %468 = sub i32 %467, %77
  %469 = sub i32 %468, %148
  %470 = sub i32 %469, %172
  %471 = add i32 %470, %276
  %472 = add i32 %471, %270
  %473 = add i32 %472, %296
  %474 = icmp eq i32 %12, %473
  %475 = select i1 %474, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)
  %476 = tail call i32 @puts(i8* nonnull dereferenceable(1) %475)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #1 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %6) #5
  %7 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %7) #5
  %8 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %8) #5
  %9 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %9) #5
  %10 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %10) #5
  %11 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3, i32* nonnull %4, i32* nonnull %5)
  %12 = load i32, i32* %1, align 4, !tbaa !2
  %13 = load i32, i32* %2, align 4, !tbaa !2
  %14 = load i32, i32* %3, align 4, !tbaa !2
  %15 = load i32, i32* %4, align 4, !tbaa !2
  %16 = load i32, i32* %5, align 4, !tbaa !2
  call void @crackme(i32 %12, i32 %13, i32 %14, i32 %15, i32 %16)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %10) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %9) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %8) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %7) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %6) #5
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare dso_local i32 @__isoc99_scanf(i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #4

attributes #0 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Ubuntu clang version 10.0.1-++20200708122807+ef32c611aa2-1~exp1~20200707223407.61 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
