digraph "DFG for'crackme' function" {
	Node0x10dbbb0[shape=record, label="  %3 = mul i32 %1, -2"];
	Node0x10dbc50[shape=record, label="  %4 = add i32 %3, 2"];
	Node0x10dbd10[shape=record, label="  %5 = xor i32 %1, -1"];
	Node0x10dbd80[shape=record, label="  %6 = or i32 %5, %0"];
	Node0x10dbdf0[shape=record, label="  %7 = and i32 %1, %0"];
	Node0x10dbe90[shape=record, label="  %8 = shl i32 %7, 1"];
	Node0x10dbf00[shape=record, label="  %9 = xor i32 %8, -2"];
	Node0x10dbf70[shape=record, label="  %10 = and i32 %5, %0"];
	Node0x10dbfe0[shape=record, label="  %11 = shl i32 %10, 1"];
	Node0x10dc050[shape=record, label="  %12 = xor i32 %11, -2"];
	Node0x10dc0c0[shape=record, label="  %13 = or i32 %1, %0"];
	Node0x10dc130[shape=record, label="  %14 = shl i32 %13, 1"];
	Node0x10dc1a0[shape=record, label="  %15 = xor i32 %14, -2"];
	Node0x10dc210[shape=record, label="  %16 = shl i32 %6, 2"];
	Node0x10dc2b0[shape=record, label="  %17 = xor i32 %16, -4"];
	Node0x10dc320[shape=record, label="  %18 = shl i32 %7, 2"];
	Node0x10dc390[shape=record, label="  %19 = sub i32 %5, %0"];
	Node0x10dc400[shape=record, label="  %20 = sub i32 %19, %6"];
	Node0x10dc470[shape=record, label="  %21 = add i32 %20, %10"];
	Node0x10dc4e0[shape=record, label="  %22 = sub i32 %21, %18"];
	Node0x10dc550[shape=record, label="  %23 = sub i32 %22, %9"];
	Node0x10dc5c0[shape=record, label="  %24 = add i32 %23, %12"];
	Node0x10dc630[shape=record, label="  %25 = sub i32 %24, %15"];
	Node0x10dc6a0[shape=record, label="  %26 = sub i32 %25, %17"];
	Node0x10dc710[shape=record, label="  %27 = icmp eq i32 %4, %26"];
	Node0x107c268[shape=record, label="  %28 = select i1 %27, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0x10dcbb0[shape=record, label="  %29 = tail call i32 @puts(i8* nonnull dereferenceable(1) %28)"];
	Node0x10dcc00[shape=record, label="  ret void"];
	Node0x10dbbb0 -> Node0x10dbc50;
	Node0x10dbc50 -> Node0x10dbd10;
	Node0x10dbd10 -> Node0x10dbd80;
	Node0x10dbd80 -> Node0x10dbdf0;
	Node0x10dbdf0 -> Node0x10dbe90;
	Node0x10dbe90 -> Node0x10dbf00;
	Node0x10dbf00 -> Node0x10dbf70;
	Node0x10dbf70 -> Node0x10dbfe0;
	Node0x10dbfe0 -> Node0x10dc050;
	Node0x10dc050 -> Node0x10dc0c0;
	Node0x10dc0c0 -> Node0x10dc130;
	Node0x10dc130 -> Node0x10dc1a0;
	Node0x10dc1a0 -> Node0x10dc210;
	Node0x10dc210 -> Node0x10dc2b0;
	Node0x10dc2b0 -> Node0x10dc320;
	Node0x10dc320 -> Node0x10dc390;
	Node0x10dc390 -> Node0x10dc400;
	Node0x10dc400 -> Node0x10dc470;
	Node0x10dc470 -> Node0x10dc4e0;
	Node0x10dc4e0 -> Node0x10dc550;
	Node0x10dc550 -> Node0x10dc5c0;
	Node0x10dc5c0 -> Node0x10dc630;
	Node0x10dc630 -> Node0x10dc6a0;
	Node0x10dc6a0 -> Node0x10dc710;
	Node0x10dc710 -> Node0x107c268;
	Node0x107c268 -> Node0x10dcbb0;
	Node0x10dcbb0 -> Node0x10dcc00;
edge [color=red]
	Node0x10dbbb0 -> Node0x10dbc50;
	Node0x10dbd10 -> Node0x10dbd80;
	Node0x10dbdf0 -> Node0x10dbe90;
	Node0x10dbe90 -> Node0x10dbf00;
	Node0x10dbd10 -> Node0x10dbf70;
	Node0x10dbf70 -> Node0x10dbfe0;
	Node0x10dbfe0 -> Node0x10dc050;
	Node0x10dc0c0 -> Node0x10dc130;
	Node0x10dc130 -> Node0x10dc1a0;
	Node0x10dbd80 -> Node0x10dc210;
	Node0x10dc210 -> Node0x10dc2b0;
	Node0x10dbdf0 -> Node0x10dc320;
	Node0x10dbd10 -> Node0x10dc390;
	Node0x10dc390 -> Node0x10dc400;
	Node0x10dbd80 -> Node0x10dc400;
	Node0x10dc400 -> Node0x10dc470;
	Node0x10dbf70 -> Node0x10dc470;
	Node0x10dc470 -> Node0x10dc4e0;
	Node0x10dc320 -> Node0x10dc4e0;
	Node0x10dc4e0 -> Node0x10dc550;
	Node0x10dbf00 -> Node0x10dc550;
	Node0x10dc550 -> Node0x10dc5c0;
	Node0x10dc050 -> Node0x10dc5c0;
	Node0x10dc5c0 -> Node0x10dc630;
	Node0x10dc1a0 -> Node0x10dc630;
	Node0x10dc630 -> Node0x10dc6a0;
	Node0x10dc2b0 -> Node0x10dc6a0;
	Node0x10dbc50 -> Node0x10dc710;
	Node0x10dc6a0 -> Node0x10dc710;
	Node0x10dc710 -> Node0x107c268;
	Node0x107c268 -> Node0x10dcbb0;
}
