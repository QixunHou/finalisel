; ModuleID = '../.././c_source_file/1015_opaque_predict_crackme.c'
source_filename = "../.././c_source_file/1015_opaque_predict_crackme.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str.2 = private unnamed_addr constant [15 x i8] c"%d %d %d %d %d\00", align 1
@str = private unnamed_addr constant [4 x i8] c"bad\00", align 1
@str.3 = private unnamed_addr constant [5 x i8] c"good\00", align 1

; Function Attrs: nofree nounwind uwtable
define dso_local void @crackme(i32 %0, i32 %1, i32 %2, i32 %3, i32 %4) local_unnamed_addr #0 {
  %6 = or i32 %4, %3
  %7 = mul i32 %6, -3
  %8 = xor i32 %1, -1
  %9 = and i32 %8, %0
  %10 = xor i32 %9, -1
  %11 = xor i32 %2, %1
  %12 = and i32 %11, %10
  %13 = and i32 %8, %2
  %14 = and i32 %13, %0
  %15 = xor i32 %11, %0
  %16 = xor i32 %14, -1
  %17 = xor i32 %15, %16
  %18 = sub i32 %17, %12
  %19 = add i32 %18, %7
  %20 = xor i32 %4, -1
  %21 = and i32 %20, %3
  %22 = xor i32 %21, -1
  %23 = add i32 %4, 1
  %24 = shl i32 %3, 1
  %25 = or i32 %20, %3
  %26 = shl i32 %6, 1
  %27 = xor i32 %26, -2
  %28 = add i32 %25, 1
  %29 = and i32 %4, %3
  %30 = or i32 %8, %2
  %31 = xor i32 %30, %0
  %32 = xor i32 %31, 1073741823
  %33 = xor i32 %32, %14
  %34 = shl i32 %33, 2
  %35 = xor i32 %0, -1
  %36 = and i32 %11, %35
  %37 = xor i32 %2, -1
  %38 = or i32 %8, %0
  %39 = xor i32 %38, -1
  %40 = or i32 %37, %39
  %41 = and i32 %37, %0
  %42 = xor i32 %41, -1
  %43 = xor i32 %1, %0
  %44 = xor i32 %43, -1
  %45 = and i32 %42, %44
  %46 = or i32 %14, %15
  %47 = and i32 %2, %1
  %48 = and i32 %47, %35
  %49 = or i32 %2, %1
  %50 = and i32 %49, %0
  %51 = xor i32 %50, 2147483647
  %52 = xor i32 %51, %48
  %53 = or i32 %37, %44
  %54 = xor i32 %11, -1
  %55 = xor i32 %54, %0
  %56 = or i32 %43, %37
  %57 = xor i32 %2, %0
  %58 = or i32 %57, %1
  %59 = shl i32 %58, 1
  %60 = and i32 %1, %0
  %61 = or i32 %37, %1
  %62 = xor i32 %61, %60
  %63 = or i32 %37, %0
  %64 = xor i32 %63, -1
  %65 = or i32 %43, %64
  %66 = shl i32 %65, 1
  %67 = or i32 %39, %2
  %68 = or i32 %1, %0
  %69 = and i32 %11, %38
  %70 = xor i32 %57, -1
  %71 = and i32 %38, %70
  %72 = or i32 %70, %8
  %73 = or i32 %44, %2
  %74 = or i32 %2, %0
  %75 = xor i32 %74, -1
  %76 = xor i32 %75, %1
  %77 = xor i32 %68, -1
  %78 = or i32 %11, %77
  %79 = xor i32 %47, %0
  %80 = shl i32 %79, 1
  %81 = or i32 %41, %43
  %82 = and i32 %2, %0
  %83 = xor i32 %82, %38
  %84 = xor i32 %68, %2
  %85 = or i32 %60, %70
  %86 = and i32 %49, %35
  %87 = and i32 %74, %8
  %88 = shl i32 %87, 1
  %89 = xor i32 %60, -1
  %90 = and i32 %11, %89
  %91 = and i32 %47, %0
  %92 = xor i32 %91, -1
  %93 = xor i32 %36, %92
  %94 = xor i32 %47, -1
  %95 = or i32 %94, %0
  %96 = and i32 %68, %54
  %97 = and i32 %37, %10
  %98 = or i32 %57, %8
  %99 = shl i32 %98, 1
  %100 = and i32 %94, %0
  %101 = or i32 %9, %2
  %102 = xor i32 %82, -1
  %103 = and i32 %102, %8
  %104 = and i32 %57, %8
  %105 = xor i32 %89, %2
  %106 = and i32 %37, %89
  %107 = shl i32 %106, 1
  %108 = add i32 %43, 1
  %109 = and i32 %54, %0
  %110 = and i32 %37, %1
  %111 = or i32 %110, %9
  %112 = and i32 %30, %35
  %113 = xor i32 %112, %16
  %114 = or i32 %14, %31
  %115 = xor i32 %110, -1
  %116 = and i32 %115, %35
  %117 = or i32 %57, %39
  %118 = shl i32 %117, 1
  %119 = or i32 %77, %2
  %120 = or i32 %60, %54
  %121 = or i32 %70, %39
  %122 = and i32 %102, %44
  %123 = and i32 %54, %35
  %124 = shl i32 %123, 1
  %125 = and i32 %70, %8
  %126 = add i32 %60, 1
  %127 = or i32 %57, %44
  %128 = xor i32 %42, %1
  %129 = add i32 %74, 1
  %130 = and i32 %43, %2
  %131 = xor i32 %49, -1
  %132 = or i32 %131, %35
  %133 = and i32 %38, %37
  %134 = and i32 %43, %102
  %135 = or i32 %75, %44
  %136 = or i32 %91, %36
  %137 = and i32 %94, %35
  %138 = or i32 %64, %8
  %139 = and i32 %70, %89
  %140 = shl i32 %139, 1
  %141 = and i32 %61, %35
  %142 = xor i32 %61, -1
  %143 = or i32 %41, %142
  %144 = shl i32 %143, 1
  %145 = or i32 %82, %39
  %146 = shl i32 %145, 1
  %147 = or i32 %9, %70
  %148 = shl i32 %147, 1
  %149 = shl i32 %94, 1
  %150 = and i32 %57, %10
  %151 = or i32 %131, %0
  %152 = and i32 %38, %54
  %153 = xor i32 %49, %0
  %154 = or i32 %57, %60
  %155 = and i32 %74, %43
  %156 = xor i32 %41, %61
  %157 = xor i32 %82, %49
  %158 = or i32 %70, %77
  %159 = or i32 %64, %44
  %160 = or i32 %60, %142
  %161 = and i32 %68, %37
  %162 = and i32 %57, %44
  %163 = or i32 %37, %77
  %164 = shl i32 %163, 1
  %165 = or i32 %60, %75
  %166 = or i32 %9, %37
  %167 = xor i32 %102, %1
  %168 = or i32 %75, %8
  %169 = and i32 %43, %37
  %170 = or i32 %60, %37
  %171 = xor i32 %41, %1
  %172 = and i32 %102, %1
  %173 = and i32 %63, %1
  %174 = xor i32 %173, -1
  %175 = or i32 %11, %60
  %176 = and i32 %13, %35
  %177 = and i32 %30, %0
  %178 = or i32 %176, %177
  %179 = and i32 %63, %44
  %180 = and i32 %43, %42
  %181 = or i32 %11, %39
  %182 = or i32 %54, %39
  %183 = or i32 %60, %2
  %184 = or i32 %43, %70
  %185 = or i32 %14, %112
  %186 = or i32 %91, %86
  %187 = and i32 %44, %2
  %188 = xor i32 %63, %1
  %189 = xor i32 %63, %60
  %190 = shl i32 %189, 1
  %191 = xor i32 %61, %0
  %192 = and i32 %37, %44
  %193 = or i32 %91, %153
  %194 = or i32 %60, %64
  %195 = and i32 %43, %70
  %196 = or i32 %82, %110
  %197 = add i32 %49, 1
  %198 = or i32 %82, %131
  %199 = or i32 %82, %43
  %200 = or i32 %41, %44
  %201 = and i32 %70, %1
  %202 = xor i32 %115, %0
  %203 = or i32 %43, %2
  %204 = or i32 %11, %35
  %205 = xor i32 %9, %115
  %206 = or i32 %49, %35
  %207 = or i32 %49, %0
  %208 = xor i32 %39, %2
  %209 = and i32 %63, %8
  %210 = or i32 %115, %35
  %211 = shl i32 %210, 1
  %212 = or i32 %48, %50
  %213 = or i32 %60, %131
  %214 = and i32 %68, %70
  %215 = or i32 %115, %0
  %216 = or i32 %142, %0
  %217 = xor i32 %41, %94
  %218 = xor i32 %9, %2
  %219 = xor i32 %10, %2
  %220 = xor i32 %142, %0
  %221 = xor i32 %74, %1
  %222 = xor i32 %86, %92
  %223 = shl i32 %39, 1
  %224 = or i32 %57, %9
  %225 = and i32 %54, %89
  %226 = xor i32 %94, %0
  %227 = shl i32 %226, 1
  %228 = xor i32 %91, %15
  %229 = or i32 %94, %35
  %230 = or i32 %110, %0
  %231 = or i32 %11, %9
  %232 = add i32 %1, 1
  %233 = xor i32 %82, %115
  %234 = xor i32 %110, %0
  %235 = xor i32 %153, 2147483647
  %236 = xor i32 %235, %91
  %237 = shl i32 %236, 1
  %238 = and i32 %57, %1
  %239 = xor i32 %204, -1
  %240 = or i32 %176, %239
  %241 = or i32 %41, %1
  %242 = and i32 %10, %2
  %243 = and i32 %70, %44
  %244 = or i32 %82, %1
  %245 = or i32 %11, %0
  %246 = xor i32 %38, %2
  %247 = and i32 %70, %10
  %248 = and i32 %42, %8
  %249 = or i32 %75, %1
  %250 = and i32 %57, %38
  %251 = or i32 %82, %77
  %252 = xor i32 %82, %68
  %253 = and i32 %89, %2
  %254 = or i32 %61, %0
  %255 = and i32 %11, %0
  %256 = xor i32 %255, -1
  %257 = xor i32 %48, %256
  %258 = or i32 %64, %1
  %259 = or i32 %61, %35
  %260 = shl i32 %259, 1
  %261 = and i32 %68, %2
  %262 = shl i32 %110, 1
  %263 = and i32 %74, %1
  %264 = xor i32 %74, %60
  %265 = or i32 %142, %35
  %266 = or i32 %47, %0
  %267 = or i32 %47, %9
  %268 = xor i32 %82, %1
  %269 = xor i32 %60, %2
  %270 = shl i32 %269, 1
  %271 = xor i32 %9, %94
  %272 = or i32 %9, %54
  %273 = xor i32 %14, %245
  %274 = and i32 %38, %2
  %275 = or i32 %110, %35
  %276 = or i32 %54, %0
  %277 = and i32 %131, %35
  %278 = mul i32 %277, -7
  %279 = and i32 %110, %35
  %280 = and i32 %131, %0
  %281 = mul i32 %280, 13
  %282 = and i32 %110, %0
  %283 = mul i32 %282, 21
  %284 = and i32 %142, %35
  %285 = shl i32 %284, 1
  %286 = mul i32 %48, -6
  %287 = and i32 %142, %0
  %288 = add i32 %279, %201
  %289 = add i32 %288, %199
  %290 = add i32 %289, %141
  %291 = shl i32 %290, 2
  %292 = add i32 %254, %274
  %293 = add i32 %292, %230
  %294 = sub i32 %21, %293
  %295 = mul i32 %294, 3
  %296 = sub i32 %108, %91
  %297 = add i32 %296, %221
  %298 = add i32 %297, %28
  %299 = mul i32 %298, 5
  %300 = add i32 %43, -1
  %301 = add i32 %300, %70
  %302 = add i32 %301, %56
  %303 = add i32 %302, %266
  %304 = add i32 %303, %248
  %305 = add i32 %304, %247
  %306 = add i32 %305, %215
  %307 = add i32 %306, %195
  %308 = add i32 %307, %188
  %309 = add i32 %308, %181
  %310 = add i32 %309, %159
  %311 = add i32 %310, %150
  %312 = add i32 %311, %135
  %313 = add i32 %312, %134
  %314 = add i32 %313, %125
  %315 = add i32 %314, %72
  %316 = add i32 %315, %71
  %317 = add i32 %316, %45
  %318 = add i32 %317, %4
  %319 = add i32 %318, %273
  %320 = add i32 %319, %52
  %321 = shl i32 %320, 1
  %322 = sub i32 1, %0
  %323 = add i32 %322, %35
  %324 = add i32 %323, %1
  %325 = add i32 %324, %232
  %326 = sub i32 %325, %68
  %327 = add i32 %326, %77
  %328 = add i32 %327, %126
  %329 = add i32 %328, %60
  %330 = add i32 %329, %10
  %331 = sub i32 %330, %9
  %332 = add i32 %331, %38
  %333 = sub i32 %332, %3
  %334 = add i32 %333, %40
  %335 = add i32 %334, %53
  %336 = add i32 %335, %67
  %337 = sub i32 %336, %73
  %338 = sub i32 %337, %84
  %339 = add i32 %338, %97
  %340 = add i32 %339, %101
  %341 = sub i32 %340, %105
  %342 = add i32 %341, %119
  %343 = sub i32 %342, %57
  %344 = sub i32 %343, %82
  %345 = add i32 %344, %129
  %346 = sub i32 %345, %130
  %347 = sub i32 %346, %133
  %348 = add i32 %347, %161
  %349 = add i32 %348, %41
  %350 = sub i32 %349, %166
  %351 = add i32 %350, %169
  %352 = add i32 %351, %170
  %353 = sub i32 %352, %183
  %354 = add i32 %353, %187
  %355 = add i32 %354, %192
  %356 = add i32 %355, %115
  %357 = add i32 %356, %197
  %358 = sub i32 %357, %203
  %359 = add i32 %358, %64
  %360 = add i32 %359, %208
  %361 = add i32 %360, %142
  %362 = sub i32 %361, %218
  %363 = add i32 %362, %219
  %364 = sub i32 %363, %223
  %365 = add i32 %364, %242
  %366 = sub i32 %365, %246
  %367 = add i32 %366, %253
  %368 = add i32 %367, %261
  %369 = sub i32 %368, %63
  %370 = add i32 %369, %47
  %371 = add i32 %370, %23
  %372 = sub i32 %371, %24
  %373 = sub i32 %372, %36
  %374 = sub i32 %373, %55
  %375 = sub i32 %374, %50
  %376 = add i32 %375, %62
  %377 = add i32 %376, %69
  %378 = add i32 %377, %76
  %379 = add i32 %378, %78
  %380 = add i32 %379, %81
  %381 = sub i32 %380, %83
  %382 = add i32 %381, %85
  %383 = add i32 %382, %86
  %384 = sub i32 %383, %90
  %385 = add i32 %384, %95
  %386 = sub i32 %385, %96
  %387 = add i32 %386, %100
  %388 = add i32 %387, %103
  %389 = add i32 %388, %104
  %390 = sub i32 %389, %107
  %391 = add i32 %390, %109
  %392 = sub i32 %391, %111
  %393 = add i32 %392, %116
  %394 = add i32 %393, %120
  %395 = sub i32 %394, %121
  %396 = add i32 %395, %122
  %397 = sub i32 %396, %127
  %398 = sub i32 %397, %128
  %399 = add i32 %398, %132
  %400 = sub i32 %399, %137
  %401 = add i32 %400, %138
  %402 = sub i32 %401, %149
  %403 = add i32 %402, %151
  %404 = sub i32 %403, %152
  %405 = sub i32 %404, %153
  %406 = add i32 %405, %154
  %407 = add i32 %406, %155
  %408 = sub i32 %407, %156
  %409 = add i32 %408, %157
  %410 = add i32 %409, %158
  %411 = sub i32 %410, %160
  %412 = add i32 %411, %162
  %413 = sub i32 %412, %164
  %414 = sub i32 %413, %165
  %415 = sub i32 %414, %167
  %416 = sub i32 %415, %15
  %417 = sub i32 %416, %168
  %418 = add i32 %417, %171
  %419 = add i32 %418, %172
  %420 = add i32 %419, %174
  %421 = sub i32 %420, %175
  %422 = add i32 %421, %179
  %423 = add i32 %422, %180
  %424 = sub i32 %423, %182
  %425 = add i32 %424, %184
  %426 = add i32 %425, %191
  %427 = sub i32 %426, %194
  %428 = add i32 %427, %196
  %429 = add i32 %428, %198
  %430 = add i32 %429, %200
  %431 = sub i32 %430, %202
  %432 = sub i32 %431, %204
  %433 = add i32 %432, %205
  %434 = sub i32 %433, %206
  %435 = sub i32 %434, %207
  %436 = add i32 %435, %209
  %437 = sub i32 %436, %213
  %438 = add i32 %437, %214
  %439 = sub i32 %438, %216
  %440 = add i32 %439, %217
  %441 = add i32 %440, %220
  %442 = sub i32 %441, %224
  %443 = add i32 %442, %225
  %444 = sub i32 %443, %229
  %445 = sub i32 %444, %231
  %446 = add i32 %445, %233
  %447 = sub i32 %446, %234
  %448 = sub i32 %447, %238
  %449 = sub i32 %448, %241
  %450 = add i32 %449, %243
  %451 = add i32 %450, %244
  %452 = add i32 %451, %245
  %453 = add i32 %452, %249
  %454 = add i32 %453, %250
  %455 = add i32 %454, %251
  %456 = sub i32 %455, %252
  %457 = sub i32 %456, %258
  %458 = sub i32 %457, %262
  %459 = add i32 %458, %263
  %460 = add i32 %459, %264
  %461 = sub i32 %460, %265
  %462 = add i32 %461, %267
  %463 = sub i32 %462, %268
  %464 = sub i32 %463, %270
  %465 = sub i32 %464, %271
  %466 = sub i32 %465, %272
  %467 = sub i32 %466, %275
  %468 = sub i32 %467, %255
  %469 = sub i32 %468, %276
  %470 = add i32 %469, %287
  %471 = add i32 %470, %22
  %472 = sub i32 %471, %25
  %473 = sub i32 %472, %29
  %474 = sub i32 %473, %46
  %475 = sub i32 %474, %59
  %476 = sub i32 %475, %66
  %477 = sub i32 %476, %80
  %478 = sub i32 %477, %88
  %479 = sub i32 %478, %93
  %480 = sub i32 %479, %99
  %481 = sub i32 %480, %113
  %482 = add i32 %481, %114
  %483 = sub i32 %482, %118
  %484 = sub i32 %483, %124
  %485 = sub i32 %484, %136
  %486 = sub i32 %485, %140
  %487 = sub i32 %486, %144
  %488 = sub i32 %487, %146
  %489 = sub i32 %488, %148
  %490 = add i32 %489, %178
  %491 = add i32 %490, %185
  %492 = sub i32 %491, %186
  %493 = sub i32 %492, %190
  %494 = sub i32 %493, %193
  %495 = sub i32 %494, %211
  %496 = sub i32 %495, %212
  %497 = sub i32 %496, %222
  %498 = sub i32 %497, %227
  %499 = sub i32 %498, %228
  %500 = add i32 %499, %240
  %501 = add i32 %500, %257
  %502 = sub i32 %501, %260
  %503 = add i32 %502, %278
  %504 = add i32 %503, %281
  %505 = add i32 %504, %283
  %506 = sub i32 %505, %285
  %507 = add i32 %506, %286
  %508 = add i32 %507, %27
  %509 = sub i32 %508, %34
  %510 = sub i32 %509, %237
  %511 = add i32 %510, %291
  %512 = add i32 %511, %295
  %513 = add i32 %512, %299
  %514 = add i32 %513, %321
  %515 = icmp eq i32 %19, %514
  %516 = select i1 %515, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)
  %517 = tail call i32 @puts(i8* nonnull dereferenceable(1) %516)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #1 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %6) #5
  %7 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %7) #5
  %8 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %8) #5
  %9 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %9) #5
  %10 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %10) #5
  %11 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3, i32* nonnull %4, i32* nonnull %5)
  %12 = load i32, i32* %1, align 4, !tbaa !2
  %13 = load i32, i32* %2, align 4, !tbaa !2
  %14 = load i32, i32* %3, align 4, !tbaa !2
  %15 = load i32, i32* %4, align 4, !tbaa !2
  %16 = load i32, i32* %5, align 4, !tbaa !2
  call void @crackme(i32 %12, i32 %13, i32 %14, i32 %15, i32 %16)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %10) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %9) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %8) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %7) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %6) #5
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare dso_local i32 @__isoc99_scanf(i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #4

attributes #0 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Ubuntu clang version 10.0.1-++20200708122807+ef32c611aa2-1~exp1~20200707223407.61 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
