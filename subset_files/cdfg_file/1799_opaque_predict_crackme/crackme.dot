digraph "DFG for'crackme' function" {
	Node0x5840c0[shape=record, label="  %5 = xor i32 %2, -1"];
	Node0x584130[shape=record, label="  %6 = and i32 %5, %1"];
	Node0x5841a0[shape=record, label="  %7 = xor i32 %6, -1"];
	Node0x584210[shape=record, label="  %8 = or i32 %5, %1"];
	Node0x584280[shape=record, label="  %9 = sub i32 %7, %8"];
	Node0x584320[shape=record, label="  %10 = shl i32 %3, 1"];
	Node0x584390[shape=record, label="  %11 = add i32 %9, %10"];
	Node0x584400[shape=record, label="  %12 = shl i32 %8, 1"];
	Node0x5844a0[shape=record, label="  %13 = xor i32 %12, -2"];
	Node0x584510[shape=record, label="  %14 = and i32 %2, %1"];
	Node0x584580[shape=record, label="  %15 = xor i32 %0, -1"];
	Node0x5845f0[shape=record, label="  %16 = and i32 %15, %3"];
	Node0x584660[shape=record, label="  %17 = xor i32 %15, %3"];
	Node0x5846d0[shape=record, label="  %18 = or i32 %3, %0"];
	Node0x584740[shape=record, label="  %19 = or i32 %15, %3"];
	Node0x5847b0[shape=record, label="  %20 = and i32 %3, %0"];
	Node0x584820[shape=record, label="  %21 = xor i32 %20, -1"];
	Node0x584890[shape=record, label="  %22 = xor i32 %18, -1"];
	Node0x584930[shape=record, label="  %23 = shl i32 %19, 2"];
	Node0x5849d0[shape=record, label="  %24 = xor i32 %23, -4"];
	Node0x584a70[shape=record, label="  %25 = mul i32 %20, 11"];
	Node0x584ae0[shape=record, label="  %26 = sub i32 %22, %17"];
	Node0x584b80[shape=record, label="  %27 = mul i32 %26, 5"];
	Node0x584bf0[shape=record, label="  %28 = sub i32 %16, %0"];
	Node0x584c60[shape=record, label="  %29 = shl i32 %28, 1"];
	Node0x584cd0[shape=record, label="  %30 = sub i32 2, %2"];
	Node0x584d40[shape=record, label="  %31 = sub i32 %30, %6"];
	Node0x584db0[shape=record, label="  %32 = add i32 %31, %14"];
	Node0x585030[shape=record, label="  %33 = add i32 %32, %16"];
	Node0x5850a0[shape=record, label="  %34 = sub i32 %33, %18"];
	Node0x585110[shape=record, label="  %35 = add i32 %34, %19"];
	Node0x585180[shape=record, label="  %36 = add i32 %35, %21"];
	Node0x5851f0[shape=record, label="  %37 = add i32 %36, %13"];
	Node0x585260[shape=record, label="  %38 = add i32 %37, %25"];
	Node0x5852d0[shape=record, label="  %39 = add i32 %38, %24"];
	Node0x585340[shape=record, label="  %40 = add i32 %39, %27"];
	Node0x5853b0[shape=record, label="  %41 = add i32 %40, %29"];
	Node0x585420[shape=record, label="  %42 = icmp eq i32 %11, %41"];
	Node0x524268[shape=record, label="  %43 = select i1 %42, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0x5858c0[shape=record, label="  %44 = tail call i32 @puts(i8* nonnull dereferenceable(1) %43)"];
	Node0x585910[shape=record, label="  ret void"];
	Node0x5840c0 -> Node0x584130;
	Node0x584130 -> Node0x5841a0;
	Node0x5841a0 -> Node0x584210;
	Node0x584210 -> Node0x584280;
	Node0x584280 -> Node0x584320;
	Node0x584320 -> Node0x584390;
	Node0x584390 -> Node0x584400;
	Node0x584400 -> Node0x5844a0;
	Node0x5844a0 -> Node0x584510;
	Node0x584510 -> Node0x584580;
	Node0x584580 -> Node0x5845f0;
	Node0x5845f0 -> Node0x584660;
	Node0x584660 -> Node0x5846d0;
	Node0x5846d0 -> Node0x584740;
	Node0x584740 -> Node0x5847b0;
	Node0x5847b0 -> Node0x584820;
	Node0x584820 -> Node0x584890;
	Node0x584890 -> Node0x584930;
	Node0x584930 -> Node0x5849d0;
	Node0x5849d0 -> Node0x584a70;
	Node0x584a70 -> Node0x584ae0;
	Node0x584ae0 -> Node0x584b80;
	Node0x584b80 -> Node0x584bf0;
	Node0x584bf0 -> Node0x584c60;
	Node0x584c60 -> Node0x584cd0;
	Node0x584cd0 -> Node0x584d40;
	Node0x584d40 -> Node0x584db0;
	Node0x584db0 -> Node0x585030;
	Node0x585030 -> Node0x5850a0;
	Node0x5850a0 -> Node0x585110;
	Node0x585110 -> Node0x585180;
	Node0x585180 -> Node0x5851f0;
	Node0x5851f0 -> Node0x585260;
	Node0x585260 -> Node0x5852d0;
	Node0x5852d0 -> Node0x585340;
	Node0x585340 -> Node0x5853b0;
	Node0x5853b0 -> Node0x585420;
	Node0x585420 -> Node0x524268;
	Node0x524268 -> Node0x5858c0;
	Node0x5858c0 -> Node0x585910;
edge [color=red]
	Node0x5840c0 -> Node0x584130;
	Node0x584130 -> Node0x5841a0;
	Node0x5840c0 -> Node0x584210;
	Node0x5841a0 -> Node0x584280;
	Node0x584210 -> Node0x584280;
	Node0x584280 -> Node0x584390;
	Node0x584320 -> Node0x584390;
	Node0x584210 -> Node0x584400;
	Node0x584400 -> Node0x5844a0;
	Node0x584580 -> Node0x5845f0;
	Node0x584580 -> Node0x584660;
	Node0x584580 -> Node0x584740;
	Node0x5847b0 -> Node0x584820;
	Node0x5846d0 -> Node0x584890;
	Node0x584740 -> Node0x584930;
	Node0x584930 -> Node0x5849d0;
	Node0x5847b0 -> Node0x584a70;
	Node0x584890 -> Node0x584ae0;
	Node0x584660 -> Node0x584ae0;
	Node0x584ae0 -> Node0x584b80;
	Node0x5845f0 -> Node0x584bf0;
	Node0x584bf0 -> Node0x584c60;
	Node0x584cd0 -> Node0x584d40;
	Node0x584130 -> Node0x584d40;
	Node0x584d40 -> Node0x584db0;
	Node0x584510 -> Node0x584db0;
	Node0x584db0 -> Node0x585030;
	Node0x5845f0 -> Node0x585030;
	Node0x585030 -> Node0x5850a0;
	Node0x5846d0 -> Node0x5850a0;
	Node0x5850a0 -> Node0x585110;
	Node0x584740 -> Node0x585110;
	Node0x585110 -> Node0x585180;
	Node0x584820 -> Node0x585180;
	Node0x585180 -> Node0x5851f0;
	Node0x5844a0 -> Node0x5851f0;
	Node0x5851f0 -> Node0x585260;
	Node0x584a70 -> Node0x585260;
	Node0x585260 -> Node0x5852d0;
	Node0x5849d0 -> Node0x5852d0;
	Node0x5852d0 -> Node0x585340;
	Node0x584b80 -> Node0x585340;
	Node0x585340 -> Node0x5853b0;
	Node0x584c60 -> Node0x5853b0;
	Node0x584390 -> Node0x585420;
	Node0x5853b0 -> Node0x585420;
	Node0x585420 -> Node0x524268;
	Node0x524268 -> Node0x5858c0;
}
