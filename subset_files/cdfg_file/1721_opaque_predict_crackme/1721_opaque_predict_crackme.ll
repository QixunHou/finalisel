; ModuleID = '../.././c_source_file/1721_opaque_predict_crackme.c'
source_filename = "../.././c_source_file/1721_opaque_predict_crackme.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str.2 = private unnamed_addr constant [9 x i8] c"%d %d %d\00", align 1
@str = private unnamed_addr constant [4 x i8] c"bad\00", align 1
@str.3 = private unnamed_addr constant [5 x i8] c"good\00", align 1

; Function Attrs: nofree nounwind uwtable
define dso_local void @crackme(i32 %0, i32 %1, i32 %2) local_unnamed_addr #0 {
  %4 = xor i32 %0, -1
  %5 = xor i32 %2, -1
  %6 = and i32 %5, %1
  %7 = xor i32 %6, -1
  %8 = or i32 %7, %4
  %9 = xor i32 %7, %0
  %10 = add i32 %8, %9
  %11 = sub i32 0, %10
  %12 = or i32 %5, %0
  %13 = xor i32 %12, -1
  %14 = xor i32 %1, %0
  %15 = xor i32 %14, -1
  %16 = or i32 %13, %15
  %17 = or i32 %14, %5
  %18 = xor i32 %1, -1
  %19 = or i32 %18, %0
  %20 = xor i32 %2, %0
  %21 = xor i32 %20, -1
  %22 = and i32 %19, %21
  %23 = or i32 %1, %0
  %24 = xor i32 %23, -1
  %25 = xor i32 %2, %1
  %26 = xor i32 %25, -1
  %27 = or i32 %26, %24
  %28 = add i32 %25, 1
  %29 = and i32 %2, %0
  %30 = xor i32 %29, %19
  %31 = and i32 %2, %1
  %32 = and i32 %31, %0
  %33 = or i32 %2, %1
  %34 = xor i32 %33, -1
  %35 = or i32 %34, %0
  %36 = xor i32 %32, %35
  %37 = xor i32 %29, %1
  %38 = xor i32 %29, %33
  %39 = add i32 %12, 1
  %40 = and i32 %18, %2
  %41 = and i32 %40, %4
  %42 = or i32 %25, %4
  %43 = xor i32 %42, -1
  %44 = or i32 %41, %43
  %45 = xor i32 %29, -1
  %46 = and i32 %45, %15
  %47 = xor i32 %41, %42
  %48 = and i32 %7, %0
  %49 = shl i32 %48, 1
  %50 = and i32 %1, %0
  %51 = or i32 %50, %26
  %52 = xor i32 %25, %0
  %53 = xor i32 %32, %52
  %54 = shl i32 %34, 1
  %55 = and i32 %33, %0
  %56 = and i32 %5, %0
  %57 = xor i32 %56, -1
  %58 = and i32 %14, %57
  %59 = shl i32 %58, 1
  %60 = or i32 %7, %0
  %61 = and i32 %23, %2
  %62 = xor i32 %45, %1
  %63 = or i32 %50, %13
  %64 = or i32 %2, %0
  %65 = xor i32 %64, %1
  %66 = xor i32 %64, %50
  %67 = and i32 %18, %0
  %68 = or i32 %31, %4
  %69 = shl i32 %68, 1
  %70 = xor i32 %19, -1
  %71 = or i32 %25, %70
  %72 = shl i32 %71, 1
  %73 = and i32 %19, %2
  %74 = shl i32 %2, 1
  %75 = or i32 %25, %0
  %76 = or i32 %50, %21
  %77 = xor i32 %12, %1
  %78 = xor i32 %50, -1
  %79 = and i32 %78, %2
  %80 = and i32 %31, %4
  %81 = or i32 %80, %55
  %82 = or i32 %21, %70
  %83 = xor i32 %67, -1
  %84 = xor i32 %83, %2
  %85 = or i32 %5, %70
  %86 = shl i32 %85, 1
  %87 = and i32 %15, %2
  %88 = add i32 %56, 1
  %89 = xor i32 %33, %0
  %90 = shl i32 %89, 1
  %91 = add i32 %19, 1
  %92 = or i32 %33, %0
  %93 = xor i32 %67, %2
  %94 = or i32 %6, %4
  %95 = and i32 %14, %5
  %96 = and i32 %5, %83
  %97 = or i32 %5, %1
  %98 = xor i32 %97, -1
  %99 = or i32 %98, %0
  %100 = or i32 %50, %98
  %101 = xor i32 %64, -1
  %102 = xor i32 %101, %1
  %103 = or i32 %29, %15
  %104 = or i32 %101, %15
  %105 = xor i32 %31, -1
  %106 = and i32 %105, %4
  %107 = or i32 %21, %15
  %108 = shl i32 %107, 1
  %109 = and i32 %23, %21
  %110 = or i32 %20, %67
  %111 = or i32 %20, %1
  %112 = shl i32 %1, 2
  %113 = and i32 %12, %18
  %114 = or i32 %97, %0
  %115 = or i32 %14, %2
  %116 = or i32 %67, %21
  %117 = xor i32 %50, %2
  %118 = or i32 %21, %24
  %119 = shl i32 %118, 1
  %120 = or i32 %56, %18
  %121 = xor i32 %56, %1
  %122 = and i32 %20, %14
  %123 = or i32 %67, %5
  %124 = or i32 %26, %70
  %125 = or i32 %56, %1
  %126 = and i32 %64, %14
  %127 = or i32 %31, %0
  %128 = or i32 %5, %15
  %129 = or i32 %56, %14
  %130 = xor i32 %19, %2
  %131 = and i32 %26, %0
  %132 = shl i32 %131, 1
  %133 = and i32 %23, %26
  %134 = add i32 %97, 1
  %135 = and i32 %40, %0
  %136 = or i32 %6, %0
  %137 = xor i32 %135, %136
  %138 = and i32 %25, %4
  %139 = xor i32 %138, -1
  %140 = xor i32 %32, %139
  %141 = xor i32 %70, %2
  %142 = shl i32 %141, 1
  %143 = or i32 %97, %4
  %144 = or i32 %70, %2
  %145 = and i32 %20, %1
  %146 = and i32 %25, %0
  %147 = and i32 %25, %78
  %148 = or i32 %26, %4
  %149 = and i32 %19, %26
  %150 = and i32 %21, %18
  %151 = add i32 %29, 1
  %152 = or i32 %105, %4
  %153 = and i32 %21, %83
  %154 = and i32 %5, %15
  %155 = xor i32 %146, -1
  %156 = xor i32 %80, %155
  %157 = and i32 %64, %15
  %158 = xor i32 %52, -1
  %159 = xor i32 %135, %158
  %160 = xor i32 %78, %2
  %161 = or i32 %6, %67
  %162 = or i32 %56, %31
  %163 = and i32 %20, %78
  %164 = and i32 %26, %4
  %165 = or i32 %29, %1
  %166 = and i32 %25, %23
  %167 = or i32 %56, %98
  %168 = or i32 %21, %1
  %169 = shl i32 %168, 1
  %170 = and i32 %14, %21
  %171 = or i32 %32, %138
  %172 = or i32 %67, %2
  %173 = shl i32 %172, 1
  %174 = and i32 %105, %0
  %175 = and i32 %57, %1
  %176 = and i32 %20, %19
  %177 = shl i32 %176, 1
  %178 = or i32 %13, %1
  %179 = and i32 %34, %4
  %180 = mul i32 %179, 9
  %181 = and i32 %6, %4
  %182 = and i32 %34, %0
  %183 = and i32 %6, %0
  %184 = shl i32 %183, 2
  %185 = and i32 %98, %4
  %186 = mul i32 %185, 6
  %187 = and i32 %98, %0
  %188 = mul i32 %187, 12
  %189 = add i32 %167, %105
  %190 = add i32 %189, %80
  %191 = add i32 %190, %164
  %192 = add i32 %191, %162
  %193 = add i32 %192, %124
  %194 = add i32 %193, %110
  %195 = add i32 %194, %106
  %196 = add i32 %195, %63
  %197 = add i32 %196, %51
  %198 = add i32 %197, %46
  %199 = shl i32 %198, 1
  %200 = sub i32 %95, %128
  %201 = sub i32 %200, %93
  %202 = add i32 %201, %178
  %203 = add i32 %202, %65
  %204 = sub i32 %203, %47
  %205 = mul i32 %204, 5
  %206 = sub i32 %182, %122
  %207 = add i32 %206, %100
  %208 = mul i32 %207, 3
  %209 = or i32 %32, %181
  %210 = mul i32 %209, 7
  %211 = add i32 %23, %67
  %212 = sub i32 %91, %211
  %213 = add i32 %212, %112
  %214 = sub i32 %213, %23
  %215 = add i32 %214, %5
  %216 = add i32 %215, %50
  %217 = add i32 %216, %17
  %218 = add i32 %217, %28
  %219 = add i32 %218, %39
  %220 = sub i32 %219, %6
  %221 = sub i32 %220, %61
  %222 = add i32 %221, %73
  %223 = sub i32 %222, %74
  %224 = sub i32 %223, %79
  %225 = sub i32 %224, %84
  %226 = add i32 %225, %87
  %227 = add i32 %226, %88
  %228 = sub i32 %227, %96
  %229 = add i32 %228, %97
  %230 = sub i32 %229, %115
  %231 = add i32 %230, %7
  %232 = sub i32 %231, %117
  %233 = sub i32 %232, %123
  %234 = add i32 %233, %130
  %235 = add i32 %234, %29
  %236 = add i32 %235, %134
  %237 = add i32 %236, %144
  %238 = add i32 %237, %151
  %239 = sub i32 %238, %154
  %240 = sub i32 %239, %160
  %241 = add i32 %240, %20
  %242 = sub i32 %241, %16
  %243 = sub i32 %242, %22
  %244 = add i32 %243, %27
  %245 = sub i32 %244, %30
  %246 = sub i32 %245, %37
  %247 = add i32 %246, %38
  %248 = sub i32 %247, %54
  %249 = add i32 %248, %55
  %250 = add i32 %249, %60
  %251 = sub i32 %250, %62
  %252 = add i32 %251, %66
  %253 = sub i32 %252, %75
  %254 = sub i32 %253, %76
  %255 = add i32 %254, %77
  %256 = add i32 %255, %82
  %257 = sub i32 %256, %86
  %258 = sub i32 %257, %92
  %259 = sub i32 %258, %94
  %260 = sub i32 %259, %99
  %261 = add i32 %260, %102
  %262 = add i32 %261, %103
  %263 = sub i32 %262, %104
  %264 = sub i32 %263, %109
  %265 = sub i32 %264, %111
  %266 = add i32 %265, %113
  %267 = add i32 %266, %114
  %268 = sub i32 %267, %116
  %269 = sub i32 %268, %35
  %270 = sub i32 %269, %120
  %271 = add i32 %270, %121
  %272 = add i32 %271, %125
  %273 = sub i32 %272, %126
  %274 = sub i32 %273, %127
  %275 = add i32 %274, %129
  %276 = add i32 %275, %133
  %277 = sub i32 %276, %142
  %278 = sub i32 %277, %143
  %279 = add i32 %278, %145
  %280 = add i32 %279, %146
  %281 = sub i32 %280, %147
  %282 = add i32 %281, %148
  %283 = add i32 %282, %149
  %284 = add i32 %283, %150
  %285 = add i32 %284, %152
  %286 = sub i32 %285, %153
  %287 = sub i32 %286, %157
  %288 = sub i32 %287, %161
  %289 = add i32 %288, %163
  %290 = add i32 %289, %165
  %291 = add i32 %290, %166
  %292 = add i32 %291, %170
  %293 = add i32 %292, %136
  %294 = sub i32 %293, %173
  %295 = sub i32 %294, %174
  %296 = sub i32 %295, %175
  %297 = add i32 %296, %36
  %298 = sub i32 %297, %44
  %299 = sub i32 %298, %49
  %300 = add i32 %299, %53
  %301 = sub i32 %300, %59
  %302 = sub i32 %301, %69
  %303 = sub i32 %302, %72
  %304 = add i32 %303, %81
  %305 = sub i32 %304, %90
  %306 = sub i32 %305, %108
  %307 = sub i32 %306, %119
  %308 = sub i32 %307, %132
  %309 = add i32 %308, %137
  %310 = sub i32 %309, %140
  %311 = add i32 %310, %156
  %312 = add i32 %311, %159
  %313 = sub i32 %312, %169
  %314 = add i32 %313, %171
  %315 = sub i32 %314, %177
  %316 = add i32 %315, %180
  %317 = sub i32 %316, %184
  %318 = add i32 %317, %186
  %319 = add i32 %318, %188
  %320 = add i32 %319, %210
  %321 = add i32 %320, %208
  %322 = add i32 %321, %205
  %323 = add i32 %322, %199
  %324 = icmp eq i32 %323, %11
  %325 = select i1 %324, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)
  %326 = tail call i32 @puts(i8* nonnull dereferenceable(1) %325)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #1 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %4) #5
  %5 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %5) #5
  %6 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %6) #5
  %7 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3)
  %8 = load i32, i32* %1, align 4, !tbaa !2
  %9 = load i32, i32* %2, align 4, !tbaa !2
  %10 = load i32, i32* %3, align 4, !tbaa !2
  call void @crackme(i32 %8, i32 %9, i32 %10)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %6) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %5) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %4) #5
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare dso_local i32 @__isoc99_scanf(i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #4

attributes #0 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Ubuntu clang version 10.0.1-++20200708122807+ef32c611aa2-1~exp1~20200707223407.61 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
