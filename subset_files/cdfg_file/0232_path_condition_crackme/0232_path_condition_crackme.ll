; ModuleID = '../.././c_source_file/0232_path_condition_crackme.c'
source_filename = "../.././c_source_file/0232_path_condition_crackme.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str.2 = private unnamed_addr constant [9 x i8] c"%d %d %d\00", align 1
@str = private unnamed_addr constant [4 x i8] c"bad\00", align 1
@str.3 = private unnamed_addr constant [5 x i8] c"good\00", align 1

; Function Attrs: nofree nounwind uwtable
define dso_local void @crackme(i32 %0, i32 %1, i32 %2) local_unnamed_addr #0 {
  %4 = and i32 %2, %1
  %5 = xor i32 %1, -1
  %6 = xor i32 %2, -1
  %7 = or i32 %6, %0
  %8 = and i32 %7, %5
  %9 = or i32 %6, %1
  %10 = xor i32 %9, -1
  %11 = xor i32 %10, %0
  %12 = and i32 %5, %2
  %13 = and i32 %12, %0
  %14 = xor i32 %2, %1
  %15 = xor i32 %14, %0
  %16 = or i32 %13, %15
  %17 = and i32 %2, %0
  %18 = and i32 %6, %1
  %19 = or i32 %17, %18
  %20 = and i32 %6, %0
  %21 = xor i32 %20, -1
  %22 = xor i32 %1, %0
  %23 = xor i32 %22, -1
  %24 = and i32 %21, %23
  %25 = xor i32 %0, -1
  %26 = or i32 %18, %25
  %27 = shl i32 %26, 1
  %28 = or i32 %1, %0
  %29 = xor i32 %28, -1
  %30 = xor i32 %29, %2
  %31 = xor i32 %7, -1
  %32 = or i32 %22, %31
  %33 = and i32 %5, %0
  %34 = xor i32 %33, -1
  %35 = xor i32 %2, %0
  %36 = xor i32 %35, -1
  %37 = and i32 %36, %34
  %38 = xor i32 %18, -1
  %39 = xor i32 %17, %38
  %40 = and i32 %6, %23
  %41 = or i32 %2, %0
  %42 = xor i32 %41, -1
  %43 = or i32 %18, %0
  %44 = or i32 %2, %1
  %45 = xor i32 %44, -1
  %46 = or i32 %45, %0
  %47 = and i32 %1, %0
  %48 = xor i32 %47, %2
  %49 = xor i32 %47, -1
  %50 = or i32 %22, %2
  %51 = shl i32 %50, 2
  %52 = or i32 %17, %5
  %53 = or i32 %5, %0
  %54 = and i32 %14, %53
  %55 = shl i32 %9, 1
  %56 = or i32 %14, %0
  %57 = and i32 %4, %0
  %58 = and i32 %14, %25
  %59 = or i32 %57, %58
  %60 = or i32 %6, %29
  %61 = and i32 %6, %49
  %62 = xor i32 %4, -1
  %63 = or i32 %62, %0
  %64 = xor i32 %14, -1
  %65 = and i32 %64, %49
  %66 = and i32 %53, %6
  %67 = or i32 %35, %47
  %68 = add i32 %7, 1
  %69 = and i32 %4, %25
  %70 = and i32 %44, %0
  %71 = xor i32 %70, 2147483647
  %72 = xor i32 %71, %69
  %73 = shl i32 %72, 1
  %74 = xor i32 %73, -1
  %75 = xor i32 %17, %53
  %76 = shl i32 %75, 1
  %77 = and i32 %28, %6
  %78 = and i32 %38, %25
  %79 = and i32 %36, %1
  %80 = or i32 %14, %25
  %81 = and i32 %41, %22
  %82 = xor i32 %17, %44
  %83 = and i32 %12, %25
  %84 = xor i32 %80, -1
  %85 = or i32 %83, %84
  %86 = and i32 %23, %2
  %87 = or i32 %64, %0
  %88 = xor i32 %33, %38
  %89 = or i32 %62, %25
  %90 = and i32 %35, %5
  %91 = and i32 %62, %0
  %92 = xor i32 %20, %62
  %93 = xor i32 %17, -1
  %94 = xor i32 %93, %1
  %95 = xor i32 %15, -1
  %96 = xor i32 %13, %95
  %97 = or i32 %14, %47
  %98 = or i32 %35, %1
  %99 = and i32 %35, %1
  %100 = and i32 %44, %25
  %101 = xor i32 %53, -1
  %102 = or i32 %47, %6
  %103 = shl i32 %102, 1
  %104 = xor i32 %18, %0
  %105 = or i32 %35, %29
  %106 = xor i32 %17, %28
  %107 = or i32 %33, %36
  %108 = xor i32 %44, %0
  %109 = shl i32 %108, 1
  %110 = and i32 %6, %34
  %111 = shl i32 %110, 1
  %112 = or i32 %35, %33
  %113 = or i32 %47, %42
  %114 = and i32 %22, %36
  %115 = or i32 %101, %2
  %116 = shl i32 %115, 2
  %117 = or i32 %22, %42
  %118 = or i32 %44, %25
  %119 = or i32 %45, %25
  %120 = or i32 %42, %1
  %121 = shl i32 %120, 1
  %122 = or i32 %20, %4
  %123 = and i32 %36, %5
  %124 = or i32 %33, %64
  %125 = shl i32 %124, 2
  %126 = and i32 %64, %34
  %127 = and i32 %41, %5
  %128 = xor i32 %83, %80
  %129 = and i32 %64, %0
  %130 = xor i32 %41, %47
  %131 = or i32 %36, %29
  %132 = or i32 %31, %23
  %133 = and i32 %35, %53
  %134 = or i32 %5, %2
  %135 = and i32 %134, %25
  %136 = or i32 %13, %135
  %137 = or i32 %36, %23
  %138 = or i32 %36, %1
  %139 = xor i32 %9, %0
  %140 = and i32 %28, %2
  %141 = or i32 %35, %5
  %142 = and i32 %36, %49
  %143 = and i32 %93, %23
  %144 = and i32 %21, %5
  %145 = xor i32 %13, %56
  %146 = or i32 %4, %0
  %147 = and i32 %9, %25
  %148 = xor i32 %7, %1
  %149 = shl i32 %148, 1
  %150 = or i32 %35, %101
  %151 = or i32 %17, %22
  %152 = shl i32 %151, 1
  %153 = and i32 %41, %1
  %154 = or i32 %47, %10
  %155 = or i32 %33, %2
  %156 = and i32 %22, %21
  %157 = or i32 %20, %10
  %158 = and i32 %14, %49
  %159 = or i32 %20, %1
  %160 = or i32 %4, %25
  %161 = xor i32 %38, %0
  %162 = or i32 %64, %25
  %163 = or i32 %57, %95
  %164 = or i32 %9, %25
  %165 = or i32 %47, %31
  %166 = shl i32 %70, 1
  %167 = and i32 %14, %28
  %168 = or i32 %14, %33
  %169 = or i32 %4, %33
  %170 = and i32 %21, %1
  %171 = or i32 %64, %29
  %172 = shl i32 %171, 1
  %173 = and i32 %22, %6
  %174 = xor i32 %41, %1
  %175 = or i32 %29, %2
  %176 = and i32 %14, %34
  %177 = shl i32 %23, 1
  %178 = and i32 %14, %0
  %179 = xor i32 %178, -1
  %180 = xor i32 %69, %179
  %181 = and i32 %134, %0
  %182 = xor i32 %181, 2147483647
  %183 = xor i32 %182, %83
  %184 = and i32 %36, %23
  %185 = or i32 %47, %36
  %186 = and i32 %41, %23
  %187 = xor i32 %64, %0
  %188 = or i32 %42, %5
  %189 = and i32 %53, %36
  %190 = xor i32 %34, %2
  %191 = or i32 %20, %5
  %192 = shl i32 %28, 1
  %193 = or i32 %31, %1
  %194 = and i32 %34, %2
  %195 = and i32 %35, %23
  %196 = or i32 %20, %23
  %197 = shl i32 %196, 1
  %198 = or i32 %47, %64
  %199 = xor i32 %57, %15
  %200 = shl i32 %64, 1
  %201 = or i32 %31, %5
  %202 = or i32 %17, %45
  %203 = or i32 %35, %23
  %204 = and i32 %7, %1
  %205 = and i32 %45, %25
  %206 = mul i32 %205, -9
  %207 = and i32 %18, %25
  %208 = mul i32 %207, 13
  %209 = and i32 %45, %0
  %210 = mul i32 %209, 11
  %211 = and i32 %18, %0
  %212 = and i32 %10, %25
  %213 = mul i32 %212, 20
  %214 = and i32 %10, %0
  %215 = add i32 %175, %101
  %216 = add i32 %215, %40
  %217 = add i32 %216, %202
  %218 = add i32 %217, %189
  %219 = add i32 %218, %156
  %220 = add i32 %219, %150
  %221 = add i32 %220, %138
  %222 = add i32 %221, %107
  %223 = add i32 %222, %90
  %224 = add i32 %223, %88
  %225 = add i32 %224, %87
  %226 = add i32 %225, %37
  %227 = add i32 %226, %163
  %228 = add i32 %227, %183
  %229 = shl i32 %228, 1
  %230 = sub i32 %57, %69
  %231 = sub i32 %230, %58
  %232 = sub i32 %231, %157
  %233 = add i32 %232, %112
  %234 = sub i32 %233, %145
  %235 = add i32 %234, %180
  %236 = mul i32 %235, 5
  %237 = sub i32 %169, %184
  %238 = sub i32 %237, %161
  %239 = sub i32 %238, %141
  %240 = mul i32 %239, 3
  %241 = sub i32 %211, %214
  %242 = mul i32 %241, 15
  %243 = add i32 %49, %5
  %244 = add i32 %243, %29
  %245 = add i32 %244, %22
  %246 = sub i32 %245, %30
  %247 = add i32 %246, %42
  %248 = sub i32 %247, %48
  %249 = sub i32 %248, %41
  %250 = sub i32 %249, %60
  %251 = sub i32 %250, %61
  %252 = add i32 %251, %66
  %253 = add i32 %252, %68
  %254 = add i32 %253, %21
  %255 = add i32 %254, %77
  %256 = add i32 %255, %86
  %257 = add i32 %256, %17
  %258 = sub i32 %257, %140
  %259 = add i32 %258, %155
  %260 = sub i32 %259, %20
  %261 = sub i32 %260, %18
  %262 = add i32 %261, %36
  %263 = sub i32 %262, %173
  %264 = sub i32 %263, %177
  %265 = sub i32 %264, %190
  %266 = sub i32 %265, %192
  %267 = sub i32 %266, %194
  %268 = add i32 %267, %62
  %269 = sub i32 %268, %11
  %270 = sub i32 %269, %8
  %271 = add i32 %270, %19
  %272 = sub i32 %271, %24
  %273 = add i32 %272, %32
  %274 = add i32 %273, %39
  %275 = sub i32 %274, %43
  %276 = add i32 %275, %46
  %277 = sub i32 %276, %51
  %278 = add i32 %277, %52
  %279 = add i32 %278, %54
  %280 = sub i32 %279, %55
  %281 = sub i32 %280, %56
  %282 = sub i32 %281, %63
  %283 = sub i32 %282, %65
  %284 = sub i32 %283, %67
  %285 = add i32 %284, %78
  %286 = add i32 %285, %79
  %287 = sub i32 %286, %80
  %288 = sub i32 %287, %81
  %289 = sub i32 %288, %82
  %290 = add i32 %289, %89
  %291 = add i32 %290, %91
  %292 = add i32 %291, %92
  %293 = sub i32 %292, %94
  %294 = sub i32 %293, %97
  %295 = add i32 %294, %98
  %296 = add i32 %295, %99
  %297 = add i32 %296, %100
  %298 = sub i32 %297, %103
  %299 = sub i32 %298, %104
  %300 = add i32 %299, %105
  %301 = add i32 %300, %106
  %302 = sub i32 %301, %111
  %303 = sub i32 %302, %113
  %304 = sub i32 %303, %114
  %305 = sub i32 %304, %116
  %306 = add i32 %305, %117
  %307 = sub i32 %306, %118
  %308 = sub i32 %307, %119
  %309 = sub i32 %308, %122
  %310 = add i32 %309, %123
  %311 = add i32 %310, %126
  %312 = add i32 %311, %127
  %313 = sub i32 %312, %129
  %314 = add i32 %313, %130
  %315 = sub i32 %314, %131
  %316 = add i32 %315, %132
  %317 = sub i32 %316, %133
  %318 = add i32 %317, %137
  %319 = sub i32 %318, %139
  %320 = add i32 %319, %142
  %321 = add i32 %320, %143
  %322 = add i32 %321, %144
  %323 = add i32 %322, %146
  %324 = sub i32 %323, %147
  %325 = add i32 %324, %153
  %326 = add i32 %325, %154
  %327 = add i32 %326, %158
  %328 = add i32 %327, %159
  %329 = add i32 %328, %160
  %330 = sub i32 %329, %162
  %331 = add i32 %330, %164
  %332 = sub i32 %331, %165
  %333 = add i32 %332, %167
  %334 = sub i32 %333, %168
  %335 = add i32 %334, %170
  %336 = add i32 %335, %174
  %337 = add i32 %336, %176
  %338 = add i32 %337, %185
  %339 = add i32 %338, %186
  %340 = sub i32 %339, %187
  %341 = sub i32 %340, %188
  %342 = sub i32 %341, %191
  %343 = sub i32 %342, %193
  %344 = sub i32 %343, %195
  %345 = add i32 %344, %198
  %346 = sub i32 %345, %200
  %347 = add i32 %346, %201
  %348 = add i32 %347, %203
  %349 = add i32 %348, %204
  %350 = sub i32 %349, %16
  %351 = sub i32 %350, %27
  %352 = sub i32 %351, %59
  %353 = sub i32 %352, %76
  %354 = sub i32 %353, %85
  %355 = sub i32 %354, %96
  %356 = sub i32 %355, %109
  %357 = sub i32 %356, %121
  %358 = add i32 %357, %125
  %359 = add i32 %358, %128
  %360 = add i32 %359, %136
  %361 = sub i32 %360, %149
  %362 = sub i32 %361, %152
  %363 = sub i32 %362, %166
  %364 = sub i32 %363, %172
  %365 = sub i32 %364, %197
  %366 = sub i32 %365, %199
  %367 = add i32 %366, %206
  %368 = add i32 %367, %208
  %369 = add i32 %368, %210
  %370 = add i32 %369, %213
  %371 = add i32 %370, %242
  %372 = add i32 %371, %74
  %373 = add i32 %372, %240
  %374 = add i32 %373, %236
  %375 = add i32 %374, %229
  %376 = icmp eq i32 %4, %375
  %377 = select i1 %376, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)
  %378 = tail call i32 @puts(i8* nonnull dereferenceable(1) %377)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #1 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %4) #5
  %5 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %5) #5
  %6 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %6) #5
  %7 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3)
  %8 = load i32, i32* %1, align 4, !tbaa !2
  %9 = load i32, i32* %2, align 4, !tbaa !2
  %10 = load i32, i32* %3, align 4, !tbaa !2
  call void @crackme(i32 %8, i32 %9, i32 %10)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %6) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %5) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %4) #5
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare dso_local i32 @__isoc99_scanf(i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #4

attributes #0 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Ubuntu clang version 10.0.1-++20200708122807+ef32c611aa2-1~exp1~20200707223407.61 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
