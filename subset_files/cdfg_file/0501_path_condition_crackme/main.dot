digraph "DFG for'main' function" {
	Node0x9b3018[shape=record, label="  %1 = alloca i32, align 4"];
	Node0x9b3098[shape=record, label="  %2 = alloca i32, align 4"];
	Node0x9b3128[shape=record, label="  %3 = alloca i32, align 4"];
	Node0x9b3188[shape=record, label="  %4 = bitcast i32* %1 to i8*"];
	Node0x9b3608[shape=record, label="  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %4) #5"];
	Node0x9b36e8[shape=record, label="  %5 = bitcast i32* %2 to i8*"];
	Node0x9b37e8[shape=record, label="  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %5) #5"];
	Node0x9b38a8[shape=record, label="  %6 = bitcast i32* %3 to i8*"];
	Node0x9b3958[shape=record, label="  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %6) #5"];
	Node0x9b3bb8[shape=record, label="  %7 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3)"];
	Node0x9b3c78[shape=record, label="  %8 = load i32, i32* %1, align 4, !tbaa !2"];
	Node0x9b4be8[shape=record, label="  %9 = load i32, i32* %2, align 4, !tbaa !2"];
	Node0x9b5258[shape=record, label="  %10 = load i32, i32* %3, align 4, !tbaa !2"];
	Node0x9b5350[shape=record, label="  call void @crackme(i32 %8, i32 %9, i32 %10)"];
	Node0x9b5558[shape=record, label="  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %6) #5"];
	Node0x9b56b8[shape=record, label="  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %5) #5"];
	Node0x9b57c8[shape=record, label="  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %4) #5"];
	Node0x9b5888[shape=record, label="  ret i32 0"];
	Node0x9b3018 -> Node0x9b3098;
	Node0x9b3098 -> Node0x9b3128;
	Node0x9b3128 -> Node0x9b3188;
	Node0x9b3188 -> Node0x9b3608;
	Node0x9b3608 -> Node0x9b36e8;
	Node0x9b36e8 -> Node0x9b37e8;
	Node0x9b37e8 -> Node0x9b38a8;
	Node0x9b38a8 -> Node0x9b3958;
	Node0x9b3958 -> Node0x9b3bb8;
	Node0x9b3bb8 -> Node0x9b3c78;
	Node0x9b3c78 -> Node0x9b4be8;
	Node0x9b4be8 -> Node0x9b5258;
	Node0x9b5258 -> Node0x9b5350;
	Node0x9b5350 -> Node0x9b5558;
	Node0x9b5558 -> Node0x9b56b8;
	Node0x9b56b8 -> Node0x9b57c8;
	Node0x9b57c8 -> Node0x9b5888;
edge [color=red]
	Node0x9b3018 -> Node0x9b3188;
	Node0x9b3188 -> Node0x9b3608;
	Node0x9b3098 -> Node0x9b36e8;
	Node0x9b36e8 -> Node0x9b37e8;
	Node0x9b3128 -> Node0x9b38a8;
	Node0x9b38a8 -> Node0x9b3958;
	Node0x9b3018 -> Node0x9b3bb8;
	Node0x9b3098 -> Node0x9b3bb8;
	Node0x9b3128 -> Node0x9b3bb8;
	Node0x9b3018 -> Node0x9b3c78;
	Node0x9b3098 -> Node0x9b4be8;
	Node0x9b3128 -> Node0x9b5258;
	Node0x9b3c78 -> Node0x9b5350;
	Node0x9b4be8 -> Node0x9b5350;
	Node0x9b5258 -> Node0x9b5350;
	Node0x9b38a8 -> Node0x9b5558;
	Node0x9b36e8 -> Node0x9b56b8;
	Node0x9b3188 -> Node0x9b57c8;
}
