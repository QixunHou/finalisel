; ModuleID = '../.././c_source_file/0575_path_condition_crackme.c'
source_filename = "../.././c_source_file/0575_path_condition_crackme.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str.2 = private unnamed_addr constant [9 x i8] c"%d %d %d\00", align 1
@str = private unnamed_addr constant [4 x i8] c"bad\00", align 1
@str.3 = private unnamed_addr constant [5 x i8] c"good\00", align 1

; Function Attrs: nofree nounwind uwtable
define dso_local void @crackme(i32 %0, i32 %1, i32 %2) local_unnamed_addr #0 {
  %4 = and i32 %1, %0
  %5 = xor i32 %4, -1
  %6 = xor i32 %5, %2
  %7 = xor i32 %2, -1
  %8 = and i32 %7, %1
  %9 = xor i32 %8, -1
  %10 = or i32 %9, %0
  %11 = sub i32 %10, %6
  %12 = xor i32 %2, %0
  %13 = xor i32 %12, -1
  %14 = or i32 %4, %13
  %15 = xor i32 %2, %1
  %16 = xor i32 %15, -1
  %17 = or i32 %4, %16
  %18 = and i32 %2, %1
  %19 = xor i32 %18, -1
  %20 = and i32 %19, %0
  %21 = shl i32 %20, 1
  %22 = and i32 %13, %5
  %23 = and i32 %2, %0
  %24 = xor i32 %1, -1
  %25 = or i32 %24, %0
  %26 = xor i32 %25, -1
  %27 = or i32 %23, %26
  %28 = or i32 %7, %1
  %29 = xor i32 %28, -1
  %30 = add i32 %28, 1
  %31 = xor i32 %18, %0
  %32 = or i32 %23, %1
  %33 = xor i32 %0, -1
  %34 = or i32 %16, %33
  %35 = or i32 %2, %0
  %36 = and i32 %35, %1
  %37 = shl i32 %36, 1
  %38 = or i32 %7, %0
  %39 = or i32 %2, %1
  %40 = and i32 %39, %33
  %41 = and i32 %18, %0
  %42 = and i32 %15, %33
  %43 = or i32 %41, %42
  %44 = or i32 %23, %8
  %45 = xor i32 %25, %2
  %46 = or i32 %19, %33
  %47 = xor i32 %1, %0
  %48 = xor i32 %47, -1
  %49 = and i32 %38, %48
  %50 = and i32 %15, %5
  %51 = xor i32 %39, %0
  %52 = xor i32 %51, 1073741823
  %53 = xor i32 %52, %41
  %54 = shl i32 %53, 2
  %55 = or i32 %47, %13
  %56 = shl i32 %55, 1
  %57 = or i32 %23, %48
  %58 = and i32 %7, %0
  %59 = shl i32 %58, 1
  %60 = or i32 %16, %26
  %61 = and i32 %7, %48
  %62 = xor i32 %38, %4
  %63 = and i32 %24, %2
  %64 = and i32 %63, %0
  %65 = xor i32 %15, %0
  %66 = xor i32 %65, -1
  %67 = xor i32 %64, %66
  %68 = or i32 %58, %48
  %69 = and i32 %25, %7
  %70 = xor i32 %58, %28
  %71 = and i32 %24, %0
  %72 = xor i32 %71, -1
  %73 = and i32 %7, %72
  %74 = and i32 %47, %7
  %75 = and i32 %16, %5
  %76 = shl i32 %75, 1
  %77 = or i32 %15, %0
  %78 = xor i32 %77, -1
  %79 = or i32 %64, %78
  %80 = xor i32 %71, %2
  %81 = xor i32 %38, %1
  %82 = or i32 %12, %4
  %83 = or i32 %1, %0
  %84 = xor i32 %83, -1
  %85 = or i32 %13, %84
  %86 = xor i32 %23, -1
  %87 = and i32 %86, %1
  %88 = or i32 %13, %1
  %89 = xor i32 %71, %9
  %90 = shl i32 %9, 1
  %91 = and i32 %63, %33
  %92 = or i32 %24, %2
  %93 = and i32 %92, %0
  %94 = xor i32 %93, -1
  %95 = xor i32 %91, %94
  %96 = and i32 %83, %16
  %97 = xor i32 %35, -1
  %98 = add i32 %35, 1
  %99 = or i32 %9, %33
  %100 = or i32 %41, %66
  %101 = and i32 %86, %48
  %102 = and i32 %15, %72
  %103 = and i32 %12, %24
  %104 = or i32 %7, %48
  %105 = xor i32 %39, -1
  %106 = or i32 %105, %33
  %107 = and i32 %35, %24
  %108 = or i32 %26, %2
  %109 = xor i32 %71, %19
  %110 = shl i32 %109, 1
  %111 = or i32 %23, %24
  %112 = or i32 %23, %84
  %113 = and i32 %16, %72
  %114 = xor i32 %58, -1
  %115 = and i32 %114, %48
  %116 = xor i32 %23, %83
  %117 = xor i32 %84, %2
  %118 = add i32 %58, 1
  %119 = xor i32 %38, -1
  %120 = or i32 %4, %119
  %121 = or i32 %41, %51
  %122 = and i32 %39, %0
  %123 = or i32 %23, %47
  %124 = or i32 %47, %97
  %125 = and i32 %15, %83
  %126 = and i32 %15, %0
  %127 = or i32 %71, %13
  %128 = xor i32 %23, %1
  %129 = or i32 %29, %0
  %130 = xor i32 %92, -1
  %131 = or i32 %130, %0
  %132 = xor i32 %64, %131
  %133 = and i32 %12, %25
  %134 = xor i32 %29, %0
  %135 = or i32 %84, %2
  %136 = and i32 %12, %48
  %137 = and i32 %38, %24
  %138 = or i32 %97, %48
  %139 = and i32 %12, %5
  %140 = or i32 %4, %7
  %141 = or i32 %97, %1
  %142 = or i32 %48, %2
  %143 = or i32 %119, %1
  %144 = add i32 %18, 1
  %145 = or i32 %23, %105
  %146 = shl i32 %145, 1
  %147 = or i32 %119, %48
  %148 = xor i32 %39, %4
  %149 = or i32 %119, %24
  %150 = or i32 %7, %26
  %151 = or i32 %91, %93
  %152 = or i32 %58, %47
  %153 = or i32 %13, %24
  %154 = or i32 %8, %0
  %155 = and i32 %19, %33
  %156 = xor i32 %9, %0
  %157 = and i32 %7, %5
  %158 = shl i32 %119, 1
  %159 = or i32 %15, %26
  %160 = or i32 %39, %33
  %161 = and i32 %86, %24
  %162 = and i32 %18, %33
  %163 = or i32 %162, %126
  %164 = or i32 %15, %33
  %165 = xor i32 %91, %164
  %166 = xor i32 %122, 2147483647
  %167 = xor i32 %166, %162
  %168 = and i32 %12, %72
  %169 = and i32 %47, %2
  %170 = shl i32 %169, 1
  %171 = and i32 %5, %2
  %172 = xor i32 %35, %1
  %173 = or i32 %105, %0
  %174 = or i32 %7, %84
  %175 = xor i32 %92, %0
  %176 = or i32 %64, %175
  %177 = add i32 %12, 1
  %178 = or i32 %16, %0
  %179 = and i32 %13, %1
  %180 = and i32 %12, %47
  %181 = or i32 %29, %33
  %182 = xor i32 %23, %9
  %183 = and i32 %13, %48
  %184 = shl i32 %183, 1
  %185 = and i32 %12, %83
  %186 = or i32 %13, %48
  %187 = xor i32 %97, %1
  %188 = or i32 %15, %71
  %189 = or i32 %39, %0
  %190 = or i32 %47, %7
  %191 = shl i32 %190, 1
  %192 = and i32 %13, %72
  %193 = or i32 %97, %24
  %194 = or i32 %4, %105
  %195 = shl i32 %194, 1
  %196 = and i32 %35, %47
  %197 = and i32 %47, %114
  %198 = or i32 %12, %26
  %199 = and i32 %16, %0
  %200 = xor i32 %58, %19
  %201 = shl i32 %200, 1
  %202 = or i32 %4, %97
  %203 = or i32 %12, %84
  %204 = xor i32 %86, %1
  %205 = or i32 %8, %71
  %206 = or i32 %18, %71
  %207 = and i32 %16, %33
  %208 = and i32 %83, %2
  %209 = xor i32 %40, -1
  %210 = xor i32 %41, %209
  %211 = xor i32 %23, %39
  %212 = xor i32 %28, %0
  %213 = shl i32 %212, 1
  %214 = or i32 %4, %29
  %215 = or i32 %58, %24
  %216 = xor i32 %83, %2
  %217 = and i32 %25, %16
  %218 = or i32 %47, %119
  %219 = xor i32 %4, %2
  %220 = or i32 %12, %48
  %221 = and i32 %38, %1
  %222 = add i32 %71, 1
  %223 = xor i32 %126, -1
  %224 = xor i32 %162, %223
  %225 = and i32 %12, %1
  %226 = or i32 %47, %2
  %227 = shl i32 %84, 1
  %228 = xor i32 %58, %1
  %229 = and i32 %72, %2
  %230 = or i32 %64, %65
  %231 = xor i32 %16, %0
  %232 = xor i32 %41, %65
  %233 = or i32 %71, %16
  %234 = shl i32 %233, 1
  %235 = or i32 %18, %0
  %236 = xor i32 %23, %25
  %237 = and i32 %28, %0
  %238 = or i32 %12, %47
  %239 = shl i32 %238, 1
  %240 = or i32 %12, %24
  %241 = or i32 %71, %7
  %242 = and i32 %35, %48
  %243 = and i32 %9, %0
  %244 = shl i32 %243, 1
  %245 = xor i32 %175, 2147483647
  %246 = xor i32 %245, %64
  %247 = and i32 %15, %25
  %248 = add i32 %39, 1
  %249 = shl i32 %15, 1
  %250 = and i32 %28, %33
  %251 = or i32 %41, %40
  %252 = and i32 %83, %7
  %253 = or i32 %19, %0
  %254 = and i32 %114, %1
  %255 = or i32 %71, %2
  %256 = or i32 %13, %26
  %257 = add i32 %47, 1
  %258 = and i32 %9, %33
  %259 = xor i32 %64, %77
  %260 = or i32 %58, %29
  %261 = and i32 %25, %13
  %262 = or i32 %15, %84
  %263 = xor i32 %26, %2
  %264 = mul i32 %263, 5
  %265 = xor i32 %264, -1
  %266 = and i32 %47, %13
  %267 = shl i32 %266, 1
  %268 = and i32 %105, %33
  %269 = mul i32 %268, 12
  %270 = and i32 %8, %33
  %271 = and i32 %105, %0
  %272 = mul i32 %271, -7
  %273 = and i32 %8, %0
  %274 = and i32 %29, %33
  %275 = mul i32 %274, -22
  %276 = mul i32 %162, 17
  %277 = and i32 %29, %0
  %278 = mul i32 %277, 29
  %279 = mul i32 %41, -19
  %280 = add i32 %24, %0
  %281 = add i32 %280, %5
  %282 = add i32 %281, %16
  %283 = add i32 %282, %28
  %284 = add i32 %283, %39
  %285 = add i32 %284, %135
  %286 = add i32 %285, %273
  %287 = add i32 %286, %261
  %288 = add i32 %287, %254
  %289 = add i32 %288, %188
  %290 = add i32 %289, %185
  %291 = add i32 %290, %156
  %292 = add i32 %291, %154
  %293 = add i32 %292, %147
  %294 = add i32 %293, %134
  %295 = add i32 %294, %111
  %296 = add i32 %295, %70
  %297 = add i32 %296, %44
  %298 = add i32 %297, %100
  %299 = add i32 %298, %167
  %300 = add i32 %299, %246
  %301 = shl i32 %300, 1
  %302 = sub i32 %161, %208
  %303 = sub i32 %302, %270
  %304 = sub i32 %303, %153
  %305 = sub i32 %304, %137
  %306 = sub i32 %305, %124
  %307 = mul i32 %306, 3
  %308 = sub i32 %33, %219
  %309 = add i32 %308, %68
  %310 = sub i32 %309, %79
  %311 = add i32 %310, %121
  %312 = mul i32 %311, 5
  %313 = add i32 %85, %62
  %314 = shl i32 %313, 2
  %315 = sub i32 %24, %47
  %316 = add i32 %315, %7
  %317 = add i32 %316, %4
  %318 = add i32 %317, %222
  %319 = add i32 %318, %257
  %320 = add i32 %319, %25
  %321 = add i32 %320, %71
  %322 = add i32 %321, %30
  %323 = sub i32 %322, %38
  %324 = sub i32 %323, %45
  %325 = sub i32 %324, %61
  %326 = sub i32 %325, %69
  %327 = sub i32 %326, %73
  %328 = add i32 %327, %74
  %329 = sub i32 %328, %80
  %330 = add i32 %329, %8
  %331 = add i32 %330, %98
  %332 = sub i32 %331, %104
  %333 = add i32 %332, %108
  %334 = add i32 %333, %117
  %335 = add i32 %334, %118
  %336 = add i32 %335, %140
  %337 = add i32 %336, %142
  %338 = add i32 %337, %144
  %339 = sub i32 %338, %150
  %340 = sub i32 %339, %157
  %341 = sub i32 %340, %171
  %342 = sub i32 %341, %174
  %343 = add i32 %342, %177
  %344 = add i32 %343, %216
  %345 = sub i32 %344, %18
  %346 = add i32 %345, %226
  %347 = sub i32 %346, %227
  %348 = add i32 %347, %229
  %349 = add i32 %348, %241
  %350 = add i32 %349, %248
  %351 = sub i32 %350, %252
  %352 = add i32 %351, %255
  %353 = add i32 %352, %17
  %354 = add i32 %353, %14
  %355 = add i32 %354, %22
  %356 = add i32 %355, %27
  %357 = sub i32 %356, %31
  %358 = sub i32 %357, %32
  %359 = sub i32 %358, %34
  %360 = add i32 %359, %40
  %361 = add i32 %360, %42
  %362 = add i32 %361, %46
  %363 = add i32 %362, %49
  %364 = add i32 %363, %50
  %365 = add i32 %364, %57
  %366 = sub i32 %365, %59
  %367 = add i32 %366, %60
  %368 = add i32 %367, %81
  %369 = sub i32 %368, %82
  %370 = sub i32 %369, %87
  %371 = sub i32 %370, %88
  %372 = sub i32 %371, %89
  %373 = sub i32 %372, %90
  %374 = add i32 %373, %96
  %375 = sub i32 %374, %99
  %376 = sub i32 %375, %101
  %377 = add i32 %376, %102
  %378 = add i32 %377, %103
  %379 = add i32 %378, %106
  %380 = sub i32 %379, %107
  %381 = add i32 %380, %112
  %382 = add i32 %381, %113
  %383 = add i32 %382, %115
  %384 = sub i32 %383, %116
  %385 = add i32 %384, %120
  %386 = add i32 %385, %65
  %387 = sub i32 %386, %122
  %388 = sub i32 %387, %123
  %389 = sub i32 %388, %125
  %390 = sub i32 %389, %126
  %391 = sub i32 %390, %127
  %392 = sub i32 %391, %128
  %393 = add i32 %392, %129
  %394 = sub i32 %393, %133
  %395 = add i32 %394, %136
  %396 = add i32 %395, %138
  %397 = add i32 %396, %139
  %398 = add i32 %397, %141
  %399 = sub i32 %398, %143
  %400 = sub i32 %399, %148
  %401 = sub i32 %400, %149
  %402 = sub i32 %401, %152
  %403 = sub i32 %402, %155
  %404 = sub i32 %403, %158
  %405 = add i32 %404, %159
  %406 = add i32 %405, %160
  %407 = sub i32 %406, %168
  %408 = sub i32 %407, %170
  %409 = add i32 %408, %172
  %410 = sub i32 %409, %173
  %411 = add i32 %410, %178
  %412 = add i32 %411, %179
  %413 = sub i32 %412, %180
  %414 = sub i32 %413, %181
  %415 = sub i32 %414, %182
  %416 = sub i32 %415, %186
  %417 = sub i32 %416, %187
  %418 = sub i32 %417, %189
  %419 = sub i32 %418, %191
  %420 = sub i32 %419, %192
  %421 = sub i32 %420, %193
  %422 = sub i32 %421, %196
  %423 = sub i32 %422, %197
  %424 = add i32 %423, %198
  %425 = sub i32 %424, %199
  %426 = sub i32 %425, %202
  %427 = add i32 %426, %203
  %428 = sub i32 %427, %204
  %429 = add i32 %428, %205
  %430 = add i32 %429, %206
  %431 = sub i32 %430, %207
  %432 = sub i32 %431, %211
  %433 = add i32 %432, %214
  %434 = add i32 %433, %215
  %435 = sub i32 %434, %217
  %436 = add i32 %435, %218
  %437 = add i32 %436, %220
  %438 = sub i32 %437, %164
  %439 = add i32 %438, %221
  %440 = add i32 %439, %225
  %441 = sub i32 %440, %228
  %442 = add i32 %441, %231
  %443 = sub i32 %442, %235
  %444 = sub i32 %443, %236
  %445 = sub i32 %444, %237
  %446 = sub i32 %445, %240
  %447 = add i32 %446, %242
  %448 = add i32 %447, %247
  %449 = sub i32 %448, %249
  %450 = sub i32 %449, %250
  %451 = add i32 %450, %253
  %452 = add i32 %451, %51
  %453 = sub i32 %452, %256
  %454 = add i32 %453, %258
  %455 = add i32 %454, %260
  %456 = add i32 %455, %262
  %457 = add i32 %456, %265
  %458 = sub i32 %457, %21
  %459 = sub i32 %458, %37
  %460 = sub i32 %459, %43
  %461 = sub i32 %460, %56
  %462 = sub i32 %461, %67
  %463 = sub i32 %462, %76
  %464 = sub i32 %463, %95
  %465 = sub i32 %464, %110
  %466 = add i32 %465, %132
  %467 = sub i32 %466, %146
  %468 = add i32 %467, %151
  %469 = add i32 %468, %163
  %470 = sub i32 %469, %165
  %471 = sub i32 %470, %176
  %472 = sub i32 %471, %184
  %473 = sub i32 %472, %195
  %474 = sub i32 %473, %201
  %475 = sub i32 %474, %210
  %476 = sub i32 %475, %213
  %477 = sub i32 %476, %224
  %478 = sub i32 %477, %230
  %479 = add i32 %478, %232
  %480 = sub i32 %479, %234
  %481 = sub i32 %480, %239
  %482 = sub i32 %481, %244
  %483 = sub i32 %482, %251
  %484 = add i32 %483, %259
  %485 = sub i32 %484, %267
  %486 = add i32 %485, %269
  %487 = add i32 %486, %272
  %488 = add i32 %487, %275
  %489 = add i32 %488, %276
  %490 = add i32 %489, %278
  %491 = add i32 %490, %279
  %492 = add i32 %491, %314
  %493 = sub i32 %492, %54
  %494 = add i32 %493, %307
  %495 = add i32 %494, %312
  %496 = add i32 %495, %301
  %497 = icmp eq i32 %11, %496
  %498 = select i1 %497, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)
  %499 = tail call i32 @puts(i8* nonnull dereferenceable(1) %498)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #1 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %4) #5
  %5 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %5) #5
  %6 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %6) #5
  %7 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3)
  %8 = load i32, i32* %1, align 4, !tbaa !2
  %9 = load i32, i32* %2, align 4, !tbaa !2
  %10 = load i32, i32* %3, align 4, !tbaa !2
  call void @crackme(i32 %8, i32 %9, i32 %10)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %6) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %5) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %4) #5
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare dso_local i32 @__isoc99_scanf(i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #4

attributes #0 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Ubuntu clang version 10.0.1-++20200708122807+ef32c611aa2-1~exp1~20200707223407.61 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
