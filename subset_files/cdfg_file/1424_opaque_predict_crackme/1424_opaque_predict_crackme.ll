; ModuleID = '../.././c_source_file/1424_opaque_predict_crackme.c'
source_filename = "../.././c_source_file/1424_opaque_predict_crackme.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str.2 = private unnamed_addr constant [18 x i8] c"%d %d %d %d %d %d\00", align 1
@str = private unnamed_addr constant [4 x i8] c"bad\00", align 1
@str.3 = private unnamed_addr constant [5 x i8] c"good\00", align 1

; Function Attrs: nofree nounwind uwtable
define dso_local void @crackme(i32 %0, i32 %1, i32 %2, i32 %3, i32 %4, i32 %5) local_unnamed_addr #0 {
  %7 = xor i32 %0, -1
  %8 = xor i32 %2, %1
  %9 = xor i32 %8, -1
  %10 = or i32 %9, %7
  %11 = and i32 %1, %0
  %12 = or i32 %2, %0
  %13 = xor i32 %12, -1
  %14 = or i32 %11, %13
  %15 = sub i32 %14, %10
  %16 = xor i32 %4, %3
  %17 = xor i32 %16, -1
  %18 = shl i32 %17, 1
  %19 = add i32 %15, %18
  %20 = and i32 %2, %1
  %21 = xor i32 %20, -1
  %22 = and i32 %21, %7
  %23 = and i32 %9, %0
  %24 = or i32 %21, %7
  %25 = xor i32 %1, -1
  %26 = or i32 %25, %0
  %27 = xor i32 %26, -1
  %28 = xor i32 %27, %2
  %29 = xor i32 %2, %0
  %30 = or i32 %29, %11
  %31 = shl i32 %30, 1
  %32 = xor i32 %2, -1
  %33 = and i32 %32, %1
  %34 = xor i32 %33, -1
  %35 = add i32 %33, 1
  %36 = xor i32 %9, %0
  %37 = shl i32 %36, 1
  %38 = xor i32 %1, %0
  %39 = xor i32 %38, -1
  %40 = and i32 %32, %39
  %41 = xor i32 %11, %2
  %42 = and i32 %29, %39
  %43 = and i32 %25, %0
  %44 = xor i32 %43, %2
  %45 = xor i32 %11, -1
  %46 = and i32 %32, %45
  %47 = or i32 %32, %1
  %48 = xor i32 %29, -1
  %49 = and i32 %48, %25
  %50 = and i32 %25, %2
  %51 = and i32 %50, %0
  %52 = or i32 %25, %2
  %53 = and i32 %52, %7
  %54 = or i32 %51, %53
  %55 = and i32 %20, %0
  %56 = xor i32 %8, %0
  %57 = xor i32 %55, %56
  %58 = add i32 %2, 1
  %59 = and i32 %34, %0
  %60 = or i32 %8, %0
  %61 = xor i32 %51, %60
  %62 = add i32 %38, 1
  %63 = and i32 %32, %0
  %64 = xor i32 %63, %21
  %65 = and i32 %8, %0
  %66 = or i32 %2, %1
  %67 = xor i32 %66, %0
  %68 = xor i32 %55, -1
  %69 = xor i32 %67, %68
  %70 = xor i32 %43, -1
  %71 = and i32 %8, %70
  %72 = or i32 %1, %0
  %73 = xor i32 %72, -1
  %74 = shl i32 %73, 1
  %75 = xor i32 %47, -1
  %76 = or i32 %63, %75
  %77 = add i32 %20, 1
  %78 = or i32 %29, %39
  %79 = xor i32 %56, -1
  %80 = or i32 %55, %79
  %81 = shl i32 %80, 1
  %82 = and i32 %66, %7
  %83 = xor i32 %82, %68
  %84 = and i32 %12, %1
  %85 = and i32 %2, %0
  %86 = xor i32 %85, %72
  %87 = and i32 %47, %7
  %88 = or i32 %55, %67
  %89 = shl i32 %88, 1
  %90 = and i32 %26, %32
  %91 = xor i32 %13, %1
  %92 = shl i32 %91, 1
  %93 = or i32 %48, %73
  %94 = and i32 %50, %7
  %95 = and i32 %52, %0
  %96 = or i32 %94, %95
  %97 = or i32 %29, %1
  %98 = or i32 %85, %39
  %99 = and i32 %48, %45
  %100 = xor i32 %66, %11
  %101 = or i32 %27, %2
  %102 = and i32 %34, %7
  %103 = and i32 %45, %2
  %104 = or i32 %63, %39
  %105 = xor i32 %85, -1
  %106 = and i32 %105, %39
  %107 = and i32 %20, %7
  %108 = xor i32 %107, -1
  %109 = xor i32 %65, %108
  %110 = or i32 %33, %7
  %111 = xor i32 %70, %2
  %112 = and i32 %66, %0
  %113 = xor i32 %63, -1
  %114 = and i32 %113, %1
  %115 = or i32 %32, %0
  %116 = and i32 %115, %1
  %117 = or i32 %38, %32
  %118 = shl i32 %117, 1
  %119 = or i32 %85, %73
  %120 = and i32 %48, %1
  %121 = or i32 %63, %38
  %122 = and i32 %105, %25
  %123 = and i32 %26, %9
  %124 = and i32 %29, %38
  %125 = xor i32 %115, %11
  %126 = xor i32 %115, -1
  %127 = or i32 %38, %126
  %128 = or i32 %43, %32
  %129 = xor i32 %112, %108
  %130 = and i32 %105, %1
  %131 = or i32 %126, %25
  %132 = or i32 %8, %73
  %133 = shl i32 %132, 2
  %134 = and i32 %48, %39
  %135 = or i32 %20, %0
  %136 = or i32 %85, %25
  %137 = xor i32 %66, -1
  %138 = or i32 %85, %137
  %139 = and i32 %8, %45
  %140 = xor i32 %75, %0
  %141 = and i32 %29, %45
  %142 = and i32 %29, %72
  %143 = xor i32 %85, %34
  %144 = and i32 %12, %38
  %145 = or i32 %8, %43
  %146 = shl i32 %105, 1
  %147 = xor i32 %51, %79
  %148 = xor i32 %43, %34
  %149 = or i32 %85, %33
  %150 = xor i32 %115, %1
  %151 = or i32 %34, %7
  %152 = or i32 %34, %0
  %153 = or i32 %11, %9
  %154 = or i32 %9, %0
  %155 = shl i32 %154, 2
  %156 = or i32 %51, %56
  %157 = or i32 %66, %7
  %158 = shl i32 %157, 1
  %159 = or i32 %43, %48
  %160 = and i32 %115, %25
  %161 = xor i32 %34, %0
  %162 = or i32 %32, %27
  %163 = and i32 %39, %2
  %164 = and i32 %29, %25
  %165 = and i32 %113, %39
  %166 = shl i32 %165, 1
  %167 = or i32 %107, %112
  %168 = and i32 %38, %32
  %169 = and i32 %70, %2
  %170 = shl i32 %169, 1
  %171 = or i32 %11, %48
  %172 = xor i32 %26, %2
  %173 = shl i32 %172, 1
  %174 = xor i32 %43, %21
  %175 = xor i32 %20, %0
  %176 = or i32 %85, %38
  %177 = and i32 %38, %113
  %178 = or i32 %29, %27
  %179 = or i32 %47, %7
  %180 = and i32 %38, %2
  %181 = and i32 %9, %7
  %182 = or i32 %11, %137
  %183 = add i32 %26, 1
  %184 = or i32 %13, %1
  %185 = or i32 %55, %82
  %186 = or i32 %11, %2
  %187 = or i32 %126, %39
  %188 = and i32 %9, %70
  %189 = xor i32 %72, %2
  %190 = and i32 %29, %1
  %191 = shl i32 %190, 1
  %192 = or i32 %9, %73
  %193 = and i32 %29, %26
  %194 = or i32 %43, %2
  %195 = and i32 %8, %7
  %196 = or i32 %55, %195
  %197 = xor i32 %85, %26
  %198 = xor i32 %63, %1
  %199 = or i32 %107, %65
  %200 = or i32 %63, %25
  %201 = xor i32 %12, %11
  %202 = xor i32 %45, %2
  %203 = and i32 %8, %26
  %204 = xor i32 %126, %1
  %205 = or i32 %29, %38
  %206 = or i32 %13, %39
  %207 = and i32 %32, %70
  %208 = and i32 %38, %48
  %209 = xor i32 %195, 2147483647
  %210 = xor i32 %209, %55
  %211 = shl i32 %210, 1
  %212 = or i32 %32, %73
  %213 = or i32 %20, %43
  %214 = xor i32 %47, %11
  %215 = and i32 %48, %70
  %216 = and i32 %72, %48
  %217 = and i32 %72, %2
  %218 = or i32 %13, %25
  %219 = and i32 %26, %2
  %220 = or i32 %33, %0
  %221 = or i32 %8, %7
  %222 = xor i32 %94, %221
  %223 = and i32 %115, %38
  %224 = or i32 %38, %48
  %225 = and i32 %38, %105
  %226 = and i32 %47, %0
  %227 = xor i32 %12, %1
  %228 = xor i32 %53, 2147483647
  %229 = xor i32 %228, %51
  %230 = and i32 %113, %25
  %231 = or i32 %29, %43
  %232 = or i32 %73, %2
  %233 = or i32 %11, %126
  %234 = or i32 %38, %2
  %235 = or i32 %63, %20
  %236 = add i32 %115, 1
  %237 = or i32 %63, %1
  %238 = and i32 %12, %39
  %239 = or i32 %11, %32
  %240 = xor i32 %95, -1
  %241 = xor i32 %94, %240
  %242 = xor i32 %52, %0
  %243 = or i32 %51, %242
  %244 = or i32 %48, %39
  %245 = or i32 %85, %1
  %246 = shl i32 %245, 1
  %247 = or i32 %33, %43
  %248 = or i32 %32, %39
  %249 = and i32 %72, %32
  %250 = xor i32 %113, %1
  %251 = or i32 %137, %0
  %252 = or i32 %9, %27
  %253 = xor i32 %21, %0
  %254 = or i32 %75, %7
  %255 = add i32 %12, 1
  %256 = or i32 %11, %75
  %257 = xor i32 %137, %0
  %258 = or i32 %48, %1
  %259 = and i32 %137, %7
  %260 = shl i32 %259, 3
  %261 = and i32 %33, %7
  %262 = mul i32 %261, -26
  %263 = and i32 %137, %0
  %264 = mul i32 %263, -25
  %265 = and i32 %33, %0
  %266 = and i32 %75, %7
  %267 = and i32 %75, %0
  %268 = shl i32 %267, 4
  %269 = mul i32 %55, -29
  %270 = and i32 %4, %3
  %271 = xor i32 %270, -1
  %272 = xor i32 %5, %3
  %273 = xor i32 %272, -1
  %274 = and i32 %273, %271
  %275 = xor i32 %3, -1
  %276 = xor i32 %4, -1
  %277 = or i32 %276, %3
  %278 = xor i32 %5, %4
  %279 = xor i32 %278, -1
  %280 = and i32 %277, %279
  %281 = shl i32 %280, 1
  %282 = and i32 %5, %4
  %283 = or i32 %275, %4
  %284 = xor i32 %282, %283
  %285 = and i32 %273, %276
  %286 = xor i32 %270, %5
  %287 = and i32 %5, %3
  %288 = and i32 %287, %4
  %289 = or i32 %5, %3
  %290 = xor i32 %289, %276
  %291 = xor i32 %290, %288
  %292 = xor i32 %5, -1
  %293 = and i32 %277, %292
  %294 = and i32 %292, %17
  %295 = or i32 %292, %3
  %296 = or i32 %292, %4
  %297 = xor i32 %296, -1
  %298 = or i32 %297, %275
  %299 = and i32 %292, %3
  %300 = xor i32 %282, -1
  %301 = xor i32 %299, %300
  %302 = xor i32 %295, -1
  %303 = shl i32 %302, 1
  %304 = or i32 %5, %4
  %305 = xor i32 %304, -1
  %306 = or i32 %16, %305
  %307 = shl i32 %277, 1
  %308 = or i32 %282, %17
  %309 = or i32 %4, %3
  %310 = xor i32 %309, -1
  %311 = or i32 %282, %310
  %312 = and i32 %304, %275
  %313 = xor i32 %289, -1
  %314 = or i32 %282, %313
  %315 = and i32 %272, %4
  %316 = add i32 %296, 1
  %317 = and i32 %278, %3
  %318 = xor i32 %283, -1
  %319 = or i32 %282, %318
  %320 = and i32 %275, %5
  %321 = and i32 %320, %276
  %322 = or i32 %272, %276
  %323 = xor i32 %321, %322
  %324 = and i32 %272, %276
  %325 = or i32 %295, %4
  %326 = or i32 %297, %17
  %327 = and i32 %278, %16
  %328 = or i32 %279, %275
  %329 = or i32 %299, %276
  %330 = shl i32 %329, 1
  %331 = and i32 %292, %4
  %332 = xor i32 %331, %3
  %333 = or i32 %273, %318
  %334 = and i32 %278, %277
  %335 = or i32 %270, %5
  %336 = and i32 %320, %4
  %337 = or i32 %272, %4
  %338 = xor i32 %336, %337
  %339 = and i32 %296, %3
  %340 = shl i32 %339, 1
  %341 = and i32 %289, %4
  %342 = or i32 %270, %273
  %343 = xor i32 %288, %4
  %344 = xor i32 %343, %272
  %345 = and i32 %296, %17
  %346 = xor i32 %331, -1
  %347 = and i32 %346, %17
  %348 = shl i32 %347, 1
  %349 = xor i32 %287, %4
  %350 = and i32 %16, %5
  %351 = or i32 %302, %276
  %352 = and i32 %346, %275
  %353 = or i32 %16, %279
  %354 = xor i32 %282, %275
  %355 = shl i32 %278, 1
  %356 = or i32 %278, %16
  %357 = and i32 %313, %276
  %358 = and i32 %299, %276
  %359 = and i32 %313, %4
  %360 = and i32 %299, %4
  %361 = and i32 %302, %276
  %362 = mul i32 %361, -7
  %363 = and i32 %287, %276
  %364 = mul i32 %363, 6
  %365 = and i32 %302, %4
  %366 = mul i32 %365, -11
  %367 = add i32 %113, %2
  %368 = add i32 %367, %207
  %369 = add i32 %368, %189
  %370 = add i32 %369, %163
  %371 = add i32 %370, %162
  %372 = add i32 %371, %29
  %373 = add i32 %372, %90
  %374 = add i32 %373, %33
  %375 = add i32 %374, %258
  %376 = add i32 %375, %244
  %377 = add i32 %376, %224
  %378 = add i32 %377, %149
  %379 = add i32 %378, %139
  %380 = add i32 %379, %136
  %381 = add i32 %380, %114
  %382 = add i32 %381, %71
  %383 = add i32 %382, %49
  %384 = add i32 %383, %5
  %385 = add i32 %384, %283
  %386 = add i32 %385, %335
  %387 = add i32 %386, %229
  %388 = add i32 %387, %328
  %389 = add i32 %388, %356
  %390 = add i32 %389, %324
  %391 = add i32 %390, %312
  %392 = shl i32 %391, 1
  %393 = sub i32 %144, %134
  %394 = add i32 %393, %123
  %395 = sub i32 %394, %222
  %396 = sub i32 %395, %353
  %397 = add i32 %396, %288
  %398 = add i32 %397, %311
  %399 = mul i32 %398, 5
  %400 = sub i32 %220, %67
  %401 = add i32 %400, %215
  %402 = add i32 %401, %176
  %403 = sub i32 %402, %314
  %404 = sub i32 %403, %359
  %405 = mul i32 %404, 3
  %406 = add i32 %194, %248
  %407 = add i32 %406, %85
  %408 = add i32 %407, %293
  %409 = shl i32 %408, 2
  %410 = sub i32 %265, %266
  %411 = mul i32 %410, 10
  %412 = sub i32 -3, %0
  %413 = add i32 %412, %7
  %414 = add i32 %413, %25
  %415 = sub i32 %414, %1
  %416 = add i32 %415, %58
  %417 = add i32 %416, %62
  %418 = add i32 %417, %72
  %419 = add i32 %418, %183
  %420 = add i32 %419, %38
  %421 = add i32 %420, %28
  %422 = add i32 %421, %35
  %423 = sub i32 %422, %40
  %424 = add i32 %423, %41
  %425 = add i32 %424, %44
  %426 = sub i32 %425, %46
  %427 = sub i32 %426, %74
  %428 = add i32 %427, %77
  %429 = sub i32 %428, %101
  %430 = sub i32 %429, %103
  %431 = add i32 %430, %111
  %432 = add i32 %431, %20
  %433 = add i32 %432, %128
  %434 = add i32 %433, %12
  %435 = sub i32 %434, %115
  %436 = add i32 %435, %48
  %437 = add i32 %436, %63
  %438 = add i32 %437, %168
  %439 = sub i32 %438, %180
  %440 = sub i32 %439, %186
  %441 = add i32 %440, %9
  %442 = sub i32 %441, %202
  %443 = add i32 %442, %212
  %444 = add i32 %443, %217
  %445 = sub i32 %444, %219
  %446 = add i32 %445, %232
  %447 = add i32 %446, %137
  %448 = add i32 %447, %234
  %449 = add i32 %448, %236
  %450 = add i32 %449, %239
  %451 = sub i32 %450, %249
  %452 = add i32 %451, %255
  %453 = sub i32 %452, %23
  %454 = sub i32 %453, %22
  %455 = add i32 %454, %24
  %456 = add i32 %455, %42
  %457 = sub i32 %456, %59
  %458 = add i32 %457, %64
  %459 = add i32 %458, %65
  %460 = sub i32 %459, %76
  %461 = sub i32 %460, %78
  %462 = add i32 %461, %84
  %463 = sub i32 %462, %86
  %464 = sub i32 %463, %87
  %465 = sub i32 %464, %93
  %466 = add i32 %465, %97
  %467 = sub i32 %466, %98
  %468 = sub i32 %467, %99
  %469 = sub i32 %468, %100
  %470 = sub i32 %469, %102
  %471 = add i32 %470, %104
  %472 = sub i32 %471, %106
  %473 = sub i32 %472, %110
  %474 = sub i32 %473, %112
  %475 = sub i32 %474, %116
  %476 = sub i32 %475, %118
  %477 = sub i32 %476, %119
  %478 = sub i32 %477, %120
  %479 = sub i32 %478, %121
  %480 = add i32 %479, %122
  %481 = add i32 %480, %124
  %482 = add i32 %481, %125
  %483 = sub i32 %482, %127
  %484 = add i32 %483, %130
  %485 = add i32 %484, %131
  %486 = add i32 %485, %60
  %487 = sub i32 %486, %135
  %488 = add i32 %487, %138
  %489 = sub i32 %488, %140
  %490 = sub i32 %489, %141
  %491 = add i32 %490, %142
  %492 = sub i32 %491, %143
  %493 = add i32 %492, %145
  %494 = sub i32 %493, %146
  %495 = add i32 %494, %56
  %496 = add i32 %495, %148
  %497 = add i32 %496, %150
  %498 = add i32 %497, %151
  %499 = sub i32 %498, %152
  %500 = add i32 %499, %153
  %501 = sub i32 %500, %159
  %502 = sub i32 %501, %160
  %503 = add i32 %502, %161
  %504 = sub i32 %503, %164
  %505 = sub i32 %504, %170
  %506 = add i32 %505, %171
  %507 = sub i32 %506, %173
  %508 = add i32 %507, %82
  %509 = sub i32 %508, %174
  %510 = sub i32 %509, %175
  %511 = add i32 %510, %177
  %512 = add i32 %511, %178
  %513 = add i32 %512, %179
  %514 = add i32 %513, %181
  %515 = sub i32 %514, %182
  %516 = sub i32 %515, %184
  %517 = sub i32 %516, %187
  %518 = add i32 %517, %188
  %519 = sub i32 %518, %192
  %520 = sub i32 %519, %193
  %521 = sub i32 %520, %197
  %522 = add i32 %521, %198
  %523 = sub i32 %522, %200
  %524 = add i32 %523, %201
  %525 = sub i32 %524, %203
  %526 = add i32 %525, %204
  %527 = sub i32 %526, %205
  %528 = sub i32 %527, %206
  %529 = add i32 %528, %208
  %530 = add i32 %529, %213
  %531 = sub i32 %530, %214
  %532 = add i32 %531, %216
  %533 = add i32 %532, %218
  %534 = sub i32 %533, %223
  %535 = add i32 %534, %225
  %536 = add i32 %535, %226
  %537 = add i32 %536, %227
  %538 = add i32 %537, %230
  %539 = sub i32 %538, %231
  %540 = sub i32 %539, %233
  %541 = sub i32 %540, %235
  %542 = add i32 %541, %237
  %543 = add i32 %542, %238
  %544 = sub i32 %543, %247
  %545 = add i32 %544, %221
  %546 = add i32 %545, %250
  %547 = add i32 %546, %251
  %548 = add i32 %547, %252
  %549 = add i32 %548, %253
  %550 = sub i32 %549, %254
  %551 = add i32 %550, %256
  %552 = sub i32 %551, %257
  %553 = sub i32 %552, %107
  %554 = sub i32 %553, %31
  %555 = sub i32 %554, %37
  %556 = add i32 %555, %54
  %557 = add i32 %556, %57
  %558 = add i32 %557, %61
  %559 = sub i32 %558, %69
  %560 = sub i32 %559, %83
  %561 = sub i32 %560, %92
  %562 = sub i32 %561, %96
  %563 = sub i32 %562, %109
  %564 = sub i32 %563, %129
  %565 = sub i32 %564, %133
  %566 = add i32 %565, %147
  %567 = sub i32 %566, %155
  %568 = sub i32 %567, %156
  %569 = sub i32 %568, %158
  %570 = sub i32 %569, %166
  %571 = add i32 %570, %167
  %572 = add i32 %571, %185
  %573 = sub i32 %572, %191
  %574 = add i32 %573, %196
  %575 = sub i32 %574, %199
  %576 = sub i32 %575, %241
  %577 = add i32 %576, %243
  %578 = sub i32 %577, %246
  %579 = add i32 %578, %260
  %580 = add i32 %579, %262
  %581 = add i32 %580, %264
  %582 = sub i32 %581, %268
  %583 = add i32 %582, %269
  %584 = add i32 %583, %309
  %585 = sub i32 %584, %81
  %586 = sub i32 %585, %89
  %587 = add i32 %586, %286
  %588 = sub i32 %587, %294
  %589 = add i32 %588, %295
  %590 = sub i32 %589, %307
  %591 = add i32 %590, %316
  %592 = add i32 %591, %305
  %593 = sub i32 %592, %304
  %594 = sub i32 %593, %350
  %595 = add i32 %594, %411
  %596 = sub i32 %595, %211
  %597 = sub i32 %596, %274
  %598 = add i32 %597, %284
  %599 = sub i32 %598, %285
  %600 = add i32 %599, %298
  %601 = add i32 %600, %301
  %602 = sub i32 %601, %303
  %603 = add i32 %602, %306
  %604 = sub i32 %603, %308
  %605 = sub i32 %604, %315
  %606 = sub i32 %605, %317
  %607 = add i32 %606, %319
  %608 = sub i32 %607, %325
  %609 = sub i32 %608, %326
  %610 = add i32 %609, %327
  %611 = sub i32 %610, %332
  %612 = add i32 %611, %333
  %613 = sub i32 %612, %334
  %614 = add i32 %613, %341
  %615 = sub i32 %614, %342
  %616 = add i32 %615, %345
  %617 = add i32 %616, %349
  %618 = sub i32 %617, %351
  %619 = add i32 %618, %352
  %620 = add i32 %619, %354
  %621 = sub i32 %620, %355
  %622 = add i32 %621, %357
  %623 = sub i32 %622, %358
  %624 = add i32 %623, %360
  %625 = sub i32 %624, %281
  %626 = add i32 %625, %291
  %627 = add i32 %626, %323
  %628 = sub i32 %627, %330
  %629 = sub i32 %628, %338
  %630 = sub i32 %629, %340
  %631 = add i32 %630, %344
  %632 = sub i32 %631, %348
  %633 = add i32 %632, %362
  %634 = add i32 %633, %364
  %635 = add i32 %634, %366
  %636 = add i32 %635, %409
  %637 = add i32 %636, %405
  %638 = add i32 %637, %399
  %639 = add i32 %638, %392
  %640 = icmp eq i32 %19, %639
  %641 = select i1 %640, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)
  %642 = tail call i32 @puts(i8* nonnull dereferenceable(1) %641)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #1 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %7) #5
  %8 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %8) #5
  %9 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %9) #5
  %10 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %10) #5
  %11 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %11) #5
  %12 = bitcast i32* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %12) #5
  %13 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3, i32* nonnull %4, i32* nonnull %5, i32* nonnull %6)
  %14 = load i32, i32* %1, align 4, !tbaa !2
  %15 = load i32, i32* %2, align 4, !tbaa !2
  %16 = load i32, i32* %3, align 4, !tbaa !2
  %17 = load i32, i32* %4, align 4, !tbaa !2
  %18 = load i32, i32* %5, align 4, !tbaa !2
  %19 = load i32, i32* %6, align 4, !tbaa !2
  call void @crackme(i32 %14, i32 %15, i32 %16, i32 %17, i32 %18, i32 %19)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %12) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %11) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %10) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %9) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %8) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %7) #5
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare dso_local i32 @__isoc99_scanf(i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #4

attributes #0 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Ubuntu clang version 10.0.1-++20200708122807+ef32c611aa2-1~exp1~20200707223407.61 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
