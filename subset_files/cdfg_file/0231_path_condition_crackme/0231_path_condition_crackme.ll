; ModuleID = '../.././c_source_file/0231_path_condition_crackme.c'
source_filename = "../.././c_source_file/0231_path_condition_crackme.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str.2 = private unnamed_addr constant [15 x i8] c"%d %d %d %d %d\00", align 1
@str = private unnamed_addr constant [4 x i8] c"bad\00", align 1
@str.3 = private unnamed_addr constant [5 x i8] c"good\00", align 1

; Function Attrs: nofree nounwind uwtable
define dso_local void @crackme(i32 %0, i32 %1, i32 %2, i32 %3, i32 %4) local_unnamed_addr #0 {
  %6 = add i32 %3, 1
  %7 = xor i32 %0, -1
  %8 = and i32 %2, %1
  %9 = and i32 %8, %7
  %10 = or i32 %2, %1
  %11 = and i32 %10, %0
  %12 = or i32 %9, %11
  %13 = xor i32 %2, -1
  %14 = or i32 %13, %1
  %15 = shl i32 %14, 1
  %16 = add i32 %6, %15
  %17 = sub i32 %16, %12
  %18 = xor i32 %4, %3
  %19 = xor i32 %4, -1
  %20 = or i32 %19, %3
  %21 = or i32 %4, %3
  %22 = xor i32 %3, -1
  %23 = or i32 %22, %4
  %24 = shl i32 %21, 1
  %25 = xor i32 %24, -2
  %26 = shl i32 %20, 2
  %27 = xor i32 %26, -4
  %28 = and i32 %4, %3
  %29 = xor i32 %2, %1
  %30 = xor i32 %29, %0
  %31 = or i32 %1, %0
  %32 = and i32 %31, %2
  %33 = and i32 %1, %0
  %34 = xor i32 %33, -1
  %35 = and i32 %13, %34
  %36 = xor i32 %29, -1
  %37 = and i32 %31, %36
  %38 = xor i32 %14, -1
  %39 = or i32 %33, %38
  %40 = xor i32 %1, %0
  %41 = or i32 %40, %2
  %42 = or i32 %13, %0
  %43 = xor i32 %40, -1
  %44 = and i32 %42, %43
  %45 = and i32 %2, %0
  %46 = xor i32 %45, -1
  %47 = and i32 %46, %43
  %48 = xor i32 %1, -1
  %49 = and i32 %48, %2
  %50 = and i32 %49, %0
  %51 = or i32 %48, %2
  %52 = and i32 %51, %7
  %53 = or i32 %50, %52
  %54 = or i32 %2, %0
  %55 = and i32 %54, %43
  %56 = xor i32 %8, -1
  %57 = and i32 %56, %7
  %58 = xor i32 %51, %0
  %59 = or i32 %50, %58
  %60 = and i32 %13, %1
  %61 = xor i32 %60, -1
  %62 = or i32 %61, %0
  %63 = shl i32 %62, 1
  %64 = xor i32 %38, %0
  %65 = xor i32 %2, %0
  %66 = xor i32 %65, -1
  %67 = or i32 %66, %48
  %68 = and i32 %40, %2
  %69 = or i32 %66, %43
  %70 = and i32 %13, %0
  %71 = or i32 %70, %43
  %72 = or i32 %33, %36
  %73 = shl i32 %72, 1
  %74 = and i32 %29, %31
  %75 = or i32 %70, %1
  %76 = xor i32 %45, %1
  %77 = and i32 %65, %48
  %78 = or i32 %29, %0
  %79 = and i32 %8, %0
  %80 = and i32 %29, %7
  %81 = or i32 %79, %80
  %82 = and i32 %66, %43
  %83 = and i32 %13, %43
  %84 = and i32 %40, %66
  %85 = and i32 %66, %48
  %86 = or i32 %36, %0
  %87 = or i32 %65, %40
  %88 = shl i32 %87, 1
  %89 = xor i32 %60, %0
  %90 = shl i32 %89, 1
  %91 = and i32 %48, %0
  %92 = xor i32 %91, -1
  %93 = and i32 %65, %92
  %94 = or i32 %70, %40
  %95 = xor i32 %42, %1
  %96 = shl i32 %95, 1
  %97 = xor i32 %34, %2
  %98 = and i32 %54, %48
  %99 = and i32 %42, %1
  %100 = or i32 %10, %7
  %101 = or i32 %33, %2
  %102 = shl i32 %101, 1
  %103 = add i32 %45, 1
  %104 = or i32 %65, %48
  %105 = xor i32 %45, %31
  %106 = or i32 %40, %13
  %107 = xor i32 %91, %56
  %108 = xor i32 %31, -1
  %109 = xor i32 %108, %2
  %110 = or i32 %91, %2
  %111 = xor i32 %10, -1
  %112 = or i32 %45, %111
  %113 = and i32 %10, %7
  %114 = or i32 %79, %113
  %115 = or i32 %48, %0
  %116 = and i32 %115, %66
  %117 = and i32 %46, %48
  %118 = xor i32 %70, -1
  %119 = and i32 %118, %1
  %120 = or i32 %65, %1
  %121 = or i32 %8, %91
  %122 = and i32 %49, %7
  %123 = or i32 %29, %7
  %124 = xor i32 %122, %123
  %125 = or i32 %45, %43
  %126 = xor i32 %118, %1
  %127 = xor i32 %79, -1
  %128 = xor i32 %113, %127
  %129 = and i32 %65, %31
  %130 = shl i32 %129, 1
  %131 = or i32 %108, %2
  %132 = and i32 %51, %0
  %133 = or i32 %122, %132
  %134 = shl i32 %133, 1
  %135 = add i32 %31, 1
  %136 = or i32 %65, %33
  %137 = and i32 %65, %34
  %138 = and i32 %66, %34
  %139 = or i32 %40, %66
  %140 = xor i32 %61, %0
  %141 = shl i32 %140, 2
  %142 = and i32 %40, %118
  %143 = add i32 %10, 1
  %144 = and i32 %66, %1
  %145 = xor i32 %115, -1
  %146 = or i32 %45, %145
  %147 = xor i32 %31, %2
  %148 = xor i32 %54, %33
  %149 = xor i32 %45, %61
  %150 = xor i32 %132, -1
  %151 = xor i32 %122, %150
  %152 = xor i32 %54, -1
  %153 = xor i32 %152, %1
  %154 = and i32 %54, %40
  %155 = xor i32 %46, %1
  %156 = xor i32 %58, 2147483647
  %157 = xor i32 %156, %50
  %158 = and i32 %34, %2
  %159 = xor i32 %115, %2
  %160 = xor i32 %123, -1
  %161 = or i32 %122, %160
  %162 = or i32 %65, %108
  %163 = or i32 %60, %91
  %164 = and i32 %65, %43
  %165 = shl i32 %164, 1
  %166 = xor i32 %14, %33
  %167 = and i32 %65, %40
  %168 = or i32 %145, %2
  %169 = xor i32 %79, %30
  %170 = or i32 %36, %7
  %171 = shl i32 %170, 1
  %172 = and i32 %36, %0
  %173 = or i32 %14, %7
  %174 = xor i32 %10, %0
  %175 = or i32 %79, %174
  %176 = and i32 %42, %48
  %177 = shl i32 %176, 1
  %178 = xor i32 %42, -1
  %179 = or i32 %40, %178
  %180 = or i32 %38, %7
  %181 = and i32 %115, %13
  %182 = xor i32 %50, -1
  %183 = xor i32 %30, %182
  %184 = or i32 %40, %152
  %185 = and i32 %66, %92
  %186 = xor i32 %33, %2
  %187 = or i32 %70, %38
  %188 = and i32 %36, %34
  %189 = shl i32 %188, 1
  %190 = xor i32 %70, %1
  %191 = xor i32 %10, %33
  %192 = xor i32 %91, %61
  %193 = xor i32 %178, %1
  %194 = shl i32 %193, 2
  %195 = or i32 %8, %7
  %196 = xor i32 %92, %2
  %197 = or i32 %13, %108
  %198 = or i32 %29, %145
  %199 = xor i32 %52, %182
  %200 = or i32 %111, %7
  %201 = xor i32 %80, %127
  %202 = xor i32 %50, %78
  %203 = xor i32 %70, %56
  %204 = add i32 %14, 1
  %205 = or i32 %43, %2
  %206 = and i32 %92, %2
  %207 = xor i32 %174, %127
  %208 = or i32 %66, %1
  %209 = and i32 %115, %2
  %210 = or i32 %36, %108
  %211 = or i32 %60, %7
  %212 = and i32 %43, %2
  %213 = or i32 %50, %30
  %214 = or i32 %178, %1
  %215 = or i32 %8, %0
  %216 = or i32 %152, %43
  %217 = and i32 %29, %0
  %218 = xor i32 %78, 2147483647
  %219 = or i32 %218, %50
  %220 = add i32 %65, 1
  %221 = xor i32 %56, %0
  %222 = and i32 %13, %92
  %223 = xor i32 %8, %0
  %224 = or i32 %45, %1
  %225 = and i32 %40, %46
  %226 = or i32 %56, %0
  %227 = and i32 %118, %48
  %228 = or i32 %60, %0
  %229 = and i32 %31, %66
  %230 = or i32 %91, %13
  %231 = or i32 %70, %8
  %232 = or i32 %33, %13
  %233 = and i32 %36, %7
  %234 = shl i32 %233, 1
  %235 = and i32 %65, %115
  %236 = or i32 %66, %145
  %237 = shl i32 %236, 1
  %238 = and i32 %118, %43
  %239 = or i32 %29, %108
  %240 = xor i32 %36, %0
  %241 = and i32 %65, %1
  %242 = or i32 %111, %0
  %243 = or i32 %178, %43
  %244 = or i32 %45, %40
  %245 = or i32 %33, %178
  %246 = and i32 %29, %92
  %247 = add i32 %42, 1
  %248 = xor i32 %9, -1
  %249 = xor i32 %11, %248
  %250 = or i32 %65, %91
  %251 = and i32 %14, %7
  %252 = and i32 %46, %1
  %253 = or i32 %33, %66
  %254 = xor i32 %217, %248
  %255 = add i32 %91, 1
  %256 = xor i32 %54, %1
  %257 = shl i32 %256, 2
  %258 = or i32 %45, %48
  %259 = and i32 %111, %7
  %260 = mul i32 %259, -29
  %261 = and i32 %60, %7
  %262 = and i32 %111, %0
  %263 = shl i32 %262, 3
  %264 = and i32 %60, %0
  %265 = shl i32 %264, 1
  %266 = and i32 %38, %7
  %267 = mul i32 %9, 25
  %268 = and i32 %38, %0
  %269 = mul i32 %268, 12
  %270 = add i32 %13, %1
  %271 = add i32 %270, %232
  %272 = add i32 %271, %222
  %273 = add i32 %272, %205
  %274 = add i32 %273, %197
  %275 = add i32 %274, %131
  %276 = add i32 %275, %97
  %277 = add i32 %276, %252
  %278 = add i32 %277, %228
  %279 = add i32 %278, %200
  %280 = add i32 %279, %185
  %281 = add i32 %280, %166
  %282 = add i32 %281, %125
  %283 = add i32 %282, %4
  %284 = add i32 %283, %53
  %285 = add i32 %284, %157
  %286 = add i32 %285, %219
  %287 = shl i32 %286, 1
  %288 = sub i32 %212, %8
  %289 = sub i32 %288, %261
  %290 = sub i32 %289, %190
  %291 = add i32 %290, %153
  %292 = sub i32 %291, %144
  %293 = sub i32 %292, %74
  %294 = sub i32 %293, %213
  %295 = mul i32 %294, 3
  %296 = add i32 %266, %242
  %297 = add i32 %296, %227
  %298 = add i32 %297, %214
  %299 = add i32 %298, %116
  %300 = shl i32 %299, 2
  %301 = sub i32 %43, %68
  %302 = add i32 %301, %35
  %303 = sub i32 %302, %79
  %304 = mul i32 %303, 5
  %305 = add i32 %135, %40
  %306 = add i32 %305, %33
  %307 = add i32 %306, %255
  %308 = sub i32 %307, %32
  %309 = add i32 %308, %41
  %310 = sub i32 %309, %83
  %311 = add i32 %310, %103
  %312 = sub i32 %311, %106
  %313 = sub i32 %312, %109
  %314 = sub i32 %313, %110
  %315 = add i32 %314, %143
  %316 = add i32 %315, %36
  %317 = add i32 %316, %147
  %318 = add i32 %317, %158
  %319 = sub i32 %318, %159
  %320 = sub i32 %319, %42
  %321 = sub i32 %320, %168
  %322 = add i32 %321, %181
  %323 = sub i32 %322, %186
  %324 = add i32 %323, %56
  %325 = sub i32 %324, %65
  %326 = add i32 %325, %196
  %327 = add i32 %326, %10
  %328 = sub i32 %327, %70
  %329 = add i32 %328, %204
  %330 = sub i32 %329, %206
  %331 = sub i32 %330, %209
  %332 = add i32 %331, %220
  %333 = add i32 %332, %230
  %334 = sub i32 %333, %60
  %335 = add i32 %334, %247
  %336 = add i32 %335, %19
  %337 = sub i32 %336, %30
  %338 = add i32 %337, %37
  %339 = add i32 %338, %39
  %340 = add i32 %339, %44
  %341 = add i32 %340, %47
  %342 = add i32 %341, %55
  %343 = add i32 %342, %57
  %344 = add i32 %343, %64
  %345 = add i32 %344, %67
  %346 = sub i32 %345, %69
  %347 = add i32 %346, %71
  %348 = sub i32 %347, %75
  %349 = add i32 %348, %76
  %350 = add i32 %349, %77
  %351 = add i32 %350, %78
  %352 = add i32 %351, %82
  %353 = add i32 %352, %84
  %354 = sub i32 %353, %85
  %355 = sub i32 %354, %86
  %356 = sub i32 %355, %93
  %357 = sub i32 %356, %94
  %358 = add i32 %357, %98
  %359 = sub i32 %358, %99
  %360 = add i32 %359, %100
  %361 = sub i32 %360, %102
  %362 = add i32 %361, %104
  %363 = add i32 %362, %105
  %364 = add i32 %363, %107
  %365 = sub i32 %364, %112
  %366 = add i32 %365, %117
  %367 = sub i32 %366, %119
  %368 = sub i32 %367, %120
  %369 = sub i32 %368, %121
  %370 = add i32 %369, %126
  %371 = sub i32 %370, %136
  %372 = add i32 %371, %137
  %373 = sub i32 %372, %138
  %374 = add i32 %373, %139
  %375 = add i32 %374, %142
  %376 = add i32 %375, %146
  %377 = sub i32 %376, %148
  %378 = sub i32 %377, %149
  %379 = add i32 %378, %154
  %380 = add i32 %379, %155
  %381 = add i32 %380, %123
  %382 = add i32 %381, %162
  %383 = sub i32 %382, %163
  %384 = sub i32 %383, %167
  %385 = sub i32 %384, %172
  %386 = add i32 %385, %173
  %387 = add i32 %386, %179
  %388 = sub i32 %387, %180
  %389 = add i32 %388, %184
  %390 = add i32 %389, %187
  %391 = sub i32 %390, %191
  %392 = sub i32 %391, %192
  %393 = sub i32 %392, %195
  %394 = sub i32 %393, %198
  %395 = sub i32 %394, %203
  %396 = add i32 %395, %208
  %397 = add i32 %396, %210
  %398 = add i32 %397, %174
  %399 = sub i32 %398, %211
  %400 = add i32 %399, %215
  %401 = add i32 %400, %216
  %402 = sub i32 %401, %217
  %403 = add i32 %402, %221
  %404 = sub i32 %403, %11
  %405 = sub i32 %404, %223
  %406 = add i32 %405, %224
  %407 = sub i32 %406, %225
  %408 = sub i32 %407, %226
  %409 = sub i32 %408, %113
  %410 = add i32 %409, %229
  %411 = sub i32 %410, %231
  %412 = sub i32 %411, %235
  %413 = add i32 %412, %238
  %414 = sub i32 %413, %239
  %415 = add i32 %414, %240
  %416 = add i32 %415, %241
  %417 = sub i32 %416, %243
  %418 = add i32 %417, %244
  %419 = sub i32 %418, %245
  %420 = sub i32 %419, %246
  %421 = sub i32 %420, %250
  %422 = add i32 %421, %251
  %423 = sub i32 %422, %253
  %424 = sub i32 %423, %258
  %425 = add i32 %424, %18
  %426 = sub i32 %425, %20
  %427 = sub i32 %426, %21
  %428 = add i32 %427, %23
  %429 = sub i32 %428, %28
  %430 = sub i32 %429, %59
  %431 = sub i32 %430, %63
  %432 = sub i32 %431, %73
  %433 = sub i32 %432, %81
  %434 = sub i32 %433, %88
  %435 = sub i32 %434, %90
  %436 = sub i32 %435, %96
  %437 = sub i32 %436, %114
  %438 = sub i32 %437, %124
  %439 = sub i32 %438, %128
  %440 = sub i32 %439, %130
  %441 = sub i32 %440, %141
  %442 = add i32 %441, %151
  %443 = sub i32 %442, %161
  %444 = sub i32 %443, %165
  %445 = sub i32 %444, %169
  %446 = sub i32 %445, %171
  %447 = sub i32 %446, %175
  %448 = sub i32 %447, %177
  %449 = sub i32 %448, %183
  %450 = sub i32 %449, %189
  %451 = sub i32 %450, %194
  %452 = sub i32 %451, %199
  %453 = sub i32 %452, %201
  %454 = add i32 %453, %202
  %455 = sub i32 %454, %207
  %456 = sub i32 %455, %234
  %457 = sub i32 %456, %237
  %458 = add i32 %457, %249
  %459 = add i32 %458, %254
  %460 = sub i32 %459, %257
  %461 = add i32 %460, %260
  %462 = add i32 %461, %263
  %463 = sub i32 %462, %265
  %464 = add i32 %463, %267
  %465 = add i32 %464, %269
  %466 = sub i32 %465, %134
  %467 = sub i32 %466, %25
  %468 = sub i32 %467, %27
  %469 = add i32 %468, %304
  %470 = add i32 %469, %300
  %471 = add i32 %470, %295
  %472 = add i32 %471, %287
  %473 = icmp eq i32 %17, %472
  %474 = select i1 %473, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)
  %475 = tail call i32 @puts(i8* nonnull dereferenceable(1) %474)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #1 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %6) #5
  %7 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %7) #5
  %8 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %8) #5
  %9 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %9) #5
  %10 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %10) #5
  %11 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3, i32* nonnull %4, i32* nonnull %5)
  %12 = load i32, i32* %1, align 4, !tbaa !2
  %13 = load i32, i32* %2, align 4, !tbaa !2
  %14 = load i32, i32* %3, align 4, !tbaa !2
  %15 = load i32, i32* %4, align 4, !tbaa !2
  %16 = load i32, i32* %5, align 4, !tbaa !2
  call void @crackme(i32 %12, i32 %13, i32 %14, i32 %15, i32 %16)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %10) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %9) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %8) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %7) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %6) #5
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare dso_local i32 @__isoc99_scanf(i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #4

attributes #0 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Ubuntu clang version 10.0.1-++20200708122807+ef32c611aa2-1~exp1~20200707223407.61 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
