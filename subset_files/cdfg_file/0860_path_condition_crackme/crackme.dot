digraph "DFG for'crackme' function" {
	Node0x10c9030[shape=record, label="  %5 = xor i32 %2, -1"];
	Node0x10c90a0[shape=record, label="  %6 = or i32 %5, %1"];
	Node0x10c9110[shape=record, label="  %7 = or i32 %3, %0"];
	Node0x10c91b0[shape=record, label="  %8 = add i32 %0, 1"];
	Node0x10c9220[shape=record, label="  %9 = add i32 %6, %8"];
	Node0x10c9290[shape=record, label="  %10 = sub i32 %9, %7"];
	Node0x10c9300[shape=record, label="  %11 = and i32 %5, %1"];
	Node0x10c9370[shape=record, label="  %12 = xor i32 %2, %1"];
	Node0x10c93e0[shape=record, label="  %13 = and i32 %2, %1"];
	Node0x10c9450[shape=record, label="  %14 = xor i32 %13, -1"];
	Node0x10c94c0[shape=record, label="  %15 = shl i32 %5, 1"];
	Node0x10c9560[shape=record, label="  %16 = shl i32 %11, 2"];
	Node0x10c95d0[shape=record, label="  %17 = and i32 %3, %0"];
	Node0x10c9640[shape=record, label="  %18 = shl i32 %17, 1"];
	Node0x10c96e0[shape=record, label="  %19 = xor i32 %18, -2"];
	Node0x10c9750[shape=record, label="  %20 = xor i32 %3, %0"];
	Node0x10c97c0[shape=record, label="  %21 = shl i32 %7, 1"];
	Node0x10c9830[shape=record, label="  %22 = xor i32 %21, -2"];
	Node0x10c98a0[shape=record, label="  %23 = xor i32 %3, -1"];
	Node0x10c9910[shape=record, label="  %24 = and i32 %23, %0"];
	Node0x10c9980[shape=record, label="  %25 = shl i32 %12, 1"];
	Node0x10c99f0[shape=record, label="  %26 = shl i32 %1, 1"];
	Node0x10c9a60[shape=record, label="  %27 = sub i32 %2, %26"];
	Node0x10c9ad0[shape=record, label="  %28 = add i32 %27, %11"];
	Node0x10c9b40[shape=record, label="  %29 = sub i32 %28, %12"];
	Node0x10c9bb0[shape=record, label="  %30 = add i32 %29, %14"];
	Node0x10c9c20[shape=record, label="  %31 = sub i32 %30, %15"];
	Node0x10c9c90[shape=record, label="  %32 = add i32 %31, %6"];
	Node0x10c9f10[shape=record, label="  %33 = add i32 %32, %16"];
	Node0x10c9f80[shape=record, label="  %34 = add i32 %33, %20"];
	Node0x10c9ff0[shape=record, label="  %35 = add i32 %34, %24"];
	Node0x10ca060[shape=record, label="  %36 = sub i32 %35, %25"];
	Node0x10ca0d0[shape=record, label="  %37 = sub i32 %36, %19"];
	Node0x10ca140[shape=record, label="  %38 = add i32 %37, %22"];
	Node0x10ca1b0[shape=record, label="  %39 = icmp eq i32 %10, %38"];
	Node0x1069268[shape=record, label="  %40 = select i1 %39, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0x10ca650[shape=record, label="  %41 = tail call i32 @puts(i8* nonnull dereferenceable(1) %40)"];
	Node0x10ca6a0[shape=record, label="  ret void"];
	Node0x10c9030 -> Node0x10c90a0;
	Node0x10c90a0 -> Node0x10c9110;
	Node0x10c9110 -> Node0x10c91b0;
	Node0x10c91b0 -> Node0x10c9220;
	Node0x10c9220 -> Node0x10c9290;
	Node0x10c9290 -> Node0x10c9300;
	Node0x10c9300 -> Node0x10c9370;
	Node0x10c9370 -> Node0x10c93e0;
	Node0x10c93e0 -> Node0x10c9450;
	Node0x10c9450 -> Node0x10c94c0;
	Node0x10c94c0 -> Node0x10c9560;
	Node0x10c9560 -> Node0x10c95d0;
	Node0x10c95d0 -> Node0x10c9640;
	Node0x10c9640 -> Node0x10c96e0;
	Node0x10c96e0 -> Node0x10c9750;
	Node0x10c9750 -> Node0x10c97c0;
	Node0x10c97c0 -> Node0x10c9830;
	Node0x10c9830 -> Node0x10c98a0;
	Node0x10c98a0 -> Node0x10c9910;
	Node0x10c9910 -> Node0x10c9980;
	Node0x10c9980 -> Node0x10c99f0;
	Node0x10c99f0 -> Node0x10c9a60;
	Node0x10c9a60 -> Node0x10c9ad0;
	Node0x10c9ad0 -> Node0x10c9b40;
	Node0x10c9b40 -> Node0x10c9bb0;
	Node0x10c9bb0 -> Node0x10c9c20;
	Node0x10c9c20 -> Node0x10c9c90;
	Node0x10c9c90 -> Node0x10c9f10;
	Node0x10c9f10 -> Node0x10c9f80;
	Node0x10c9f80 -> Node0x10c9ff0;
	Node0x10c9ff0 -> Node0x10ca060;
	Node0x10ca060 -> Node0x10ca0d0;
	Node0x10ca0d0 -> Node0x10ca140;
	Node0x10ca140 -> Node0x10ca1b0;
	Node0x10ca1b0 -> Node0x1069268;
	Node0x1069268 -> Node0x10ca650;
	Node0x10ca650 -> Node0x10ca6a0;
edge [color=red]
	Node0x10c9030 -> Node0x10c90a0;
	Node0x10c90a0 -> Node0x10c9220;
	Node0x10c91b0 -> Node0x10c9220;
	Node0x10c9220 -> Node0x10c9290;
	Node0x10c9110 -> Node0x10c9290;
	Node0x10c9030 -> Node0x10c9300;
	Node0x10c93e0 -> Node0x10c9450;
	Node0x10c9030 -> Node0x10c94c0;
	Node0x10c9300 -> Node0x10c9560;
	Node0x10c95d0 -> Node0x10c9640;
	Node0x10c9640 -> Node0x10c96e0;
	Node0x10c9110 -> Node0x10c97c0;
	Node0x10c97c0 -> Node0x10c9830;
	Node0x10c98a0 -> Node0x10c9910;
	Node0x10c9370 -> Node0x10c9980;
	Node0x10c99f0 -> Node0x10c9a60;
	Node0x10c9a60 -> Node0x10c9ad0;
	Node0x10c9300 -> Node0x10c9ad0;
	Node0x10c9ad0 -> Node0x10c9b40;
	Node0x10c9370 -> Node0x10c9b40;
	Node0x10c9b40 -> Node0x10c9bb0;
	Node0x10c9450 -> Node0x10c9bb0;
	Node0x10c9bb0 -> Node0x10c9c20;
	Node0x10c94c0 -> Node0x10c9c20;
	Node0x10c9c20 -> Node0x10c9c90;
	Node0x10c90a0 -> Node0x10c9c90;
	Node0x10c9c90 -> Node0x10c9f10;
	Node0x10c9560 -> Node0x10c9f10;
	Node0x10c9f10 -> Node0x10c9f80;
	Node0x10c9750 -> Node0x10c9f80;
	Node0x10c9f80 -> Node0x10c9ff0;
	Node0x10c9910 -> Node0x10c9ff0;
	Node0x10c9ff0 -> Node0x10ca060;
	Node0x10c9980 -> Node0x10ca060;
	Node0x10ca060 -> Node0x10ca0d0;
	Node0x10c96e0 -> Node0x10ca0d0;
	Node0x10ca0d0 -> Node0x10ca140;
	Node0x10c9830 -> Node0x10ca140;
	Node0x10c9290 -> Node0x10ca1b0;
	Node0x10ca140 -> Node0x10ca1b0;
	Node0x10ca1b0 -> Node0x1069268;
	Node0x1069268 -> Node0x10ca650;
}
